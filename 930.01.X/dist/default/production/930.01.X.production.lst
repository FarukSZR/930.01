

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Aug 07 02:23:30 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    47                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    48  0000                     
    49                           ; Version 2.20
    50                           ; Generated 05/05/2020 GMT
    51                           ; 
    52                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F46K22 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	eeprom_data
    85  F00000  01 02 04 00 00 00 00 00 	db	1,2,4,0,0,0,0,0	;# 
    86  0000                     _ANSELBbits	set	3897
    87  0000                     _ANSELCbits	set	3898
    88  0000                     _ANSELB	set	3897
    89  0000                     _ANSELDbits	set	3899
    90  0000                     _ANSELEbits	set	3900
    91  0000                     _ANSELAbits	set	3896
    92  0000                     _PIR2bits	set	4001
    93  0000                     _EECON2	set	4007
    94  0000                     _EEDATA	set	4008
    95  0000                     _EECON1bits	set	4006
    96  0000                     _EEADR	set	4009
    97  0000                     _EEADRH	set	4010
    98  0000                     _LATEbits	set	3981
    99  0000                     _LATAbits	set	3977
   100  0000                     _LATBbits	set	3978
   101  0000                     _PORTBbits	set	3969
   102  0000                     _CCPR2L	set	3943
   103  0000                     _CCPR1L	set	4030
   104  0000                     _PR2	set	4027
   105  0000                     _TMR2	set	4028
   106  0000                     _T2CONbits	set	4026
   107  0000                     _CCP2CON	set	3942
   108  0000                     _CCP1CON	set	4029
   109  0000                     _TRISCbits	set	3988
   110  0000                     _TRISBbits	set	3987
   111  0000                     _OSCTUNEbits	set	3995
   112  0000                     _OSCCONbits	set	4051
   113  0000                     _TRISDbits	set	3989
   114  0000                     _PORTAbits	set	3968
   115  0000                     _PORTEbits	set	3972
   116  0000                     _PORTDbits	set	3971
   117  0000                     _T0CON	set	4053
   118  0000                     _TMR0L	set	4054
   119  0000                     _TMR0H	set	4055
   120  0000                     _INTCONbits	set	4082
   121  0000                     _ADCON2bits	set	4032
   122  0000                     _ADCON1	set	4033
   123  0000                     _ADCON0	set	4034
   124  0000                     _TRISEbits	set	3990
   125  0000                     _TRISAbits	set	3986
   126  0000                     _ADRESL	set	4035
   127  0000                     _ADRESH	set	4036
   128  0000                     _ADCON0bits	set	4034
   129                           
   130                           	psect	smallconst
   131  001000                     __psmallconst:
   132                           	callstack 0
   133  001000  00                 	db	0
   134  001001                     STR_6:
   135  001001  25                 	db	37
   136  001002  64                 	db	100	;'d'
   137  001003  20                 	db	32
   138  001004  20                 	db	32
   139  001005  20                 	db	32
   140  001006  20                 	db	32
   141  001007  20                 	db	32
   142  001008  20                 	db	32
   143  001009  20                 	db	32
   144  00100A  20                 	db	32
   145  00100B  20                 	db	32
   146  00100C  20                 	db	32
   147  00100D  20                 	db	32
   148  00100E  20                 	db	32
   149  00100F  20                 	db	32
   150  001010  20                 	db	32
   151  001011  20                 	db	32
   152  001012  00                 	db	0
   153  001013                     STR_9:
   154  001013  48                 	db	72	;'H'
   155  001014  49                 	db	73	;'I'
   156  001015  5A                 	db	90	;'Z'
   157  001016  20                 	db	32
   158  001017  4C                 	db	76	;'L'
   159  001018  69                 	db	105	;'i'
   160  001019  4D                 	db	77	;'M'
   161  00101A  69                 	db	105	;'i'
   162  00101B  54                 	db	84	;'T'
   163  00101C  69                 	db	105	;'i'
   164  00101D  20                 	db	32
   165  00101E  20                 	db	32
   166  00101F  20                 	db	32
   167  001020  20                 	db	32
   168  001021  20                 	db	32
   169  001022  20                 	db	32
   170  001023  00                 	db	0
   171  001024                     STR_1:
   172  001024  4B                 	db	75	;'K'
   173  001025  41                 	db	65	;'A'
   174  001026  4C                 	db	76	;'L'
   175  001027  41                 	db	65	;'A'
   176  001028  4E                 	db	78	;'N'
   177  001029  20                 	db	32
   178  00102A  5A                 	db	90	;'Z'
   179  00102B  41                 	db	65	;'A'
   180  00102C  4D                 	db	77	;'M'
   181  00102D  41                 	db	65	;'A'
   182  00102E  4E                 	db	78	;'N'
   183  00102F  20                 	db	32
   184  001030  20                 	db	32
   185  001031  20                 	db	32
   186  001032  20                 	db	32
   187  001033  20                 	db	32
   188  001034  00                 	db	0
   189  001035                     STR_11:
   190  001035  5A                 	db	90	;'Z'
   191  001036  41                 	db	65	;'A'
   192  001037  4D                 	db	77	;'M'
   193  001038  41                 	db	65	;'A'
   194  001039  4E                 	db	78	;'N'
   195  00103A  20                 	db	32
   196  00103B  44                 	db	68	;'D'
   197  00103C  4F                 	db	79	;'O'
   198  00103D  4C                 	db	76	;'L'
   199  00103E  44                 	db	68	;'D'
   200  00103F  55                 	db	85	;'U'
   201  001040  20                 	db	32
   202  001041  20                 	db	32
   203  001042  20                 	db	32
   204  001043  20                 	db	32
   205  001044  20                 	db	32
   206  001045  00                 	db	0
   207  001046                     STR_13:
   208  001046  48                 	db	72	;'H'
   209  001047  41                 	db	65	;'A'
   210  001048  52                 	db	82	;'R'
   211  001049  45                 	db	69	;'E'
   212  00104A  4B                 	db	75	;'K'
   213  00104B  45                 	db	69	;'E'
   214  00104C  54                 	db	84	;'T'
   215  00104D  20                 	db	32
   216  00104E  44                 	db	68	;'D'
   217  00104F  55                 	db	85	;'U'
   218  001050  52                 	db	82	;'R'
   219  001051  44                 	db	68	;'D'
   220  001052  55                 	db	85	;'U'
   221  001053  20                 	db	32
   222  001054  20                 	db	32
   223  001055  20                 	db	32
   224  001056  00                 	db	0
   225  001057                     STR_5:
   226  001057  48                 	db	72	;'H'
   227  001058  41                 	db	65	;'A'
   228  001059  52                 	db	82	;'R'
   229  00105A  45                 	db	69	;'E'
   230  00105B  4B                 	db	75	;'K'
   231  00105C  54                 	db	84	;'T'
   232  00105D  20                 	db	32
   233  00105E  5A                 	db	90	;'Z'
   234  00105F  41                 	db	65	;'A'
   235  001060  4D                 	db	77	;'M'
   236  001061  41                 	db	65	;'A'
   237  001062  4E                 	db	78	;'N'
   238  001063  49                 	db	73	;'I'
   239  001064  20                 	db	32
   240  001065  64                 	db	100	;'d'
   241  001066  6B                 	db	107	;'k'
   242  001067  00                 	db	0
   243  001068                     STR_7:
   244  001068  44                 	db	68	;'D'
   245  001069  55                 	db	85	;'U'
   246  00106A  52                 	db	82	;'R'
   247  00106B  4D                 	db	77	;'M'
   248  00106C  41                 	db	65	;'A'
   249  00106D  20                 	db	32
   250  00106E  5A                 	db	90	;'Z'
   251  00106F  41                 	db	65	;'A'
   252  001070  4D                 	db	77	;'M'
   253  001071  41                 	db	65	;'A'
   254  001072  4E                 	db	78	;'N'
   255  001073  49                 	db	73	;'I'
   256  001074  20                 	db	32
   257  001075  20                 	db	32
   258  001076  6D                 	db	109	;'m'
   259  001077  73                 	db	115	;'s'
   260  001078  00                 	db	0
   261  001079                     STR_3:
   262  001079  47                 	db	71	;'G'
   263  00107A  69                 	db	105	;'i'
   264  00107B  5A                 	db	90	;'Z'
   265  00107C  4C                 	db	76	;'L'
   266  00107D  69                 	db	105	;'i'
   267  00107E  20                 	db	32
   268  00107F  4D                 	db	77	;'M'
   269  001080  45                 	db	69	;'E'
   270  001081  4E                 	db	78	;'N'
   271  001082  55                 	db	85	;'U'
   272  001083  20                 	db	32
   273  001084  20                 	db	32
   274  001085  20                 	db	32
   275  001086  20                 	db	32
   276  001087  20                 	db	32
   277  001088  00                 	db	0
   278  001089                     STR_12:
   279  001089  20                 	db	32
   280  00108A  20                 	db	32
   281  00108B  20                 	db	32
   282  00108C  20                 	db	32
   283  00108D  20                 	db	32
   284  00108E  20                 	db	32
   285  00108F  25                 	db	37
   286  001090  64                 	db	100	;'d'
   287  001091  3A                 	db	58	;':'
   288  001092  25                 	db	37
   289  001093  64                 	db	100	;'d'
   290  001094  20                 	db	32
   291  001095  20                 	db	32
   292  001096  20                 	db	32
   293  001097  20                 	db	32
   294  001098  00                 	db	0
   295  001099                     STR_2:
   296  001099  20                 	db	32
   297  00109A  20                 	db	32
   298  00109B  20                 	db	32
   299  00109C  20                 	db	32
   300  00109D  20                 	db	32
   301  00109E  20                 	db	32
   302  00109F  25                 	db	37
   303  0010A0  64                 	db	100	;'d'
   304  0010A1  3A                 	db	58	;':'
   305  0010A2  25                 	db	37
   306  0010A3  64                 	db	100	;'d'
   307  0010A4  20                 	db	32
   308  0010A5  20                 	db	32
   309  0010A6  20                 	db	32
   310  0010A7  00                 	db	0
   311  0010A8  00                 	db	0	; dummy byte at the end
   312  0000                     
   313                           ; #config settings
   314                           
   315                           	psect	cinit
   316  00282A                     __pcinit:
   317                           	callstack 0
   318  00282A                     start_initialization:
   319                           	callstack 0
   320  00282A                     __initialization:
   321                           	callstack 0
   322                           
   323                           ; Clear objects allocated to BANK1 (112 bytes)
   324  00282A  EE01  F000         	lfsr	0,__pbssBANK1
   325  00282E  0E70               	movlw	112
   326  002830                     clear_0:
   327  002830  6AEE               	clrf	postinc0,c
   328  002832  06E8               	decf	wreg,f,c
   329  002834  E1FD               	bnz	clear_0
   330                           
   331                           ; Clear objects allocated to BANK0 (126 bytes)
   332  002836  EE00  F060         	lfsr	0,__pbssBANK0
   333  00283A  0E7E               	movlw	126
   334  00283C                     clear_1:
   335  00283C  6AEE               	clrf	postinc0,c
   336  00283E  06E8               	decf	wreg,f,c
   337  002840  E1FD               	bnz	clear_1
   338                           
   339                           ; Clear objects allocated to COMRAM (5 bytes)
   340  002842  6A5E               	clrf	(__pbssCOMRAM+4)& (0+255),c
   341  002844  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   342  002846  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   343  002848  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   344  00284A  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   345  00284C                     end_of_initialization:
   346                           	callstack 0
   347  00284C                     __end_of__initialization:
   348                           	callstack 0
   349  00284C  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   350  00284E  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   351  002850  0E00               	movlw	low (__Lmediumconst shr (0+16))
   352  002852  6EF8               	movwf	tblptru,c
   353  002854  0100               	movlb	0
   354  002856  EFF6  F010         	goto	_main	;jump to C main() function
   355                           
   356                           	psect	bssCOMRAM
   357  00005A                     __pbssCOMRAM:
   358                           	callstack 0
   359  00005A                     _menu_value:
   360                           	callstack 0
   361  00005A                     	ds	3
   362  00005D                     _menu_selected:
   363                           	callstack 0
   364  00005D                     	ds	1
   365  00005E                     _button_bounce_controller:
   366                           	callstack 0
   367  00005E                     	ds	1
   368                           
   369                           	psect	bssBANK0
   370  000060                     __pbssBANK0:
   371                           	callstack 0
   372  000060                     _procces_data:
   373                           	callstack 0
   374  000060                     	ds	32
   375  000080                     _textCursor2:
   376                           	callstack 0
   377  000080                     	ds	16
   378  000090                     _adc_raw_data:
   379                           	callstack 0
   380  000090                     	ds	16
   381  0000A0                     _driver_limit:
   382                           	callstack 0
   383  0000A0                     	ds	12
   384  0000AC                     _timer_value:
   385                           	callstack 0
   386  0000AC                     	ds	10
   387  0000B6                     fabsf@F463:
   388                           	callstack 0
   389  0000B6                     	ds	4
   390  0000BA                     _counter:
   391                           	callstack 0
   392  0000BA                     	ds	4
   393  0000BE                     _nout:
   394                           	callstack 0
   395  0000BE                     	ds	2
   396  0000C0                     _width:
   397                           	callstack 0
   398  0000C0                     	ds	2
   399  0000C2                     _prec:
   400                           	callstack 0
   401  0000C2                     	ds	2
   402  0000C4                     _flags:
   403                           	callstack 0
   404  0000C4                     	ds	2
   405  0000C6                     _menu_flags:
   406                           	callstack 0
   407  0000C6                     	ds	1
   408  0000C7                     _stopIsClick:
   409                           	callstack 0
   410  0000C7                     	ds	1
   411  0000C8                     _startIsClick:
   412                           	callstack 0
   413  0000C8                     	ds	1
   414  0000C9                     _pauseIsClick:
   415                           	callstack 0
   416  0000C9                     	ds	1
   417  0000CA                     _timer_counter_flag:
   418                           	callstack 0
   419  0000CA                     	ds	1
   420  0000CB                     _controller:
   421                           	callstack 0
   422  0000CB                     	ds	19
   423                           
   424                           	psect	bssBANK1
   425  000100                     __pbssBANK1:
   426                           	callstack 0
   427  000100                     _convert_data:
   428                           	callstack 0
   429  000100                     	ds	48
   430  000130                     	ds	16
   431  000140                     	ds	16
   432  000150                     _dbuf:
   433                           	callstack 0
   434  000150                     	ds	32
   435                           
   436                           	psect	cstackBANK0
   437  0000DE                     __pcstackBANK0:
   438                           	callstack 0
   439  0000DE                     ?_sprintf:
   440                           	callstack 0
   441  0000DE                     sprintf@s:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x0
   445  0000DE                     	ds	2
   446  0000E0                     sprintf@fmt:
   447                           	callstack 0
   448                           
   449                           ; 2 bytes @ 0x2
   450  0000E0                     	ds	8
   451  0000E8                     sprintf@ap:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0xA
   455  0000E8                     	ds	2
   456  0000EA                     sprintf@f:
   457                           	callstack 0
   458                           
   459                           ; 6 bytes @ 0xC
   460  0000EA                     	ds	6
   461  0000F0                     stateMachine@textCursor2:
   462                           	callstack 0
   463                           
   464                           ; 16 bytes @ 0x12
   465  0000F0                     	ds	16
   466                           
   467                           	psect	cstackCOMRAM
   468  000001                     __pcstackCOMRAM:
   469                           	callstack 0
   470  000001                     ?_strlen:
   471                           	callstack 0
   472  000001                     ?___aodiv:
   473                           	callstack 0
   474  000001                     ?___aomod:
   475                           	callstack 0
   476  000001                     Lcd_Port@a:
   477                           	callstack 0
   478  000001                     eepromRead@address:
   479                           	callstack 0
   480  000001                     eepromWrite@address:
   481                           	callstack 0
   482  000001                     fputc@c:
   483                           	callstack 0
   484  000001                     strlen@s:
   485                           	callstack 0
   486  000001                     ___aodiv@dividend:
   487                           	callstack 0
   488  000001                     ___aomod@dividend:
   489                           	callstack 0
   490  000001                     buttonControlFlags@textCursor2:
   491                           	callstack 0
   492                           
   493                           ; 16 bytes @ 0x0
   494  000001                     	ds	1
   495  000002                     ??_Lcd_Cmd:
   496  000002                     Lcd_Write_Char@temp:
   497                           	callstack 0
   498                           
   499                           ; 1 bytes @ 0x1
   500  000002                     	ds	1
   501  000003                     ??_system_init:
   502  000003                     Lcd_Cmd@a:
   503                           	callstack 0
   504  000003                     Lcd_Write_Char@y:
   505                           	callstack 0
   506  000003                     eepromWrite@data:
   507                           	callstack 0
   508  000003                     fputc@fp:
   509                           	callstack 0
   510  000003                     strlen@a:
   511                           	callstack 0
   512                           
   513                           ; 2 bytes @ 0x2
   514  000003                     	ds	1
   515  000004                     ??_lcd_init:
   516  000004                     Lcd_Set_Cursor@b:
   517                           	callstack 0
   518  000004                     Lcd_Write_Char@a:
   519                           	callstack 0
   520                           
   521                           ; 1 bytes @ 0x3
   522  000004                     	ds	1
   523  000005                     ??_fputc:
   524  000005                     Lcd_Set_Cursor@a:
   525                           	callstack 0
   526  000005                     Lcd_Write_String@a:
   527                           	callstack 0
   528                           
   529                           ; 2 bytes @ 0x4
   530  000005                     	ds	1
   531  000006                     Lcd_Set_Cursor@z:
   532                           	callstack 0
   533                           
   534                           ; 1 bytes @ 0x5
   535  000006                     	ds	1
   536  000007                     ??_Lcd_Write_String:
   537  000007                     Lcd_Set_Cursor@y:
   538                           	callstack 0
   539                           
   540                           ; 1 bytes @ 0x6
   541  000007                     	ds	1
   542  000008                     Lcd_Set_Cursor@temp:
   543                           	callstack 0
   544                           
   545                           ; 1 bytes @ 0x7
   546  000008                     	ds	1
   547  000009                     Lcd_Write_String@i:
   548                           	callstack 0
   549  000009                     ___aodiv@divisor:
   550                           	callstack 0
   551  000009                     ___aomod@divisor:
   552                           	callstack 0
   553                           
   554                           ; 8 bytes @ 0x8
   555  000009                     	ds	1
   556  00000A                     fputs@s:
   557                           	callstack 0
   558                           
   559                           ; 2 bytes @ 0x9
   560  00000A                     	ds	2
   561  00000C                     fputs@fp:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0xB
   565  00000C                     	ds	2
   566  00000E                     fputs@c:
   567                           	callstack 0
   568                           
   569                           ; 1 bytes @ 0xD
   570  00000E                     	ds	1
   571  00000F                     fputs@i:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0xE
   575  00000F                     	ds	2
   576  000011                     ?_pad:
   577                           	callstack 0
   578  000011                     ___aodiv@counter:
   579                           	callstack 0
   580  000011                     ___aomod@counter:
   581                           	callstack 0
   582  000011                     pad@fp:
   583                           	callstack 0
   584                           
   585                           ; 2 bytes @ 0x10
   586  000011                     	ds	1
   587  000012                     ___aodiv@sign:
   588                           	callstack 0
   589  000012                     ___aomod@sign:
   590                           	callstack 0
   591                           
   592                           ; 1 bytes @ 0x11
   593  000012                     	ds	1
   594  000013                     ?_abs:
   595                           	callstack 0
   596  000013                     pad@buf:
   597                           	callstack 0
   598  000013                     abs@a:
   599                           	callstack 0
   600  000013                     ___aodiv@quotient:
   601                           	callstack 0
   602                           
   603                           ; 8 bytes @ 0x12
   604  000013                     	ds	2
   605  000015                     ??_abs:
   606  000015                     pad@p:
   607                           	callstack 0
   608                           
   609                           ; 2 bytes @ 0x14
   610  000015                     	ds	2
   611  000017                     ??_pad:
   612                           
   613                           ; 1 bytes @ 0x16
   614  000017                     	ds	1
   615  000018                     pad@i:
   616                           	callstack 0
   617                           
   618                           ; 2 bytes @ 0x17
   619  000018                     	ds	2
   620  00001A                     pad@w:
   621                           	callstack 0
   622                           
   623                           ; 2 bytes @ 0x19
   624  00001A                     	ds	2
   625  00001C                     ?_dtoa:
   626                           	callstack 0
   627  00001C                     dtoa@fp:
   628                           	callstack 0
   629                           
   630                           ; 2 bytes @ 0x1B
   631  00001C                     	ds	2
   632  00001E                     dtoa@d:
   633                           	callstack 0
   634                           
   635                           ; 8 bytes @ 0x1D
   636  00001E                     	ds	8
   637  000026                     ??_dtoa:
   638                           
   639                           ; 1 bytes @ 0x25
   640  000026                     	ds	8
   641  00002E                     _dtoa$2789:
   642                           	callstack 0
   643                           
   644                           ; 2 bytes @ 0x2D
   645  00002E                     	ds	2
   646  000030                     dtoa@p:
   647                           	callstack 0
   648                           
   649                           ; 2 bytes @ 0x2F
   650  000030                     	ds	2
   651  000032                     dtoa@w:
   652                           	callstack 0
   653                           
   654                           ; 2 bytes @ 0x31
   655  000032                     	ds	2
   656  000034                     dtoa@s:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0x33
   660  000034                     	ds	2
   661  000036                     dtoa@n:
   662                           	callstack 0
   663                           
   664                           ; 8 bytes @ 0x35
   665  000036                     	ds	8
   666  00003E                     dtoa@i:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0x3D
   670  00003E                     	ds	2
   671  000040                     ?_vfpfcnvrt:
   672                           	callstack 0
   673  000040                     vfpfcnvrt@fp:
   674                           	callstack 0
   675                           
   676                           ; 2 bytes @ 0x3F
   677  000040                     	ds	2
   678  000042                     vfpfcnvrt@fmt:
   679                           	callstack 0
   680                           
   681                           ; 2 bytes @ 0x41
   682  000042                     	ds	2
   683  000044                     vfpfcnvrt@ap:
   684                           	callstack 0
   685                           
   686                           ; 2 bytes @ 0x43
   687  000044                     	ds	2
   688  000046                     ??_vfpfcnvrt:
   689                           
   690                           ; 1 bytes @ 0x45
   691  000046                     	ds	2
   692  000048                     vfpfcnvrt@ll:
   693                           	callstack 0
   694                           
   695                           ; 8 bytes @ 0x47
   696  000048                     	ds	8
   697  000050                     ?_vfprintf:
   698                           	callstack 0
   699  000050                     vfprintf@fp:
   700                           	callstack 0
   701                           
   702                           ; 2 bytes @ 0x4F
   703  000050                     	ds	2
   704  000052                     vfprintf@fmt:
   705                           	callstack 0
   706                           
   707                           ; 2 bytes @ 0x51
   708  000052                     	ds	2
   709  000054                     vfprintf@ap:
   710                           	callstack 0
   711                           
   712                           ; 2 bytes @ 0x53
   713  000054                     	ds	2
   714  000056                     vfprintf@cfmt:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x55
   718  000056                     	ds	2
   719  000058                     ??_stateMachine:
   720  000058                     
   721                           ; 1 bytes @ 0x57
   722  000058                     	ds	2
   723  00005A                     
   724                           ; 1 bytes @ 0x59
   725 ;;
   726 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   727 ;;
   728 ;; *************** function _main *****************
   729 ;; Defined at:
   730 ;;		line 43 in file "fs_main.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;		None
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   748 ;;Total ram usage:        0 bytes
   749 ;; Hardware stack levels required when called:   11
   750 ;; This function calls:
   751 ;;		_Lcd_Clear
   752 ;;		_lcd_init
   753 ;;		_mcu_init
   754 ;;		_menuControl
   755 ;;		_menuInitialize
   756 ;;		_system_init
   757 ;;		_timer_0_init
   758 ;; This function is called by:
   759 ;;		Startup code after reset
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763                           	psect	text0
   764  0021EC                     __ptext0:
   765                           	callstack 0
   766  0021EC                     _main:
   767                           	callstack 20
   768  0021EC                     
   769                           ;fs_main.c: 45:     mcu_init();
   770  0021EC  EC76  F014         	call	_mcu_init	;wreg free
   771  0021F0                     
   772                           ;fs_main.c: 46:     menuInitialize();
   773  0021F0  EC45  F014         	call	_menuInitialize	;wreg free
   774  0021F4                     
   775                           ;fs_main.c: 52:     timer_0_init();
   776  0021F4  EC81  F014         	call	_timer_0_init	;wreg free
   777  0021F8                     
   778                           ;fs_main.c: 53:     lcd_init();
   779  0021F8  EC26  F012         	call	_lcd_init	;wreg free
   780  0021FC                     
   781                           ;fs_main.c: 54:     system_init();
   782  0021FC  EC5F  F010         	call	_system_init	;wreg free
   783  002200                     
   784                           ;fs_main.c: 55:     Lcd_Clear();
   785  002200  EC8A  F014         	call	_Lcd_Clear	;wreg free
   786  002204                     l3272:
   787                           
   788                           ;fs_main.c: 62: {;fs_main.c: 64:     if (timer_counter_flag.one_second_flag == 1)
   789  002204  0100               	movlb	0	; () banked
   790  002206  A1CA               	btfss	_timer_counter_flag& (0+255),0,b
   791  002208  EF08  F011         	goto	u3111
   792  00220C  EF0A  F011         	goto	u3110
   793  002210                     u3111:
   794  002210  EF58  F011         	goto	l3298
   795  002214                     u3110:
   796  002214                     
   797                           ; BSR set to: 0
   798                           ;fs_main.c: 65:     {;fs_main.c: 66:         timer_counter_flag.one_second_flag = 0;
   799  002214  91CA               	bcf	_timer_counter_flag& (0+255),0,b
   800  002216                     
   801                           ; BSR set to: 0
   802                           ;fs_main.c: 68:         if ( (startIsClick == 1) && (pauseIsClick == 0) && (stopIsClick 
      +                          == 0) && (menu_selected == MAIN_MENU) )
   803  002216  05C8               	decf	_startIsClick& (0+255),w,b
   804  002218  A4D8               	btfss	status,2,c
   805  00221A  EF11  F011         	goto	u3121
   806  00221E  EF13  F011         	goto	u3120
   807  002222                     u3121:
   808  002222  EF58  F011         	goto	l3298
   809  002226                     u3120:
   810  002226                     
   811                           ; BSR set to: 0
   812  002226  51C9               	movf	_pauseIsClick& (0+255),w,b
   813  002228  A4D8               	btfss	status,2,c
   814  00222A  EF19  F011         	goto	u3131
   815  00222E  EF1B  F011         	goto	u3130
   816  002232                     u3131:
   817  002232  EF58  F011         	goto	l3298
   818  002236                     u3130:
   819  002236                     
   820                           ; BSR set to: 0
   821  002236  51C7               	movf	_stopIsClick& (0+255),w,b
   822  002238  A4D8               	btfss	status,2,c
   823  00223A  EF21  F011         	goto	u3141
   824  00223E  EF23  F011         	goto	u3140
   825  002242                     u3141:
   826  002242  EF58  F011         	goto	l3298
   827  002246                     u3140:
   828  002246                     
   829                           ; BSR set to: 0
   830  002246  505D               	movf	_menu_selected^0,w,c
   831  002248  A4D8               	btfss	status,2,c
   832  00224A  EF29  F011         	goto	u3151
   833  00224E  EF2B  F011         	goto	u3150
   834  002252                     u3151:
   835  002252  EF58  F011         	goto	l3298
   836  002256                     u3150:
   837  002256                     
   838                           ; BSR set to: 0
   839                           ;fs_main.c: 69:         {;fs_main.c: 70:             timer_value.second++;
   840  002256  4BAC               	infsnz	_timer_value& (0+255),f,b
   841  002258  2BAD               	incf	(_timer_value+1)& (0+255),f,b
   842  00225A                     
   843                           ; BSR set to: 0
   844                           ;fs_main.c: 71:             timer_value.remainingSecond = 60 - timer_value.second;
   845  00225A  51AC               	movf	_timer_value& (0+255),w,b
   846  00225C  083C               	sublw	60
   847  00225E  6FB0               	movwf	(_timer_value+4)& (0+255),b
   848  002260  51AD               	movf	(_timer_value+1)& (0+255),w,b
   849  002262  A0D8               	btfss	status,0,c
   850  002264  2AE8               	incf	wreg,f,c
   851  002266  0800               	sublw	0
   852  002268  6FB1               	movwf	(_timer_value+5)& (0+255),b
   853  00226A                     
   854                           ; BSR set to: 0
   855                           ;fs_main.c: 73:             if (timer_value.remainingSecond == 59 )
   856  00226A  0E3B               	movlw	59
   857  00226C  19B0               	xorwf	(_timer_value+4)& (0+255),w,b
   858  00226E  11B1               	iorwf	(_timer_value+5)& (0+255),w,b
   859  002270  A4D8               	btfss	status,2,c
   860  002272  EF3D  F011         	goto	u3161
   861  002276  EF3F  F011         	goto	u3160
   862  00227A                     u3161:
   863  00227A  EF49  F011         	goto	l3294
   864  00227E                     u3160:
   865  00227E                     
   866                           ; BSR set to: 0
   867                           ;fs_main.c: 74:             {;fs_main.c: 75:                 timer_value.minute++;
   868  00227E  4BAE               	infsnz	(_timer_value+2)& (0+255),f,b
   869  002280  2BAF               	incf	(_timer_value+3)& (0+255),f,b
   870  002282                     
   871                           ; BSR set to: 0
   872                           ;fs_main.c: 76:                 timer_value.remainingMinute = menu_value.driver_time - t
      +                          imer_value.minute;
   873  002282  51AE               	movf	(_timer_value+2)& (0+255),w,b
   874  002284  5C5A               	subwf	_menu_value^0,w,c
   875  002286  6FB2               	movwf	(_timer_value+6)& (0+255),b
   876  002288  51AF               	movf	(_timer_value+3)& (0+255),w,b
   877  00228A  A0D8               	btfss	status,0,c
   878  00228C  29AF               	incf	(_timer_value+3)& (0+255),w,b
   879  00228E  6BB3               	clrf	(_timer_value+7)& (0+255),b
   880  002290  5FB3               	subwf	(_timer_value+7)& (0+255),f,b
   881  002292                     l3294:
   882                           
   883                           ; BSR set to: 0
   884                           ;fs_main.c: 79:             if (timer_value.second > 59)
   885  002292  51AD               	movf	(_timer_value+1)& (0+255),w,b
   886  002294  E109               	bnz	u3170
   887  002296  0E3C               	movlw	60
   888  002298  5DAC               	subwf	_timer_value& (0+255),w,b
   889  00229A  A0D8               	btfss	status,0,c
   890  00229C  EF52  F011         	goto	u3171
   891  0022A0  EF54  F011         	goto	u3170
   892  0022A4                     u3171:
   893  0022A4  EF58  F011         	goto	l3298
   894  0022A8                     u3170:
   895  0022A8                     
   896                           ; BSR set to: 0
   897                           ;fs_main.c: 80:             {;fs_main.c: 81:                 timer_value.second = 0;
   898  0022A8  0E00               	movlw	0
   899  0022AA  6FAD               	movwf	(_timer_value+1)& (0+255),b
   900  0022AC  0E00               	movlw	0
   901  0022AE  6FAC               	movwf	_timer_value& (0+255),b
   902  0022B0                     l3298:
   903                           
   904                           ; BSR set to: 0
   905                           ;fs_main.c: 86:     menuControl();
   906  0022B0  EC16  F013         	call	_menuControl	;wreg free
   907  0022B4  EF02  F011         	goto	l3272
   908  0022B8  EF33  F000         	goto	start
   909  0022BC                     __end_of_main:
   910                           	callstack 0
   911                           
   912 ;; *************** function _timer_0_init *****************
   913 ;; Defined at:
   914 ;;		line 67 in file "fs_timer.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;		None
   917 ;; Auto vars:     Size  Location     Type
   918 ;;		None
   919 ;; Return value:  Size  Location     Type
   920 ;;                  1    wreg      void 
   921 ;; Registers used:
   922 ;;		wreg, status,2
   923 ;; Tracked objects:
   924 ;;		On entry : 0/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   932 ;;Total ram usage:        0 bytes
   933 ;; Hardware stack levels used:    1
   934 ;; Hardware stack levels required when called:    1
   935 ;; This function calls:
   936 ;;		Nothing
   937 ;; This function is called by:
   938 ;;		_main
   939 ;; This function uses a non-reentrant model
   940 ;;
   941                           
   942                           	psect	text1
   943  002902                     __ptext1:
   944                           	callstack 0
   945  002902                     _timer_0_init:
   946                           	callstack 29
   947  002902                     
   948                           ;fs_timer.c: 69:   T0CON = 0x81;
   949  002902  0E81               	movlw	129
   950  002904  6ED5               	movwf	213,c	;volatile
   951                           
   952                           ;fs_timer.c: 70:   TMR0H = 0x63;
   953  002906  0E63               	movlw	99
   954  002908  6ED7               	movwf	215,c	;volatile
   955                           
   956                           ;fs_timer.c: 71:   TMR0L = 0xC0;
   957  00290A  0EC0               	movlw	192
   958  00290C  6ED6               	movwf	214,c	;volatile
   959  00290E                     
   960                           ;fs_timer.c: 72:   INTCONbits.GIE = 1;
   961  00290E  8EF2               	bsf	242,7,c	;volatile
   962  002910                     
   963                           ;fs_timer.c: 73:   INTCONbits.TMR0IE = 1;
   964  002910  8AF2               	bsf	242,5,c	;volatile
   965  002912  0012               	return		;funcret
   966  002914                     __end_of_timer_0_init:
   967                           	callstack 0
   968                           
   969 ;; *************** function _system_init *****************
   970 ;; Defined at:
   971 ;;		line 83 in file "fs_mcu.c"
   972 ;; Parameters:    Size  Location     Type
   973 ;;		None
   974 ;; Auto vars:     Size  Location     Type
   975 ;;		None
   976 ;; Return value:  Size  Location     Type
   977 ;;                  1    wreg      void 
   978 ;; Registers used:
   979 ;;		wreg, status,2, cstack
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;Total ram usage:        2 bytes
   990 ;; Hardware stack levels used:    1
   991 ;; Hardware stack levels required when called:    2
   992 ;; This function calls:
   993 ;;		_eepromRead
   994 ;; This function is called by:
   995 ;;		_main
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999                           	psect	text2
  1000  0020BE                     __ptext2:
  1001                           	callstack 0
  1002  0020BE                     _system_init:
  1003                           	callstack 28
  1004  0020BE                     
  1005                           ;fs_mcu.c: 85:     driver_limit.pay = 0;
  1006  0020BE  0E00               	movlw	0
  1007  0020C0  0100               	movlb	0	; () banked
  1008  0020C2  6FA0               	movwf	_driver_limit& (0+255),b
  1009  0020C4  0E00               	movlw	0
  1010  0020C6  6FA1               	movwf	(_driver_limit+1)& (0+255),b
  1011  0020C8  0E00               	movlw	0
  1012  0020CA  6FA2               	movwf	(_driver_limit+2)& (0+255),b
  1013  0020CC  0E00               	movlw	0
  1014  0020CE  6FA3               	movwf	(_driver_limit+3)& (0+255),b
  1015                           
  1016                           ;fs_mcu.c: 86:     driver_limit.payda = 0;
  1017  0020D0  0E00               	movlw	0
  1018  0020D2  6FA4               	movwf	(_driver_limit+4)& (0+255),b
  1019  0020D4  0E00               	movlw	0
  1020  0020D6  6FA5               	movwf	(_driver_limit+5)& (0+255),b
  1021  0020D8  0E00               	movlw	0
  1022  0020DA  6FA6               	movwf	(_driver_limit+6)& (0+255),b
  1023  0020DC  0E00               	movlw	0
  1024  0020DE  6FA7               	movwf	(_driver_limit+7)& (0+255),b
  1025                           
  1026                           ;fs_mcu.c: 87:     driver_limit.ortalama = 0;
  1027  0020E0  0E00               	movlw	0
  1028  0020E2  6FA8               	movwf	(_driver_limit+8)& (0+255),b
  1029  0020E4  0E00               	movlw	0
  1030  0020E6  6FA9               	movwf	(_driver_limit+9)& (0+255),b
  1031  0020E8  0E00               	movlw	0
  1032  0020EA  6FAA               	movwf	(_driver_limit+10)& (0+255),b
  1033  0020EC  0E00               	movlw	0
  1034  0020EE  6FAB               	movwf	(_driver_limit+11)& (0+255),b
  1035                           
  1036                           ;fs_mcu.c: 88:     convert_data.convert_channel_0 = 0;
  1037  0020F0  0E00               	movlw	0
  1038  0020F2  0101               	movlb	1	; () banked
  1039  0020F4  6F00               	movwf	_convert_data& (0+255),b
  1040  0020F6  0E00               	movlw	0
  1041  0020F8  6F01               	movwf	(_convert_data+1)& (0+255),b
  1042  0020FA  0E00               	movlw	0
  1043  0020FC  6F02               	movwf	(_convert_data+2)& (0+255),b
  1044  0020FE  0E00               	movlw	0
  1045  002100  6F03               	movwf	(_convert_data+3)& (0+255),b
  1046                           
  1047                           ;fs_mcu.c: 89:     convert_data.convert_channel_1 = 0;
  1048  002102  0E00               	movlw	0
  1049  002104  6F04               	movwf	(_convert_data+4)& (0+255),b
  1050  002106  0E00               	movlw	0
  1051  002108  6F05               	movwf	(_convert_data+5)& (0+255),b
  1052  00210A  0E00               	movlw	0
  1053  00210C  6F06               	movwf	(_convert_data+6)& (0+255),b
  1054  00210E  0E00               	movlw	0
  1055  002110  6F07               	movwf	(_convert_data+7)& (0+255),b
  1056                           
  1057                           ;fs_mcu.c: 90:     convert_data.convert_channel_2 = 0;
  1058  002112  0E00               	movlw	0
  1059  002114  6F08               	movwf	(_convert_data+8)& (0+255),b
  1060  002116  0E00               	movlw	0
  1061  002118  6F09               	movwf	(_convert_data+9)& (0+255),b
  1062  00211A  0E00               	movlw	0
  1063  00211C  6F0A               	movwf	(_convert_data+10)& (0+255),b
  1064  00211E  0E00               	movlw	0
  1065  002120  6F0B               	movwf	(_convert_data+11)& (0+255),b
  1066                           
  1067                           ;fs_mcu.c: 91:     convert_data.convert_channel_3 = 0;
  1068  002122  0E00               	movlw	0
  1069  002124  6F0C               	movwf	(_convert_data+12)& (0+255),b
  1070  002126  0E00               	movlw	0
  1071  002128  6F0D               	movwf	(_convert_data+13)& (0+255),b
  1072  00212A  0E00               	movlw	0
  1073  00212C  6F0E               	movwf	(_convert_data+14)& (0+255),b
  1074  00212E  0E00               	movlw	0
  1075  002130  6F0F               	movwf	(_convert_data+15)& (0+255),b
  1076                           
  1077                           ;fs_mcu.c: 92:     convert_data.convert_channel_4 = 0;
  1078  002132  0E00               	movlw	0
  1079  002134  6F10               	movwf	(_convert_data+16)& (0+255),b
  1080  002136  0E00               	movlw	0
  1081  002138  6F11               	movwf	(_convert_data+17)& (0+255),b
  1082  00213A  0E00               	movlw	0
  1083  00213C  6F12               	movwf	(_convert_data+18)& (0+255),b
  1084  00213E  0E00               	movlw	0
  1085  002140  6F13               	movwf	(_convert_data+19)& (0+255),b
  1086                           
  1087                           ;fs_mcu.c: 93:     convert_data.convert_channel_5 = 0;
  1088  002142  0E00               	movlw	0
  1089  002144  6F14               	movwf	(_convert_data+20)& (0+255),b
  1090  002146  0E00               	movlw	0
  1091  002148  6F15               	movwf	(_convert_data+21)& (0+255),b
  1092  00214A  0E00               	movlw	0
  1093  00214C  6F16               	movwf	(_convert_data+22)& (0+255),b
  1094  00214E  0E00               	movlw	0
  1095  002150  6F17               	movwf	(_convert_data+23)& (0+255),b
  1096                           
  1097                           ;fs_mcu.c: 94:     convert_data.convert_channel_6 = 0;
  1098  002152  0E00               	movlw	0
  1099  002154  6F18               	movwf	(_convert_data+24)& (0+255),b
  1100  002156  0E00               	movlw	0
  1101  002158  6F19               	movwf	(_convert_data+25)& (0+255),b
  1102  00215A  0E00               	movlw	0
  1103  00215C  6F1A               	movwf	(_convert_data+26)& (0+255),b
  1104  00215E  0E00               	movlw	0
  1105  002160  6F1B               	movwf	(_convert_data+27)& (0+255),b
  1106                           
  1107                           ;fs_mcu.c: 95:     convert_data.convert_channel_7 = 0;
  1108  002162  0E00               	movlw	0
  1109  002164  6F1C               	movwf	(_convert_data+28)& (0+255),b
  1110  002166  0E00               	movlw	0
  1111  002168  6F1D               	movwf	(_convert_data+29)& (0+255),b
  1112  00216A  0E00               	movlw	0
  1113  00216C  6F1E               	movwf	(_convert_data+30)& (0+255),b
  1114  00216E  0E00               	movlw	0
  1115  002170  6F1F               	movwf	(_convert_data+31)& (0+255),b
  1116                           
  1117                           ;fs_mcu.c: 96:     controller.leftMotorSpeed = 0;
  1118  002172  0E00               	movlw	0
  1119  002174  0100               	movlb	0	; () banked
  1120  002176  6FD2               	movwf	(_controller+7)& (0+255),b
  1121  002178  0E00               	movlw	0
  1122  00217A  6FD1               	movwf	(_controller+6)& (0+255),b
  1123                           
  1124                           ;fs_mcu.c: 97:     controller.rightMotorSpeed = 0;
  1125  00217C  0E00               	movlw	0
  1126  00217E  6FD4               	movwf	(_controller+9)& (0+255),b
  1127  002180  0E00               	movlw	0
  1128  002182  6FD3               	movwf	(_controller+8)& (0+255),b
  1129                           
  1130                           ;fs_mcu.c: 98:     timer_value.timer_0_counter = 0;
  1131  002184  0E00               	movlw	0
  1132  002186  6FB5               	movwf	(_timer_value+9)& (0+255),b
  1133                           
  1134                           ;fs_mcu.c: 99:     controller.error = 0;
  1135  002188  0E00               	movlw	0
  1136  00218A  6FCC               	movwf	(_controller+1)& (0+255),b
  1137  00218C  0E00               	movlw	0
  1138  00218E  6FCB               	movwf	_controller& (0+255),b
  1139  002190                     
  1140                           ; BSR set to: 0
  1141                           ;fs_mcu.c: 101:     button_bounce_controller.menu = 0;
  1142  002190  905E               	bcf	_button_bounce_controller^0,0,c
  1143  002192                     
  1144                           ; BSR set to: 0
  1145                           ;fs_mcu.c: 102:     button_bounce_controller.pause = 0;
  1146  002192  965E               	bcf	_button_bounce_controller^0,3,c
  1147  002194                     
  1148                           ; BSR set to: 0
  1149                           ;fs_mcu.c: 103:     button_bounce_controller.start = 0;
  1150  002194  925E               	bcf	_button_bounce_controller^0,1,c
  1151  002196                     
  1152                           ; BSR set to: 0
  1153                           ;fs_mcu.c: 104:     button_bounce_controller.stop = 0;
  1154  002196  945E               	bcf	_button_bounce_controller^0,2,c
  1155  002198                     
  1156                           ; BSR set to: 0
  1157                           ;fs_mcu.c: 105:     menu_value.driver_time = (uint8_t)eepromRead(0x00);
  1158  002198  0E00               	movlw	0
  1159  00219A  6E02               	movwf	(eepromRead@address+1)^0,c
  1160  00219C  0E00               	movlw	0
  1161  00219E  6E01               	movwf	eepromRead@address^0,c
  1162  0021A0  EC57  F014         	call	_eepromRead	;wreg free
  1163  0021A4  6E5A               	movwf	_menu_value^0,c
  1164  0021A6                     
  1165                           ;fs_mcu.c: 106:     menu_value.stop_time = (uint8_t)eepromRead(0x01);
  1166  0021A6  0E00               	movlw	0
  1167  0021A8  6E02               	movwf	(eepromRead@address+1)^0,c
  1168  0021AA  0E01               	movlw	1
  1169  0021AC  6E01               	movwf	eepromRead@address^0,c
  1170  0021AE  EC57  F014         	call	_eepromRead	;wreg free
  1171  0021B2  6E5B               	movwf	(_menu_value+1)^0,c
  1172  0021B4                     
  1173                           ;fs_mcu.c: 107:     menu_value.speed_limit = (uint8_t)eepromRead(0x02);
  1174  0021B4  0E00               	movlw	0
  1175  0021B6  6E02               	movwf	(eepromRead@address+1)^0,c
  1176  0021B8  0E02               	movlw	2
  1177  0021BA  6E01               	movwf	eepromRead@address^0,c
  1178  0021BC  EC57  F014         	call	_eepromRead	;wreg free
  1179  0021C0  6E5C               	movwf	(_menu_value+2)^0,c
  1180  0021C2                     
  1181                           ;fs_mcu.c: 108:     _delay((unsigned long)((100)*(64000000UL/4000.0)));
  1182  0021C2  0E09               	movlw	9
  1183  0021C4  6E04               	movwf	(??_system_init+1)^0,c
  1184  0021C6  0E1E               	movlw	30
  1185  0021C8  6E03               	movwf	??_system_init^0,c
  1186  0021CA  0EE4               	movlw	228
  1187  0021CC                     u3927:
  1188  0021CC  2EE8               	decfsz	wreg,f,c
  1189  0021CE  D7FE               	bra	u3927
  1190  0021D0  2E03               	decfsz	??_system_init^0,f,c
  1191  0021D2  D7FC               	bra	u3927
  1192  0021D4  2E04               	decfsz	(??_system_init+1)^0,f,c
  1193  0021D6  D7FA               	bra	u3927
  1194  0021D8  D000               	nop2	
  1195  0021DA                     
  1196                           ;fs_mcu.c: 109:     timer_value.remainingMinute = menu_value.driver_time;
  1197  0021DA  C05A  F0B2         	movff	_menu_value,_timer_value+6
  1198  0021DE  0100               	movlb	0	; () banked
  1199  0021E0  6BB3               	clrf	(_timer_value+7)& (0+255),b
  1200  0021E2                     
  1201                           ; BSR set to: 0
  1202                           ;fs_mcu.c: 110:     timer_value.remainingSecond = 0;
  1203  0021E2  0E00               	movlw	0
  1204  0021E4  6FB1               	movwf	(_timer_value+5)& (0+255),b
  1205  0021E6  0E00               	movlw	0
  1206  0021E8  6FB0               	movwf	(_timer_value+4)& (0+255),b
  1207  0021EA                     
  1208                           ; BSR set to: 0
  1209  0021EA  0012               	return		;funcret
  1210  0021EC                     __end_of_system_init:
  1211                           	callstack 0
  1212                           
  1213 ;; *************** function _eepromRead *****************
  1214 ;; Defined at:
  1215 ;;		line 33 in file "fs_eeprom.c"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;  address         2    0[COMRAM] unsigned short 
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;		None
  1220 ;; Return value:  Size  Location     Type
  1221 ;;                  1    wreg      unsigned char 
  1222 ;; Registers used:
  1223 ;;		wreg, status,2
  1224 ;; Tracked objects:
  1225 ;;		On entry : 0/0
  1226 ;;		On exit  : 0/0
  1227 ;;		Unchanged: 0/0
  1228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1229 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1232 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1233 ;;Total ram usage:        2 bytes
  1234 ;; Hardware stack levels used:    1
  1235 ;; Hardware stack levels required when called:    1
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_system_init
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243                           	psect	text3
  1244  0028AE                     __ptext3:
  1245                           	callstack 0
  1246  0028AE                     _eepromRead:
  1247                           	callstack 28
  1248  0028AE                     
  1249                           ;fs_eeprom.c: 33: uint8_t eepromRead(uint16_t address);fs_eeprom.c: 34: {;fs_eeprom.c: 3
      +                          7:     EEADRH = (uint8_t)(address >> 8);
  1250  0028AE  5002               	movf	(eepromRead@address+1)^0,w,c
  1251  0028B0  6EAA               	movwf	170,c	;volatile
  1252  0028B2                     
  1253                           ;fs_eeprom.c: 38:     EEADR = (uint8_t)address;
  1254  0028B2  C001  FFA9         	movff	eepromRead@address,4009	;volatile
  1255  0028B6                     
  1256                           ;fs_eeprom.c: 40:     EECON1bits.EEPGD = 0;
  1257  0028B6  9EA6               	bcf	166,7,c	;volsfr
  1258  0028B8                     
  1259                           ;fs_eeprom.c: 41:     EECON1bits.CFGS = 0;
  1260  0028B8  9CA6               	bcf	166,6,c	;volsfr
  1261  0028BA                     
  1262                           ;fs_eeprom.c: 42:     EECON1bits.RD = 1;
  1263  0028BA  80A6               	bsf	166,0,c	;volsfr
  1264  0028BC                     l455:
  1265  0028BC  B0A6               	btfsc	166,0,c	;volsfr
  1266  0028BE  EF63  F014         	goto	u1991
  1267  0028C2  EF65  F014         	goto	u1990
  1268  0028C6                     u1991:
  1269  0028C6  EF5E  F014         	goto	l455
  1270  0028CA                     u1990:
  1271  0028CA                     
  1272                           ;fs_eeprom.c: 48:     return EEDATA;
  1273  0028CA  50A8               	movf	168,w,c	;volatile
  1274  0028CC  0012               	return		;funcret
  1275  0028CE                     __end_of_eepromRead:
  1276                           	callstack 0
  1277                           
  1278 ;; *************** function _menuInitialize *****************
  1279 ;; Defined at:
  1280 ;;		line 38 in file "fs_menu_controller.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;		None
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;		None
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  1    wreg      void 
  1287 ;; Registers used:
  1288 ;;		None
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1298 ;;Total ram usage:        0 bytes
  1299 ;; Hardware stack levels used:    1
  1300 ;; Hardware stack levels required when called:    1
  1301 ;; This function calls:
  1302 ;;		Nothing
  1303 ;; This function is called by:
  1304 ;;		_main
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text4
  1309  00288A                     __ptext4:
  1310                           	callstack 0
  1311  00288A                     _menuInitialize:
  1312                           	callstack 29
  1313  00288A                     
  1314                           ;fs_menu_controller.c: 40:     ANSELBbits.ANSB5 = 0;
  1315  00288A  010F               	movlb	15	; () banked
  1316  00288C  9B39               	bcf	57,5,b	;volatile
  1317                           
  1318                           ;fs_menu_controller.c: 41:     TRISBbits.RB5 = 1;
  1319  00288E  8A93               	bsf	147,5,c	;volatile
  1320                           
  1321                           ;fs_menu_controller.c: 43:     ANSELBbits.ANSB4 = 0;
  1322  002890  9939               	bcf	57,4,b	;volatile
  1323                           
  1324                           ;fs_menu_controller.c: 44:     TRISBbits.RB4 = 1;
  1325  002892  8893               	bsf	147,4,c	;volatile
  1326                           
  1327                           ;fs_menu_controller.c: 46:     ANSELBbits.ANSB3 = 0;
  1328  002894  9739               	bcf	57,3,b	;volatile
  1329                           
  1330                           ;fs_menu_controller.c: 47:     TRISBbits.RB3 = 1;
  1331  002896  8693               	bsf	147,3,c	;volatile
  1332                           
  1333                           ;fs_menu_controller.c: 49:     ANSELAbits.ANSA0 = 0;
  1334  002898  9138               	bcf	56,0,b	;volatile
  1335                           
  1336                           ;fs_menu_controller.c: 50:     TRISAbits.RA0 = 1;
  1337  00289A  8092               	bsf	146,0,c	;volatile
  1338                           
  1339                           ;fs_menu_controller.c: 52:     ANSELAbits.ANSA5 = 0;
  1340  00289C  9B38               	bcf	56,5,b	;volatile
  1341                           
  1342                           ;fs_menu_controller.c: 53:     TRISAbits.RA5 = 1;
  1343  00289E  8A92               	bsf	146,5,c	;volatile
  1344                           
  1345                           ;fs_menu_controller.c: 55:     ANSELBbits.ANSB2 = 0;
  1346  0028A0  9539               	bcf	57,2,b	;volatile
  1347                           
  1348                           ;fs_menu_controller.c: 56:     TRISBbits.RB2 = 1;
  1349  0028A2  8493               	bsf	147,2,c	;volatile
  1350                           
  1351                           ;fs_menu_controller.c: 58:     ANSELEbits.ANSE2 = 0;
  1352  0028A4  953C               	bcf	60,2,b	;volatile
  1353                           
  1354                           ;fs_menu_controller.c: 59:     TRISEbits.RE2 = 0;
  1355  0028A6  9496               	bcf	150,2,c	;volatile
  1356                           
  1357                           ;fs_menu_controller.c: 61:     TRISAbits.RA4 = 0;
  1358  0028A8  9892               	bcf	146,4,c	;volatile
  1359                           
  1360                           ;fs_menu_controller.c: 62:     TRISBbits.RB6 = 0;
  1361  0028AA  9C93               	bcf	147,6,c	;volatile
  1362  0028AC                     
  1363                           ; BSR set to: 15
  1364  0028AC  0012               	return		;funcret
  1365  0028AE                     __end_of_menuInitialize:
  1366                           	callstack 0
  1367                           
  1368 ;; *************** function _menuControl *****************
  1369 ;; Defined at:
  1370 ;;		line 155 in file "fs_menu_controller.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;		None
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;		None
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  1    wreg      void 
  1377 ;; Registers used:
  1378 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;Total ram usage:        0 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:   10
  1391 ;; This function calls:
  1392 ;;		_buttonControlFlags
  1393 ;;		_stateMachine
  1394 ;; This function is called by:
  1395 ;;		_main
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           	psect	text5
  1400  00262C                     __ptext5:
  1401                           	callstack 0
  1402  00262C                     _menuControl:
  1403                           	callstack 20
  1404  00262C                     
  1405                           ;fs_menu_controller.c: 157:     buttonControlFlags();
  1406  00262C  EC16  F00E         	call	_buttonControlFlags	;wreg free
  1407  002630                     
  1408                           ;fs_menu_controller.c: 158:     stateMachine();
  1409  002630  EC55  F008         	call	_stateMachine	;wreg free
  1410  002634                     
  1411                           ;fs_menu_controller.c: 160:     if (menu_flags.menu_start_flag == 1)
  1412  002634  0100               	movlb	0	; () banked
  1413  002636  A3C6               	btfss	_menu_flags& (0+255),1,b
  1414  002638  EF20  F013         	goto	u2661
  1415  00263C  EF22  F013         	goto	u2660
  1416  002640                     u2661:
  1417  002640  EF29  F013         	goto	l3022
  1418  002644                     u2660:
  1419  002644                     
  1420                           ; BSR set to: 0
  1421                           ;fs_menu_controller.c: 161:     {;fs_menu_controller.c: 162:         menu_flags.menu_sta
      +                          rt_flag = 0;
  1422  002644  93C6               	bcf	_menu_flags& (0+255),1,b
  1423  002646                     
  1424                           ; BSR set to: 0
  1425                           ;fs_menu_controller.c: 163:         startIsClick = 1;
  1426  002646  0E01               	movlw	1
  1427  002648  6FC8               	movwf	_startIsClick& (0+255),b
  1428                           
  1429                           ;fs_menu_controller.c: 164:         pauseIsClick = 0;
  1430  00264A  0E00               	movlw	0
  1431  00264C  6FC9               	movwf	_pauseIsClick& (0+255),b
  1432                           
  1433                           ;fs_menu_controller.c: 165:         stopIsClick = 0;
  1434  00264E  0E00               	movlw	0
  1435  002650  6FC7               	movwf	_stopIsClick& (0+255),b
  1436  002652                     l3022:
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;fs_menu_controller.c: 169:     if (menu_flags.menu_pause_flag == 1)
  1440  002652  A7C6               	btfss	_menu_flags& (0+255),3,b
  1441  002654  EF2E  F013         	goto	u2671
  1442  002658  EF30  F013         	goto	u2670
  1443  00265C                     u2671:
  1444  00265C  EF37  F013         	goto	l3028
  1445  002660                     u2670:
  1446  002660                     
  1447                           ; BSR set to: 0
  1448                           ;fs_menu_controller.c: 170:     {;fs_menu_controller.c: 171:         menu_flags.menu_pau
      +                          se_flag = 0;
  1449  002660  97C6               	bcf	_menu_flags& (0+255),3,b
  1450  002662                     
  1451                           ; BSR set to: 0
  1452                           ;fs_menu_controller.c: 172:         pauseIsClick = 1;
  1453  002662  0E01               	movlw	1
  1454  002664  6FC9               	movwf	_pauseIsClick& (0+255),b
  1455                           
  1456                           ;fs_menu_controller.c: 173:         startIsClick = 0;
  1457  002666  0E00               	movlw	0
  1458  002668  6FC8               	movwf	_startIsClick& (0+255),b
  1459                           
  1460                           ;fs_menu_controller.c: 174:         stopIsClick = 0;
  1461  00266A  0E00               	movlw	0
  1462  00266C  6FC7               	movwf	_stopIsClick& (0+255),b
  1463  00266E                     l3028:
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;fs_menu_controller.c: 177:     if (menu_flags.menu_stop_flag == 1)
  1467  00266E  A5C6               	btfss	_menu_flags& (0+255),2,b
  1468  002670  EF3C  F013         	goto	u2681
  1469  002674  EF3E  F013         	goto	u2680
  1470  002678                     u2681:
  1471  002678  EF45  F013         	goto	l403
  1472  00267C                     u2680:
  1473  00267C                     
  1474                           ; BSR set to: 0
  1475                           ;fs_menu_controller.c: 178:     {;fs_menu_controller.c: 179:         menu_flags.menu_sto
      +                          p_flag = 0;
  1476  00267C  95C6               	bcf	_menu_flags& (0+255),2,b
  1477  00267E                     
  1478                           ; BSR set to: 0
  1479                           ;fs_menu_controller.c: 180:         pauseIsClick = 0;
  1480  00267E  0E00               	movlw	0
  1481  002680  6FC9               	movwf	_pauseIsClick& (0+255),b
  1482                           
  1483                           ;fs_menu_controller.c: 181:         startIsClick = 0;
  1484  002682  0E00               	movlw	0
  1485  002684  6FC8               	movwf	_startIsClick& (0+255),b
  1486                           
  1487                           ;fs_menu_controller.c: 182:         stopIsClick = 1;
  1488  002686  0E01               	movlw	1
  1489  002688  6FC7               	movwf	_stopIsClick& (0+255),b
  1490  00268A                     l403:
  1491                           
  1492                           ; BSR set to: 0
  1493  00268A  0012               	return		;funcret
  1494  00268C                     __end_of_menuControl:
  1495                           	callstack 0
  1496                           
  1497 ;; *************** function _stateMachine *****************
  1498 ;; Defined at:
  1499 ;;		line 193 in file "fs_menu_controller.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;		None
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;  textCursor2    16   18[BANK0 ] unsigned char [16]
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1514 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1515 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1516 ;;      Totals:         2      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1517 ;;Total ram usage:       18 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:    9
  1520 ;; This function calls:
  1521 ;;		_Lcd_Set_Cursor
  1522 ;;		_Lcd_Write_String
  1523 ;;		_eepromWrite
  1524 ;;		_sprintf
  1525 ;; This function is called by:
  1526 ;;		_menuControl
  1527 ;; This function uses a non-reentrant model
  1528 ;;
  1529                           
  1530                           	psect	text6
  1531  0010AA                     __ptext6:
  1532                           	callstack 0
  1533  0010AA                     _stateMachine:
  1534                           	callstack 20
  1535  0010AA                     
  1536                           ;fs_menu_controller.c: 195:     char textCursor2[16] = {0};
  1537  0010AA  EE20  F0F0         	lfsr	2,stateMachine@textCursor2
  1538  0010AE  0E0F               	movlw	15
  1539  0010B0                     u2251:
  1540  0010B0  6ADE               	clrf	postinc2,c
  1541  0010B2  06E8               	decf	wreg,f,c
  1542  0010B4  E2FD               	bc	u2251
  1543                           
  1544                           ;fs_menu_controller.c: 197:     switch (menu_selected)
  1545  0010B6  EF9C  F00B         	goto	l2940
  1546  0010BA                     l409:
  1547                           
  1548                           ;fs_menu_controller.c: 201:             LATBbits.LATB6 = 0;
  1549  0010BA  9C8A               	bcf	138,6,c	;volatile
  1550                           
  1551                           ;fs_menu_controller.c: 202:             LATAbits.LATA4 = 1;
  1552  0010BC  8889               	bsf	137,4,c	;volatile
  1553                           
  1554                           ;fs_menu_controller.c: 203:             LATEbits.LATE2 = 0;
  1555  0010BE  948D               	bcf	141,2,c	;volatile
  1556  0010C0                     
  1557                           ;fs_menu_controller.c: 204:             Lcd_Set_Cursor(1,1);
  1558  0010C0  0E01               	movlw	1
  1559  0010C2  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1560  0010C4  0E01               	movlw	1
  1561  0010C6  ECB2  F012         	call	_Lcd_Set_Cursor
  1562  0010CA                     
  1563                           ;fs_menu_controller.c: 205:             Lcd_Write_String("KALAN ZAMAN     ");
  1564  0010CA  0E24               	movlw	low STR_1
  1565  0010CC  6E05               	movwf	Lcd_Write_String@a^0,c
  1566  0010CE  0E10               	movlw	high STR_1
  1567  0010D0  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1568  0010D2  EC71  F012         	call	_Lcd_Write_String	;wreg free
  1569  0010D6                     
  1570                           ;fs_menu_controller.c: 206:             Lcd_Set_Cursor(2,1);
  1571  0010D6  0E01               	movlw	1
  1572  0010D8  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1573  0010DA  0E02               	movlw	2
  1574  0010DC  ECB2  F012         	call	_Lcd_Set_Cursor
  1575  0010E0                     
  1576                           ;fs_menu_controller.c: 207:             sprintf(textCursor2,"      %d:%d   ",timer_value
      +                          .remainingMinute,timer_value.remainingSecond);
  1577  0010E0  0EF0               	movlw	low stateMachine@textCursor2
  1578  0010E2  0100               	movlb	0	; () banked
  1579  0010E4  6FDE               	movwf	sprintf@s& (0+255),b
  1580  0010E6  0E00               	movlw	high stateMachine@textCursor2
  1581  0010E8  6FDF               	movwf	(sprintf@s+1)& (0+255),b
  1582  0010EA  0E99               	movlw	low STR_2
  1583  0010EC  6FE0               	movwf	sprintf@fmt& (0+255),b
  1584  0010EE  0E10               	movlw	high STR_2
  1585  0010F0  6FE1               	movwf	(sprintf@fmt+1)& (0+255),b
  1586  0010F2  C0B2  F0E2         	movff	_timer_value+6,?_sprintf+4
  1587  0010F6  C0B3  F0E3         	movff	_timer_value+7,?_sprintf+5
  1588  0010FA  C0B0  F0E4         	movff	_timer_value+4,?_sprintf+6
  1589  0010FE  C0B1  F0E5         	movff	_timer_value+5,?_sprintf+7
  1590  001102  EC74  F013         	call	_sprintf	;wreg free
  1591  001106                     
  1592                           ;fs_menu_controller.c: 208:             Lcd_Write_String(textCursor2);
  1593  001106  0EF0               	movlw	low stateMachine@textCursor2
  1594  001108  6E05               	movwf	Lcd_Write_String@a^0,c
  1595  00110A  0E00               	movlw	high stateMachine@textCursor2
  1596  00110C  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1597  00110E  EC71  F012         	call	_Lcd_Write_String	;wreg free
  1598  001112                     
  1599                           ;fs_menu_controller.c: 210:             if ( timer_value.menu_login_delay == 100)
  1600  001112  0E64               	movlw	100
  1601  001114  0100               	movlb	0	; () banked
  1602  001116  19B4               	xorwf	(_timer_value+8)& (0+255),w,b
  1603  001118  A4D8               	btfss	status,2,c
  1604  00111A  EF91  F008         	goto	u2261
  1605  00111E  EF93  F008         	goto	u2260
  1606  001122                     u2261:
  1607  001122  EF97  F008         	goto	l2708
  1608  001126                     u2260:
  1609  001126                     
  1610                           ; BSR set to: 0
  1611                           ;fs_menu_controller.c: 211:             {;fs_menu_controller.c: 212:                 tim
      +                          er_value.menu_login_delay = 0;
  1612  001126  0E00               	movlw	0
  1613  001128  6FB4               	movwf	(_timer_value+8)& (0+255),b
  1614                           
  1615                           ;fs_menu_controller.c: 213:                 menu_selected = DRIVER_TIME_SETTING;
  1616  00112A  0E01               	movlw	1
  1617  00112C  6E5D               	movwf	_menu_selected^0,c
  1618  00112E                     l2708:
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;fs_menu_controller.c: 216:             if ((timer_value.remainingMinute <= 0) && (timer
      +                          _value.remainingSecond == 0) )
  1622  00112E  BFB3               	btfsc	(_timer_value+7)& (0+255),7,b
  1623  001130  EFA4  F008         	goto	u2270
  1624  001134  51B3               	movf	(_timer_value+7)& (0+255),w,b
  1625  001136  E106               	bnz	u2271
  1626  001138  05B2               	decf	(_timer_value+6)& (0+255),w,b
  1627  00113A  B0D8               	btfsc	status,0,c
  1628  00113C  EFA2  F008         	goto	u2271
  1629  001140  EFA4  F008         	goto	u2270
  1630  001144                     u2271:
  1631  001144  EFB3  F008         	goto	l411
  1632  001148                     u2270:
  1633  001148                     
  1634                           ; BSR set to: 0
  1635  001148  51B0               	movf	(_timer_value+4)& (0+255),w,b
  1636  00114A  11B1               	iorwf	(_timer_value+5)& (0+255),w,b
  1637  00114C  A4D8               	btfss	status,2,c
  1638  00114E  EFAB  F008         	goto	u2281
  1639  001152  EFAD  F008         	goto	u2280
  1640  001156                     u2281:
  1641  001156  EFB3  F008         	goto	l411
  1642  00115A                     u2280:
  1643  00115A                     
  1644                           ; BSR set to: 0
  1645                           ;fs_menu_controller.c: 217:             {;fs_menu_controller.c: 218:                    
      +                           menu_selected = STOP_MENU;
  1646  00115A  0E04               	movlw	4
  1647  00115C  6E5D               	movwf	_menu_selected^0,c
  1648                           
  1649                           ;fs_menu_controller.c: 219:                     timer_value.minute = 0;
  1650  00115E  0E00               	movlw	0
  1651  001160  6FAF               	movwf	(_timer_value+3)& (0+255),b
  1652  001162  0E00               	movlw	0
  1653  001164  6FAE               	movwf	(_timer_value+2)& (0+255),b
  1654  001166                     l411:
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;fs_menu_controller.c: 222:             if ( (startIsClick == 0) && (pauseIsClick == 1) 
      +                          && (stopIsClick == 0) && (menu_selected == MAIN_MENU))
  1658  001166  51C8               	movf	_startIsClick& (0+255),w,b
  1659  001168  A4D8               	btfss	status,2,c
  1660  00116A  EFB9  F008         	goto	u2291
  1661  00116E  EFBB  F008         	goto	u2290
  1662  001172                     u2291:
  1663  001172  EFD5  F008         	goto	l412
  1664  001176                     u2290:
  1665  001176                     
  1666                           ; BSR set to: 0
  1667  001176  05C9               	decf	_pauseIsClick& (0+255),w,b
  1668  001178  A4D8               	btfss	status,2,c
  1669  00117A  EFC1  F008         	goto	u2301
  1670  00117E  EFC3  F008         	goto	u2300
  1671  001182                     u2301:
  1672  001182  EFD5  F008         	goto	l412
  1673  001186                     u2300:
  1674  001186                     
  1675                           ; BSR set to: 0
  1676  001186  51C7               	movf	_stopIsClick& (0+255),w,b
  1677  001188  A4D8               	btfss	status,2,c
  1678  00118A  EFC9  F008         	goto	u2311
  1679  00118E  EFCB  F008         	goto	u2310
  1680  001192                     u2311:
  1681  001192  EFD5  F008         	goto	l412
  1682  001196                     u2310:
  1683  001196                     
  1684                           ; BSR set to: 0
  1685  001196  505D               	movf	_menu_selected^0,w,c
  1686  001198  A4D8               	btfss	status,2,c
  1687  00119A  EFD1  F008         	goto	u2321
  1688  00119E  EFD3  F008         	goto	u2320
  1689  0011A2                     u2321:
  1690  0011A2  EFD5  F008         	goto	l412
  1691  0011A6                     u2320:
  1692  0011A6                     
  1693                           ; BSR set to: 0
  1694                           ;fs_menu_controller.c: 223:             {;fs_menu_controller.c: 224:                 men
      +                          u_selected = PAUSE_MENU;
  1695  0011A6  0E06               	movlw	6
  1696  0011A8  6E5D               	movwf	_menu_selected^0,c
  1697  0011AA                     l412:
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;fs_menu_controller.c: 227:             if ( (startIsClick == 0) && (pauseIsClick == 0) 
      +                          && (stopIsClick == 1) && (menu_selected == MAIN_MENU) )
  1701  0011AA  51C8               	movf	_startIsClick& (0+255),w,b
  1702  0011AC  A4D8               	btfss	status,2,c
  1703  0011AE  EFDB  F008         	goto	u2331
  1704  0011B2  EFDD  F008         	goto	u2330
  1705  0011B6                     u2331:
  1706  0011B6  EF04  F009         	goto	l2732
  1707  0011BA                     u2330:
  1708  0011BA                     
  1709                           ; BSR set to: 0
  1710  0011BA  51C9               	movf	_pauseIsClick& (0+255),w,b
  1711  0011BC  A4D8               	btfss	status,2,c
  1712  0011BE  EFE3  F008         	goto	u2341
  1713  0011C2  EFE5  F008         	goto	u2340
  1714  0011C6                     u2341:
  1715  0011C6  EF04  F009         	goto	l2732
  1716  0011CA                     u2340:
  1717  0011CA                     
  1718                           ; BSR set to: 0
  1719  0011CA  05C7               	decf	_stopIsClick& (0+255),w,b
  1720  0011CC  A4D8               	btfss	status,2,c
  1721  0011CE  EFEB  F008         	goto	u2351
  1722  0011D2  EFED  F008         	goto	u2350
  1723  0011D6                     u2351:
  1724  0011D6  EF04  F009         	goto	l2732
  1725  0011DA                     u2350:
  1726  0011DA                     
  1727                           ; BSR set to: 0
  1728  0011DA  505D               	movf	_menu_selected^0,w,c
  1729  0011DC  A4D8               	btfss	status,2,c
  1730  0011DE  EFF3  F008         	goto	u2361
  1731  0011E2  EFF5  F008         	goto	u2360
  1732  0011E6                     u2361:
  1733  0011E6  EF04  F009         	goto	l2732
  1734  0011EA                     u2360:
  1735  0011EA                     
  1736                           ; BSR set to: 0
  1737                           ;fs_menu_controller.c: 228:             {;fs_menu_controller.c: 229:                  ti
      +                          mer_value.remainingMinute = menu_value.driver_time;
  1738  0011EA  C05A  F0B2         	movff	_menu_value,_timer_value+6
  1739  0011EE  6BB3               	clrf	(_timer_value+7)& (0+255),b
  1740  0011F0                     
  1741                           ; BSR set to: 0
  1742                           ;fs_menu_controller.c: 230:                  timer_value.remainingSecond = 0;
  1743  0011F0  0E00               	movlw	0
  1744  0011F2  6FB1               	movwf	(_timer_value+5)& (0+255),b
  1745  0011F4  0E00               	movlw	0
  1746  0011F6  6FB0               	movwf	(_timer_value+4)& (0+255),b
  1747                           
  1748                           ;fs_menu_controller.c: 231:                  timer_value.second = 0;
  1749  0011F8  0E00               	movlw	0
  1750  0011FA  6FAD               	movwf	(_timer_value+1)& (0+255),b
  1751  0011FC  0E00               	movlw	0
  1752  0011FE  6FAC               	movwf	_timer_value& (0+255),b
  1753                           
  1754                           ;fs_menu_controller.c: 232:                  timer_value.minute = 0;
  1755  001200  0E00               	movlw	0
  1756  001202  6FAF               	movwf	(_timer_value+3)& (0+255),b
  1757  001204  0E00               	movlw	0
  1758  001206  6FAE               	movwf	(_timer_value+2)& (0+255),b
  1759  001208                     l2732:
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;fs_menu_controller.c: 235:             if ((menu_flags.menu_decrease_flag == 1) && (men
      +                          u_flags.menu_increase_flag==1))
  1763  001208  ABC6               	btfss	_menu_flags& (0+255),5,b
  1764  00120A  EF09  F009         	goto	u2371
  1765  00120E  EF0B  F009         	goto	u2370
  1766  001212                     u2371:
  1767  001212  EFC9  F00B         	goto	l440
  1768  001216                     u2370:
  1769  001216                     
  1770                           ; BSR set to: 0
  1771  001216  A9C6               	btfss	_menu_flags& (0+255),4,b
  1772  001218  EF10  F009         	goto	u2381
  1773  00121C  EF12  F009         	goto	u2380
  1774  001220                     u2381:
  1775  001220  EFC9  F00B         	goto	l440
  1776  001224                     u2380:
  1777  001224                     
  1778                           ; BSR set to: 0
  1779                           ;fs_menu_controller.c: 236:             {;fs_menu_controller.c: 237:                 Lcd
      +                          _Set_Cursor(1,1);
  1780  001224  0E01               	movlw	1
  1781  001226  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1782  001228  0E01               	movlw	1
  1783  00122A  ECB2  F012         	call	_Lcd_Set_Cursor
  1784  00122E                     
  1785                           ;fs_menu_controller.c: 238:                 Lcd_Write_String("GiZLi MENU     ");
  1786  00122E  0E79               	movlw	low STR_3
  1787  001230  6E05               	movwf	Lcd_Write_String@a^0,c
  1788  001232  0E10               	movlw	high STR_3
  1789  001234  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1790  001236  EC71  F012         	call	_Lcd_Write_String	;wreg free
  1791  00123A                     
  1792                           ;fs_menu_controller.c: 239:                 Lcd_Set_Cursor(2,1);
  1793  00123A  0E01               	movlw	1
  1794  00123C  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1795  00123E  0E02               	movlw	2
  1796  001240  ECB2  F012         	call	_Lcd_Set_Cursor
  1797  001244                     
  1798                           ;fs_menu_controller.c: 240:                 sprintf(textCursor2,"      %d:%d   ",timer_v
      +                          alue.remainingMinute,timer_value.remainingSecond);
  1799  001244  0EF0               	movlw	low stateMachine@textCursor2
  1800  001246  0100               	movlb	0	; () banked
  1801  001248  6FDE               	movwf	sprintf@s& (0+255),b
  1802  00124A  0E00               	movlw	high stateMachine@textCursor2
  1803  00124C  6FDF               	movwf	(sprintf@s+1)& (0+255),b
  1804  00124E  0E99               	movlw	low STR_2
  1805  001250  6FE0               	movwf	sprintf@fmt& (0+255),b
  1806  001252  0E10               	movlw	high STR_2
  1807  001254  6FE1               	movwf	(sprintf@fmt+1)& (0+255),b
  1808  001256  C0B2  F0E2         	movff	_timer_value+6,?_sprintf+4
  1809  00125A  C0B3  F0E3         	movff	_timer_value+7,?_sprintf+5
  1810  00125E  C0B0  F0E4         	movff	_timer_value+4,?_sprintf+6
  1811  001262  C0B1  F0E5         	movff	_timer_value+5,?_sprintf+7
  1812  001266  EC74  F013         	call	_sprintf	;wreg free
  1813  00126A                     
  1814                           ;fs_menu_controller.c: 241:                 Lcd_Write_String(textCursor2);
  1815  00126A  0EF0               	movlw	low stateMachine@textCursor2
  1816  00126C  6E05               	movwf	Lcd_Write_String@a^0,c
  1817  00126E  0E00               	movlw	high stateMachine@textCursor2
  1818  001270  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1819  001272  EC71  F012         	call	_Lcd_Write_String	;wreg free
  1820  001276  EFC9  F00B         	goto	l440
  1821  00127A                     l416:
  1822                           
  1823                           ;fs_menu_controller.c: 249:             LATBbits.LATB6 = 0;
  1824  00127A  9C8A               	bcf	138,6,c	;volatile
  1825                           
  1826                           ;fs_menu_controller.c: 250:             LATAbits.LATA4 = 0;
  1827  00127C  9889               	bcf	137,4,c	;volatile
  1828                           
  1829                           ;fs_menu_controller.c: 251:             LATEbits.LATE2 = 1;
  1830  00127E  848D               	bsf	141,2,c	;volatile
  1831                           
  1832                           ;fs_menu_controller.c: 253:             if (menu_flags.menu_input_flag == 1)
  1833  001280  0100               	movlb	0	; () banked
  1834  001282  A1C6               	btfss	_menu_flags& (0+255),0,b
  1835  001284  EF46  F009         	goto	u2391
  1836  001288  EF48  F009         	goto	u2390
  1837  00128C                     u2391:
  1838  00128C  EF4B  F009         	goto	l2750
  1839  001290                     u2390:
  1840  001290                     
  1841                           ; BSR set to: 0
  1842                           ;fs_menu_controller.c: 254:             {;fs_menu_controller.c: 255:                 men
      +                          u_flags.menu_input_flag = 0;
  1843  001290  91C6               	bcf	_menu_flags& (0+255),0,b
  1844  001292                     
  1845                           ; BSR set to: 0
  1846                           ;fs_menu_controller.c: 256:                 menu_selected = STOP_TIME_SETTING;
  1847  001292  0E02               	movlw	2
  1848  001294  6E5D               	movwf	_menu_selected^0,c
  1849  001296                     l2750:
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;fs_menu_controller.c: 259:             if ((menu_flags.menu_increase_flag == 1) && (men
      +                          u_value.driver_time < 30))
  1853  001296  A9C6               	btfss	_menu_flags& (0+255),4,b
  1854  001298  EF50  F009         	goto	u2401
  1855  00129C  EF52  F009         	goto	u2400
  1856  0012A0                     u2401:
  1857  0012A0  EF71  F009         	goto	l2766
  1858  0012A4                     u2400:
  1859  0012A4                     
  1860                           ; BSR set to: 0
  1861  0012A4  0E1E               	movlw	30
  1862  0012A6  605A               	cpfslt	_menu_value^0,c
  1863  0012A8  EF58  F009         	goto	u2411
  1864  0012AC  EF5A  F009         	goto	u2410
  1865  0012B0                     u2411:
  1866  0012B0  EF71  F009         	goto	l2766
  1867  0012B4                     u2410:
  1868  0012B4                     
  1869                           ; BSR set to: 0
  1870                           ;fs_menu_controller.c: 260:             {;fs_menu_controller.c: 261:                 men
      +                          u_flags.menu_increase_flag = 0;
  1871  0012B4  99C6               	bcf	_menu_flags& (0+255),4,b
  1872  0012B6                     
  1873                           ; BSR set to: 0
  1874                           ;fs_menu_controller.c: 262:                 menu_value.driver_time++;
  1875  0012B6  2A5A               	incf	_menu_value^0,f,c
  1876  0012B8                     
  1877                           ; BSR set to: 0
  1878                           ;fs_menu_controller.c: 263:                 eepromWrite(0x00,(uint8_t)menu_value.driver_
      +                          time);
  1879  0012B8  0E00               	movlw	0
  1880  0012BA  6E02               	movwf	(eepromWrite@address+1)^0,c
  1881  0012BC  0E00               	movlw	0
  1882  0012BE  6E01               	movwf	eepromWrite@address^0,c
  1883  0012C0  C05A  F003         	movff	_menu_value,eepromWrite@data
  1884  0012C4  EC2D  F014         	call	_eepromWrite	;wreg free
  1885  0012C8                     
  1886                           ;fs_menu_controller.c: 264:                 timer_value.minute =0 ;
  1887  0012C8  0E00               	movlw	0
  1888  0012CA  0100               	movlb	0	; () banked
  1889  0012CC  6FAF               	movwf	(_timer_value+3)& (0+255),b
  1890  0012CE  0E00               	movlw	0
  1891  0012D0  6FAE               	movwf	(_timer_value+2)& (0+255),b
  1892  0012D2                     
  1893                           ; BSR set to: 0
  1894                           ;fs_menu_controller.c: 265:                 timer_value.second = 0;
  1895  0012D2  0E00               	movlw	0
  1896  0012D4  6FAD               	movwf	(_timer_value+1)& (0+255),b
  1897  0012D6  0E00               	movlw	0
  1898  0012D8  6FAC               	movwf	_timer_value& (0+255),b
  1899  0012DA                     
  1900                           ; BSR set to: 0
  1901                           ;fs_menu_controller.c: 266:                 timer_value.remainingSecond = 0;
  1902  0012DA  0E00               	movlw	0
  1903  0012DC  6FB1               	movwf	(_timer_value+5)& (0+255),b
  1904  0012DE  0E00               	movlw	0
  1905  0012E0  6FB0               	movwf	(_timer_value+4)& (0+255),b
  1906  0012E2                     l2766:
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;fs_menu_controller.c: 270:             if ((menu_flags.menu_decrease_flag == 1) && (men
      +                          u_value.driver_time > 0))
  1910  0012E2  ABC6               	btfss	_menu_flags& (0+255),5,b
  1911  0012E4  EF76  F009         	goto	u2421
  1912  0012E8  EF78  F009         	goto	u2420
  1913  0012EC                     u2421:
  1914  0012EC  EF97  F009         	goto	l2782
  1915  0012F0                     u2420:
  1916  0012F0                     
  1917                           ; BSR set to: 0
  1918  0012F0  505A               	movf	_menu_value^0,w,c
  1919  0012F2  B4D8               	btfsc	status,2,c
  1920  0012F4  EF7E  F009         	goto	u2431
  1921  0012F8  EF80  F009         	goto	u2430
  1922  0012FC                     u2431:
  1923  0012FC  EF97  F009         	goto	l2782
  1924  001300                     u2430:
  1925  001300                     
  1926                           ; BSR set to: 0
  1927                           ;fs_menu_controller.c: 271:             {;fs_menu_controller.c: 272:                  me
      +                          nu_flags.menu_decrease_flag = 0;
  1928  001300  9BC6               	bcf	_menu_flags& (0+255),5,b
  1929  001302                     
  1930                           ; BSR set to: 0
  1931                           ;fs_menu_controller.c: 273:                  menu_value.driver_time--;
  1932  001302  065A               	decf	_menu_value^0,f,c
  1933  001304                     
  1934                           ; BSR set to: 0
  1935                           ;fs_menu_controller.c: 274:                  eepromWrite(0x00,(uint8_t)menu_value.driver
      +                          _time);
  1936  001304  0E00               	movlw	0
  1937  001306  6E02               	movwf	(eepromWrite@address+1)^0,c
  1938  001308  0E00               	movlw	0
  1939  00130A  6E01               	movwf	eepromWrite@address^0,c
  1940  00130C  C05A  F003         	movff	_menu_value,eepromWrite@data
  1941  001310  EC2D  F014         	call	_eepromWrite	;wreg free
  1942  001314                     
  1943                           ;fs_menu_controller.c: 275:                  timer_value.minute =0 ;
  1944  001314  0E00               	movlw	0
  1945  001316  0100               	movlb	0	; () banked
  1946  001318  6FAF               	movwf	(_timer_value+3)& (0+255),b
  1947  00131A  0E00               	movlw	0
  1948  00131C  6FAE               	movwf	(_timer_value+2)& (0+255),b
  1949  00131E                     
  1950                           ; BSR set to: 0
  1951                           ;fs_menu_controller.c: 276:                  timer_value.second = 0;
  1952  00131E  0E00               	movlw	0
  1953  001320  6FAD               	movwf	(_timer_value+1)& (0+255),b
  1954  001322  0E00               	movlw	0
  1955  001324  6FAC               	movwf	_timer_value& (0+255),b
  1956  001326                     
  1957                           ; BSR set to: 0
  1958                           ;fs_menu_controller.c: 277:                  timer_value.remainingSecond = 0;
  1959  001326  0E00               	movlw	0
  1960  001328  6FB1               	movwf	(_timer_value+5)& (0+255),b
  1961  00132A  0E00               	movlw	0
  1962  00132C  6FB0               	movwf	(_timer_value+4)& (0+255),b
  1963  00132E                     l2782:
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;fs_menu_controller.c: 279:             timer_value.remainingMinute = menu_value.driver_
      +                          time;
  1967  00132E  C05A  F0B2         	movff	_menu_value,_timer_value+6
  1968  001332  6BB3               	clrf	(_timer_value+7)& (0+255),b
  1969  001334                     
  1970                           ; BSR set to: 0
  1971                           ;fs_menu_controller.c: 281:             Lcd_Set_Cursor(1,1);
  1972  001334  0E01               	movlw	1
  1973  001336  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1974  001338  0E01               	movlw	1
  1975  00133A  ECB2  F012         	call	_Lcd_Set_Cursor
  1976  00133E                     
  1977                           ;fs_menu_controller.c: 282:             Lcd_Write_String("HAREKT ZAMANI dk");
  1978  00133E  0E57               	movlw	low STR_5
  1979  001340  6E05               	movwf	Lcd_Write_String@a^0,c
  1980  001342  0E10               	movlw	high STR_5
  1981  001344  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1982  001346  EC71  F012         	call	_Lcd_Write_String	;wreg free
  1983  00134A                     
  1984                           ;fs_menu_controller.c: 283:             Lcd_Set_Cursor(2,1);
  1985  00134A  0E01               	movlw	1
  1986  00134C  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1987  00134E  0E02               	movlw	2
  1988  001350  ECB2  F012         	call	_Lcd_Set_Cursor
  1989  001354                     
  1990                           ;fs_menu_controller.c: 284:             sprintf(textCursor2,"%d               ",menu_val
      +                          ue.driver_time);
  1991  001354  0EF0               	movlw	low stateMachine@textCursor2
  1992  001356  0100               	movlb	0	; () banked
  1993  001358  6FDE               	movwf	sprintf@s& (0+255),b
  1994  00135A  0E00               	movlw	high stateMachine@textCursor2
  1995  00135C  6FDF               	movwf	(sprintf@s+1)& (0+255),b
  1996  00135E  0E01               	movlw	low STR_6
  1997  001360  6FE0               	movwf	sprintf@fmt& (0+255),b
  1998  001362  0E10               	movlw	high STR_6
  1999  001364  6FE1               	movwf	(sprintf@fmt+1)& (0+255),b
  2000  001366  C05A  F0E2         	movff	_menu_value,?_sprintf+4
  2001  00136A  6BE3               	clrf	(?_sprintf+5)& (0+255),b
  2002  00136C  EC74  F013         	call	_sprintf	;wreg free
  2003  001370                     
  2004                           ;fs_menu_controller.c: 285:             Lcd_Write_String(textCursor2);
  2005  001370  0EF0               	movlw	low stateMachine@textCursor2
  2006  001372  6E05               	movwf	Lcd_Write_String@a^0,c
  2007  001374  0E00               	movlw	high stateMachine@textCursor2
  2008  001376  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2009  001378  EC71  F012         	call	_Lcd_Write_String	;wreg free
  2010  00137C                     
  2011                           ;fs_menu_controller.c: 287:             if(timer_value.menu_login_delay == 100)
  2012  00137C  0E64               	movlw	100
  2013  00137E  0100               	movlb	0	; () banked
  2014  001380  19B4               	xorwf	(_timer_value+8)& (0+255),w,b
  2015  001382  A4D8               	btfss	status,2,c
  2016  001384  EFC6  F009         	goto	u2441
  2017  001388  EFC8  F009         	goto	u2440
  2018  00138C                     u2441:
  2019  00138C  EFC9  F00B         	goto	l440
  2020  001390                     u2440:
  2021  001390                     l2796:
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;fs_menu_controller.c: 288:             {;fs_menu_controller.c: 289:                 tim
      +                          er_value.menu_login_delay = 0;
  2025  001390  0E00               	movlw	0
  2026  001392  6FB4               	movwf	(_timer_value+8)& (0+255),b
  2027                           
  2028                           ;fs_menu_controller.c: 290:                 menu_selected = PAUSE_MENU;
  2029  001394  0E06               	movlw	6
  2030  001396  6E5D               	movwf	_menu_selected^0,c
  2031  001398  EFC9  F00B         	goto	l440
  2032  00139C                     l421:
  2033                           
  2034                           ;fs_menu_controller.c: 297:             LATBbits.LATB6 = 0;
  2035  00139C  9C8A               	bcf	138,6,c	;volatile
  2036                           
  2037                           ;fs_menu_controller.c: 298:             LATAbits.LATA4 = 0;
  2038  00139E  9889               	bcf	137,4,c	;volatile
  2039                           
  2040                           ;fs_menu_controller.c: 299:             LATEbits.LATE2 = 1;
  2041  0013A0  848D               	bsf	141,2,c	;volatile
  2042                           
  2043                           ;fs_menu_controller.c: 301:             if (menu_flags.menu_input_flag == 1)
  2044  0013A2  0100               	movlb	0	; () banked
  2045  0013A4  A1C6               	btfss	_menu_flags& (0+255),0,b
  2046  0013A6  EFD7  F009         	goto	u2451
  2047  0013AA  EFD9  F009         	goto	u2450
  2048  0013AE                     u2451:
  2049  0013AE  EFDC  F009         	goto	l2802
  2050  0013B2                     u2450:
  2051  0013B2                     
  2052                           ; BSR set to: 0
  2053                           ;fs_menu_controller.c: 302:             {;fs_menu_controller.c: 303:                 men
      +                          u_flags.menu_input_flag = 0;
  2054  0013B2  91C6               	bcf	_menu_flags& (0+255),0,b
  2055  0013B4                     
  2056                           ; BSR set to: 0
  2057                           ;fs_menu_controller.c: 304:                 menu_selected = SPEED_LIMIT_SETTING;
  2058  0013B4  0E03               	movlw	3
  2059  0013B6  6E5D               	movwf	_menu_selected^0,c
  2060  0013B8                     l2802:
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;fs_menu_controller.c: 307:             if ((menu_flags.menu_increase_flag == 1) && (men
      +                          u_value.stop_time < 100))
  2064  0013B8  A9C6               	btfss	_menu_flags& (0+255),4,b
  2065  0013BA  EFE1  F009         	goto	u2461
  2066  0013BE  EFE3  F009         	goto	u2460
  2067  0013C2                     u2461:
  2068  0013C2  EFF5  F009         	goto	l2812
  2069  0013C6                     u2460:
  2070  0013C6                     
  2071                           ; BSR set to: 0
  2072  0013C6  0E64               	movlw	100
  2073  0013C8  605B               	cpfslt	(_menu_value+1)^0,c
  2074  0013CA  EFE9  F009         	goto	u2471
  2075  0013CE  EFEB  F009         	goto	u2470
  2076  0013D2                     u2471:
  2077  0013D2  EFF5  F009         	goto	l2812
  2078  0013D6                     u2470:
  2079  0013D6                     
  2080                           ; BSR set to: 0
  2081                           ;fs_menu_controller.c: 308:             {;fs_menu_controller.c: 309:                 men
      +                          u_flags.menu_increase_flag = 0;
  2082  0013D6  99C6               	bcf	_menu_flags& (0+255),4,b
  2083  0013D8                     
  2084                           ; BSR set to: 0
  2085                           ;fs_menu_controller.c: 310:                 menu_value.stop_time += 1;
  2086  0013D8  2A5B               	incf	(_menu_value+1)^0,f,c
  2087  0013DA                     
  2088                           ; BSR set to: 0
  2089                           ;fs_menu_controller.c: 311:                 eepromWrite(0x01,(uint8_t)menu_value.stop_ti
      +                          me);
  2090  0013DA  0E00               	movlw	0
  2091  0013DC  6E02               	movwf	(eepromWrite@address+1)^0,c
  2092  0013DE  0E01               	movlw	1
  2093  0013E0  6E01               	movwf	eepromWrite@address^0,c
  2094  0013E2  C05B  F003         	movff	_menu_value+1,eepromWrite@data
  2095  0013E6  EC2D  F014         	call	_eepromWrite	;wreg free
  2096  0013EA                     l2812:
  2097                           
  2098                           ;fs_menu_controller.c: 314:             if ((menu_flags.menu_decrease_flag == 1) && (men
      +                          u_value.stop_time > 0))
  2099  0013EA  0100               	movlb	0	; () banked
  2100  0013EC  ABC6               	btfss	_menu_flags& (0+255),5,b
  2101  0013EE  EFFB  F009         	goto	u2481
  2102  0013F2  EFFD  F009         	goto	u2480
  2103  0013F6                     u2481:
  2104  0013F6  EF0F  F00A         	goto	l2822
  2105  0013FA                     u2480:
  2106  0013FA                     
  2107                           ; BSR set to: 0
  2108  0013FA  505B               	movf	(_menu_value+1)^0,w,c
  2109  0013FC  B4D8               	btfsc	status,2,c
  2110  0013FE  EF03  F00A         	goto	u2491
  2111  001402  EF05  F00A         	goto	u2490
  2112  001406                     u2491:
  2113  001406  EF0F  F00A         	goto	l2822
  2114  00140A                     u2490:
  2115  00140A                     
  2116                           ; BSR set to: 0
  2117                           ;fs_menu_controller.c: 315:             {;fs_menu_controller.c: 316:                  me
      +                          nu_flags.menu_decrease_flag = 0;
  2118  00140A  9BC6               	bcf	_menu_flags& (0+255),5,b
  2119  00140C                     
  2120                           ; BSR set to: 0
  2121                           ;fs_menu_controller.c: 317:                  menu_value.stop_time -= 1;
  2122  00140C  065B               	decf	(_menu_value+1)^0,f,c
  2123  00140E                     
  2124                           ; BSR set to: 0
  2125                           ;fs_menu_controller.c: 318:                  eepromWrite(0x01,(uint8_t)menu_value.stop_t
      +                          ime);
  2126  00140E  0E00               	movlw	0
  2127  001410  6E02               	movwf	(eepromWrite@address+1)^0,c
  2128  001412  0E01               	movlw	1
  2129  001414  6E01               	movwf	eepromWrite@address^0,c
  2130  001416  C05B  F003         	movff	_menu_value+1,eepromWrite@data
  2131  00141A  EC2D  F014         	call	_eepromWrite	;wreg free
  2132  00141E                     l2822:
  2133                           
  2134                           ;fs_menu_controller.c: 320:             Lcd_Set_Cursor(1,1);
  2135  00141E  0E01               	movlw	1
  2136  001420  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2137  001422  0E01               	movlw	1
  2138  001424  ECB2  F012         	call	_Lcd_Set_Cursor
  2139  001428                     
  2140                           ;fs_menu_controller.c: 321:             Lcd_Write_String("DURMA ZAMANI  ms");
  2141  001428  0E68               	movlw	low STR_7
  2142  00142A  6E05               	movwf	Lcd_Write_String@a^0,c
  2143  00142C  0E10               	movlw	high STR_7
  2144  00142E  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2145  001430  EC71  F012         	call	_Lcd_Write_String	;wreg free
  2146  001434                     
  2147                           ;fs_menu_controller.c: 322:             Lcd_Set_Cursor(2,1);
  2148  001434  0E01               	movlw	1
  2149  001436  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2150  001438  0E02               	movlw	2
  2151  00143A  ECB2  F012         	call	_Lcd_Set_Cursor
  2152  00143E                     
  2153                           ;fs_menu_controller.c: 323:             sprintf(textCursor2,"%d               ",menu_val
      +                          ue.stop_time);
  2154  00143E  0EF0               	movlw	low stateMachine@textCursor2
  2155  001440  0100               	movlb	0	; () banked
  2156  001442  6FDE               	movwf	sprintf@s& (0+255),b
  2157  001444  0E00               	movlw	high stateMachine@textCursor2
  2158  001446  6FDF               	movwf	(sprintf@s+1)& (0+255),b
  2159  001448  0E01               	movlw	low STR_6
  2160  00144A  6FE0               	movwf	sprintf@fmt& (0+255),b
  2161  00144C  0E10               	movlw	high STR_6
  2162  00144E  6FE1               	movwf	(sprintf@fmt+1)& (0+255),b
  2163  001450  C05B  F0E2         	movff	_menu_value+1,?_sprintf+4
  2164  001454  6BE3               	clrf	(?_sprintf+5)& (0+255),b
  2165  001456  EC74  F013         	call	_sprintf	;wreg free
  2166  00145A                     
  2167                           ;fs_menu_controller.c: 324:             Lcd_Write_String(textCursor2);
  2168  00145A  0EF0               	movlw	low stateMachine@textCursor2
  2169  00145C  6E05               	movwf	Lcd_Write_String@a^0,c
  2170  00145E  0E00               	movlw	high stateMachine@textCursor2
  2171  001460  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2172  001462  EC71  F012         	call	_Lcd_Write_String	;wreg free
  2173  001466                     
  2174                           ;fs_menu_controller.c: 326:             if(timer_value.menu_login_delay == 100)
  2175  001466  0E64               	movlw	100
  2176  001468  0100               	movlb	0	; () banked
  2177  00146A  19B4               	xorwf	(_timer_value+8)& (0+255),w,b
  2178  00146C  A4D8               	btfss	status,2,c
  2179  00146E  EF3B  F00A         	goto	u2501
  2180  001472  EF3D  F00A         	goto	u2500
  2181  001476                     u2501:
  2182  001476  EFC9  F00B         	goto	l440
  2183  00147A                     u2500:
  2184  00147A  EFC8  F009         	goto	l2796
  2185  00147E                     l426:
  2186                           
  2187                           ;fs_menu_controller.c: 335:             LATBbits.LATB6 = 0;
  2188  00147E  9C8A               	bcf	138,6,c	;volatile
  2189                           
  2190                           ;fs_menu_controller.c: 336:             LATAbits.LATA4 = 0;
  2191  001480  9889               	bcf	137,4,c	;volatile
  2192                           
  2193                           ;fs_menu_controller.c: 337:             LATEbits.LATE2 = 1;
  2194  001482  848D               	bsf	141,2,c	;volatile
  2195                           
  2196                           ;fs_menu_controller.c: 339:             if (menu_flags.menu_input_flag == 1)
  2197  001484  0100               	movlb	0	; () banked
  2198  001486  A1C6               	btfss	_menu_flags& (0+255),0,b
  2199  001488  EF48  F00A         	goto	u2511
  2200  00148C  EF4A  F00A         	goto	u2510
  2201  001490                     u2511:
  2202  001490  EF4D  F00A         	goto	l2840
  2203  001494                     u2510:
  2204  001494                     
  2205                           ; BSR set to: 0
  2206                           ;fs_menu_controller.c: 340:             {;fs_menu_controller.c: 341:                 men
      +                          u_flags.menu_input_flag = 0;
  2207  001494  91C6               	bcf	_menu_flags& (0+255),0,b
  2208  001496                     
  2209                           ; BSR set to: 0
  2210                           ;fs_menu_controller.c: 342:                 menu_selected = DRIVER_TIME_SETTING;
  2211  001496  0E01               	movlw	1
  2212  001498  6E5D               	movwf	_menu_selected^0,c
  2213  00149A                     l2840:
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;fs_menu_controller.c: 345:             if ((menu_flags.menu_increase_flag == 1) && (men
      +                          u_value.speed_limit < 5))
  2217  00149A  A9C6               	btfss	_menu_flags& (0+255),4,b
  2218  00149C  EF52  F00A         	goto	u2521
  2219  0014A0  EF54  F00A         	goto	u2520
  2220  0014A4                     u2521:
  2221  0014A4  EF66  F00A         	goto	l2850
  2222  0014A8                     u2520:
  2223  0014A8                     
  2224                           ; BSR set to: 0
  2225  0014A8  0E05               	movlw	5
  2226  0014AA  605C               	cpfslt	(_menu_value+2)^0,c
  2227  0014AC  EF5A  F00A         	goto	u2531
  2228  0014B0  EF5C  F00A         	goto	u2530
  2229  0014B4                     u2531:
  2230  0014B4  EF66  F00A         	goto	l2850
  2231  0014B8                     u2530:
  2232  0014B8                     
  2233                           ; BSR set to: 0
  2234                           ;fs_menu_controller.c: 346:             {;fs_menu_controller.c: 347:                 men
      +                          u_flags.menu_increase_flag = 0;
  2235  0014B8  99C6               	bcf	_menu_flags& (0+255),4,b
  2236  0014BA                     
  2237                           ; BSR set to: 0
  2238                           ;fs_menu_controller.c: 348:                 menu_value.speed_limit += 1;
  2239  0014BA  2A5C               	incf	(_menu_value+2)^0,f,c
  2240  0014BC                     
  2241                           ; BSR set to: 0
  2242                           ;fs_menu_controller.c: 349:                 eepromWrite(0x02,menu_value.speed_limit);
  2243  0014BC  0E00               	movlw	0
  2244  0014BE  6E02               	movwf	(eepromWrite@address+1)^0,c
  2245  0014C0  0E02               	movlw	2
  2246  0014C2  6E01               	movwf	eepromWrite@address^0,c
  2247  0014C4  C05C  F003         	movff	_menu_value+2,eepromWrite@data
  2248  0014C8  EC2D  F014         	call	_eepromWrite	;wreg free
  2249  0014CC                     l2850:
  2250                           
  2251                           ;fs_menu_controller.c: 352:             if ((menu_flags.menu_decrease_flag == 1) && (men
      +                          u_value.speed_limit > 0))
  2252  0014CC  0100               	movlb	0	; () banked
  2253  0014CE  ABC6               	btfss	_menu_flags& (0+255),5,b
  2254  0014D0  EF6C  F00A         	goto	u2541
  2255  0014D4  EF6E  F00A         	goto	u2540
  2256  0014D8                     u2541:
  2257  0014D8  EF80  F00A         	goto	l2860
  2258  0014DC                     u2540:
  2259  0014DC                     
  2260                           ; BSR set to: 0
  2261  0014DC  505C               	movf	(_menu_value+2)^0,w,c
  2262  0014DE  B4D8               	btfsc	status,2,c
  2263  0014E0  EF74  F00A         	goto	u2551
  2264  0014E4  EF76  F00A         	goto	u2550
  2265  0014E8                     u2551:
  2266  0014E8  EF80  F00A         	goto	l2860
  2267  0014EC                     u2550:
  2268  0014EC                     
  2269                           ; BSR set to: 0
  2270                           ;fs_menu_controller.c: 353:             {;fs_menu_controller.c: 354:                  me
      +                          nu_flags.menu_decrease_flag = 0;
  2271  0014EC  9BC6               	bcf	_menu_flags& (0+255),5,b
  2272  0014EE                     
  2273                           ; BSR set to: 0
  2274                           ;fs_menu_controller.c: 355:                  menu_value.speed_limit -= 1;
  2275  0014EE  065C               	decf	(_menu_value+2)^0,f,c
  2276  0014F0                     
  2277                           ; BSR set to: 0
  2278                           ;fs_menu_controller.c: 356:                  eepromWrite(0x02,menu_value.speed_limit);
  2279  0014F0  0E00               	movlw	0
  2280  0014F2  6E02               	movwf	(eepromWrite@address+1)^0,c
  2281  0014F4  0E02               	movlw	2
  2282  0014F6  6E01               	movwf	eepromWrite@address^0,c
  2283  0014F8  C05C  F003         	movff	_menu_value+2,eepromWrite@data
  2284  0014FC  EC2D  F014         	call	_eepromWrite	;wreg free
  2285  001500                     l2860:
  2286                           
  2287                           ;fs_menu_controller.c: 358:             Lcd_Set_Cursor(1,1);
  2288  001500  0E01               	movlw	1
  2289  001502  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2290  001504  0E01               	movlw	1
  2291  001506  ECB2  F012         	call	_Lcd_Set_Cursor
  2292  00150A                     
  2293                           ;fs_menu_controller.c: 359:             Lcd_Write_String("HIZ LiMiTi      ");
  2294  00150A  0E13               	movlw	low STR_9
  2295  00150C  6E05               	movwf	Lcd_Write_String@a^0,c
  2296  00150E  0E10               	movlw	high STR_9
  2297  001510  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2298  001512  EC71  F012         	call	_Lcd_Write_String	;wreg free
  2299  001516                     
  2300                           ;fs_menu_controller.c: 360:             Lcd_Set_Cursor(2,1);
  2301  001516  0E01               	movlw	1
  2302  001518  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2303  00151A  0E02               	movlw	2
  2304  00151C  ECB2  F012         	call	_Lcd_Set_Cursor
  2305  001520                     
  2306                           ;fs_menu_controller.c: 361:             sprintf(textCursor2,"%d               ",menu_val
      +                          ue.speed_limit);
  2307  001520  0EF0               	movlw	low stateMachine@textCursor2
  2308  001522  0100               	movlb	0	; () banked
  2309  001524  6FDE               	movwf	sprintf@s& (0+255),b
  2310  001526  0E00               	movlw	high stateMachine@textCursor2
  2311  001528  6FDF               	movwf	(sprintf@s+1)& (0+255),b
  2312  00152A  0E01               	movlw	low STR_6
  2313  00152C  6FE0               	movwf	sprintf@fmt& (0+255),b
  2314  00152E  0E10               	movlw	high STR_6
  2315  001530  6FE1               	movwf	(sprintf@fmt+1)& (0+255),b
  2316  001532  C05C  F0E2         	movff	_menu_value+2,?_sprintf+4
  2317  001536  6BE3               	clrf	(?_sprintf+5)& (0+255),b
  2318  001538  EC74  F013         	call	_sprintf	;wreg free
  2319  00153C                     
  2320                           ;fs_menu_controller.c: 362:             Lcd_Write_String(textCursor2);
  2321  00153C  0EF0               	movlw	low stateMachine@textCursor2
  2322  00153E  6E05               	movwf	Lcd_Write_String@a^0,c
  2323  001540  0E00               	movlw	high stateMachine@textCursor2
  2324  001542  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2325  001544  EC71  F012         	call	_Lcd_Write_String	;wreg free
  2326  001548                     
  2327                           ;fs_menu_controller.c: 364:             if(timer_value.menu_login_delay == 100)
  2328  001548  0E64               	movlw	100
  2329  00154A  0100               	movlb	0	; () banked
  2330  00154C  19B4               	xorwf	(_timer_value+8)& (0+255),w,b
  2331  00154E  A4D8               	btfss	status,2,c
  2332  001550  EFAC  F00A         	goto	u2561
  2333  001554  EFAE  F00A         	goto	u2560
  2334  001558                     u2561:
  2335  001558  EFC9  F00B         	goto	l440
  2336  00155C                     u2560:
  2337  00155C  EFC8  F009         	goto	l2796
  2338  001560                     l2874:
  2339                           
  2340                           ;fs_menu_controller.c: 372:             startIsClick = 0;
  2341  001560  0E00               	movlw	0
  2342  001562  0100               	movlb	0	; () banked
  2343  001564  6FC8               	movwf	_startIsClick& (0+255),b
  2344                           
  2345                           ;fs_menu_controller.c: 373:             pauseIsClick = 0;
  2346  001566  0E00               	movlw	0
  2347  001568  6FC9               	movwf	_pauseIsClick& (0+255),b
  2348                           
  2349                           ;fs_menu_controller.c: 374:             stopIsClick = 1;
  2350  00156A  0E01               	movlw	1
  2351  00156C  6FC7               	movwf	_stopIsClick& (0+255),b
  2352  00156E                     
  2353                           ; BSR set to: 0
  2354                           ;fs_menu_controller.c: 376:             Lcd_Set_Cursor(1,1);
  2355  00156E  0E01               	movlw	1
  2356  001570  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2357  001572  0E01               	movlw	1
  2358  001574  ECB2  F012         	call	_Lcd_Set_Cursor
  2359  001578                     
  2360                           ;fs_menu_controller.c: 377:             Lcd_Write_String("ZAMAN DOLDU     ");
  2361  001578  0E35               	movlw	low STR_11
  2362  00157A  6E05               	movwf	Lcd_Write_String@a^0,c
  2363  00157C  0E10               	movlw	high STR_11
  2364  00157E  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2365  001580  EC71  F012         	call	_Lcd_Write_String	;wreg free
  2366  001584                     
  2367                           ;fs_menu_controller.c: 378:             LATBbits.LATB6 = 1;
  2368  001584  8C8A               	bsf	138,6,c	;volatile
  2369  001586                     
  2370                           ;fs_menu_controller.c: 379:             LATEbits.LATE2 = 0;
  2371  001586  948D               	bcf	141,2,c	;volatile
  2372  001588                     
  2373                           ;fs_menu_controller.c: 380:             LATAbits.LATA4 = 0;
  2374  001588  9889               	bcf	137,4,c	;volatile
  2375  00158A                     
  2376                           ;fs_menu_controller.c: 381:             timer_value.remainingSecond = 0;
  2377  00158A  0E00               	movlw	0
  2378  00158C  0100               	movlb	0	; () banked
  2379  00158E  6FB1               	movwf	(_timer_value+5)& (0+255),b
  2380  001590  0E00               	movlw	0
  2381  001592  6FB0               	movwf	(_timer_value+4)& (0+255),b
  2382  001594                     
  2383                           ; BSR set to: 0
  2384                           ;fs_menu_controller.c: 382:             timer_value.remainingMinute = 0;
  2385  001594  0E00               	movlw	0
  2386  001596  6FB3               	movwf	(_timer_value+7)& (0+255),b
  2387  001598  0E00               	movlw	0
  2388  00159A  6FB2               	movwf	(_timer_value+6)& (0+255),b
  2389  00159C                     
  2390                           ; BSR set to: 0
  2391                           ;fs_menu_controller.c: 383:              Lcd_Set_Cursor(2,1);
  2392  00159C  0E01               	movlw	1
  2393  00159E  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2394  0015A0  0E02               	movlw	2
  2395  0015A2  ECB2  F012         	call	_Lcd_Set_Cursor
  2396  0015A6                     
  2397                           ;fs_menu_controller.c: 384:             sprintf(textCursor2,"      %d:%d    ",timer_valu
      +                          e.remainingMinute,timer_value.remainingSecond);
  2398  0015A6  0EF0               	movlw	low stateMachine@textCursor2
  2399  0015A8  0100               	movlb	0	; () banked
  2400  0015AA  6FDE               	movwf	sprintf@s& (0+255),b
  2401  0015AC  0E00               	movlw	high stateMachine@textCursor2
  2402  0015AE  6FDF               	movwf	(sprintf@s+1)& (0+255),b
  2403  0015B0  0E89               	movlw	low STR_12
  2404  0015B2  6FE0               	movwf	sprintf@fmt& (0+255),b
  2405  0015B4  0E10               	movlw	high STR_12
  2406  0015B6  6FE1               	movwf	(sprintf@fmt+1)& (0+255),b
  2407  0015B8  C0B2  F0E2         	movff	_timer_value+6,?_sprintf+4
  2408  0015BC  C0B3  F0E3         	movff	_timer_value+7,?_sprintf+5
  2409  0015C0  C0B0  F0E4         	movff	_timer_value+4,?_sprintf+6
  2410  0015C4  C0B1  F0E5         	movff	_timer_value+5,?_sprintf+7
  2411  0015C8  EC74  F013         	call	_sprintf	;wreg free
  2412  0015CC                     
  2413                           ;fs_menu_controller.c: 385:             Lcd_Write_String(textCursor2);
  2414  0015CC  0EF0               	movlw	low stateMachine@textCursor2
  2415  0015CE  6E05               	movwf	Lcd_Write_String@a^0,c
  2416  0015D0  0E00               	movlw	high stateMachine@textCursor2
  2417  0015D2  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2418  0015D4  EC71  F012         	call	_Lcd_Write_String	;wreg free
  2419  0015D8                     
  2420                           ;fs_menu_controller.c: 387:         if (menu_flags.menu_start_flag == 1)
  2421  0015D8  0100               	movlb	0	; () banked
  2422  0015DA  A3C6               	btfss	_menu_flags& (0+255),1,b
  2423  0015DC  EFF2  F00A         	goto	u2571
  2424  0015E0  EFF4  F00A         	goto	u2570
  2425  0015E4                     u2571:
  2426  0015E4  EF05  F00B         	goto	l2902
  2427  0015E8                     u2570:
  2428  0015E8                     
  2429                           ; BSR set to: 0
  2430                           ;fs_menu_controller.c: 388:         {;fs_menu_controller.c: 389:             menu_flags.
      +                          menu_start_flag = 0;
  2431  0015E8  93C6               	bcf	_menu_flags& (0+255),1,b
  2432  0015EA                     
  2433                           ; BSR set to: 0
  2434                           ;fs_menu_controller.c: 390:             menu_selected = START_MENU;
  2435  0015EA  0E05               	movlw	5
  2436  0015EC  6E5D               	movwf	_menu_selected^0,c
  2437                           
  2438                           ;fs_menu_controller.c: 392:             startIsClick = 1;
  2439  0015EE  0E01               	movlw	1
  2440  0015F0  6FC8               	movwf	_startIsClick& (0+255),b
  2441                           
  2442                           ;fs_menu_controller.c: 393:             pauseIsClick = 0;
  2443  0015F2  0E00               	movlw	0
  2444  0015F4  6FC9               	movwf	_pauseIsClick& (0+255),b
  2445                           
  2446                           ;fs_menu_controller.c: 394:             stopIsClick = 0;
  2447  0015F6  0E00               	movlw	0
  2448  0015F8  6FC7               	movwf	_stopIsClick& (0+255),b
  2449                           
  2450                           ;fs_menu_controller.c: 395:             timer_value.second = 0;
  2451  0015FA  0E00               	movlw	0
  2452  0015FC  6FAD               	movwf	(_timer_value+1)& (0+255),b
  2453  0015FE  0E00               	movlw	0
  2454  001600  6FAC               	movwf	_timer_value& (0+255),b
  2455                           
  2456                           ;fs_menu_controller.c: 396:             timer_value.minute = 0;
  2457  001602  0E00               	movlw	0
  2458  001604  6FAF               	movwf	(_timer_value+3)& (0+255),b
  2459  001606  0E00               	movlw	0
  2460  001608  6FAE               	movwf	(_timer_value+2)& (0+255),b
  2461  00160A                     l2902:
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;fs_menu_controller.c: 399:         if ( timer_value.menu_login_delay == 100)
  2465  00160A  0E64               	movlw	100
  2466  00160C  19B4               	xorwf	(_timer_value+8)& (0+255),w,b
  2467  00160E  A4D8               	btfss	status,2,c
  2468  001610  EF0C  F00B         	goto	u2581
  2469  001614  EF0E  F00B         	goto	u2580
  2470  001618                     u2581:
  2471  001618  EFC9  F00B         	goto	l440
  2472  00161C                     u2580:
  2473  00161C                     l2904:
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;fs_menu_controller.c: 400:         {;fs_menu_controller.c: 401:             timer_value
      +                          .menu_login_delay = 0;
  2477  00161C  0E00               	movlw	0
  2478  00161E  6FB4               	movwf	(_timer_value+8)& (0+255),b
  2479                           
  2480                           ;fs_menu_controller.c: 402:             menu_selected = DRIVER_TIME_SETTING;
  2481  001620  0E01               	movlw	1
  2482  001622  6E5D               	movwf	_menu_selected^0,c
  2483  001624  EFC9  F00B         	goto	l440
  2484  001628                     l434:
  2485                           
  2486                           ;fs_menu_controller.c: 408:             timer_value.remainingMinute = menu_value.driver_
      +                          time;
  2487  001628  C05A  F0B2         	movff	_menu_value,_timer_value+6
  2488  00162C  0100               	movlb	0	; () banked
  2489  00162E  6BB3               	clrf	(_timer_value+7)& (0+255),b
  2490  001630                     
  2491                           ; BSR set to: 0
  2492                           ;fs_menu_controller.c: 409:             timer_value.remainingSecond = 0;
  2493  001630  0E00               	movlw	0
  2494  001632  6FB1               	movwf	(_timer_value+5)& (0+255),b
  2495  001634  0E00               	movlw	0
  2496  001636  6FB0               	movwf	(_timer_value+4)& (0+255),b
  2497                           
  2498                           ;fs_menu_controller.c: 410:             startIsClick = 1;
  2499  001638  0E01               	movlw	1
  2500  00163A  6FC8               	movwf	_startIsClick& (0+255),b
  2501                           
  2502                           ;fs_menu_controller.c: 411:             stopIsClick = 0;
  2503  00163C  0E00               	movlw	0
  2504  00163E  6FC7               	movwf	_stopIsClick& (0+255),b
  2505                           
  2506                           ;fs_menu_controller.c: 412:             menu_selected = MAIN_MENU;
  2507  001640  0E00               	movlw	0
  2508  001642  6E5D               	movwf	_menu_selected^0,c
  2509                           
  2510                           ;fs_menu_controller.c: 413:         break;
  2511  001644  EFC9  F00B         	goto	l440
  2512  001648                     l435:
  2513                           
  2514                           ;fs_menu_controller.c: 417:             LATBbits.LATB6 = 1;
  2515  001648  8C8A               	bsf	138,6,c	;volatile
  2516                           
  2517                           ;fs_menu_controller.c: 418:             LATAbits.LATA4 = 1;
  2518  00164A  8889               	bsf	137,4,c	;volatile
  2519                           
  2520                           ;fs_menu_controller.c: 419:             LATEbits.LATE2 = 1;
  2521  00164C  848D               	bsf	141,2,c	;volatile
  2522  00164E                     
  2523                           ;fs_menu_controller.c: 423:             Lcd_Set_Cursor(1,1);
  2524  00164E  0E01               	movlw	1
  2525  001650  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2526  001652  0E01               	movlw	1
  2527  001654  ECB2  F012         	call	_Lcd_Set_Cursor
  2528  001658                     
  2529                           ;fs_menu_controller.c: 424:             Lcd_Write_String("HAREKET DURDU   ");
  2530  001658  0E46               	movlw	low STR_13
  2531  00165A  6E05               	movwf	Lcd_Write_String@a^0,c
  2532  00165C  0E10               	movlw	high STR_13
  2533  00165E  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2534  001660  EC71  F012         	call	_Lcd_Write_String	;wreg free
  2535  001664                     
  2536                           ;fs_menu_controller.c: 425:             Lcd_Set_Cursor(2,1);
  2537  001664  0E01               	movlw	1
  2538  001666  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2539  001668  0E02               	movlw	2
  2540  00166A  ECB2  F012         	call	_Lcd_Set_Cursor
  2541  00166E                     
  2542                           ;fs_menu_controller.c: 426:             sprintf(textCursor2,"      %d:%d    ",timer_valu
      +                          e.remainingMinute,timer_value.remainingSecond);
  2543  00166E  0EF0               	movlw	low stateMachine@textCursor2
  2544  001670  0100               	movlb	0	; () banked
  2545  001672  6FDE               	movwf	sprintf@s& (0+255),b
  2546  001674  0E00               	movlw	high stateMachine@textCursor2
  2547  001676  6FDF               	movwf	(sprintf@s+1)& (0+255),b
  2548  001678  0E89               	movlw	low STR_12
  2549  00167A  6FE0               	movwf	sprintf@fmt& (0+255),b
  2550  00167C  0E10               	movlw	high STR_12
  2551  00167E  6FE1               	movwf	(sprintf@fmt+1)& (0+255),b
  2552  001680  C0B2  F0E2         	movff	_timer_value+6,?_sprintf+4
  2553  001684  C0B3  F0E3         	movff	_timer_value+7,?_sprintf+5
  2554  001688  C0B0  F0E4         	movff	_timer_value+4,?_sprintf+6
  2555  00168C  C0B1  F0E5         	movff	_timer_value+5,?_sprintf+7
  2556  001690  EC74  F013         	call	_sprintf	;wreg free
  2557  001694                     
  2558                           ;fs_menu_controller.c: 427:             Lcd_Write_String(textCursor2);
  2559  001694  0EF0               	movlw	low stateMachine@textCursor2
  2560  001696  6E05               	movwf	Lcd_Write_String@a^0,c
  2561  001698  0E00               	movlw	high stateMachine@textCursor2
  2562  00169A  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2563  00169C  EC71  F012         	call	_Lcd_Write_String	;wreg free
  2564  0016A0                     
  2565                           ;fs_menu_controller.c: 429:             if (menu_flags.menu_start_flag == 1)
  2566  0016A0  0100               	movlb	0	; () banked
  2567  0016A2  A3C6               	btfss	_menu_flags& (0+255),1,b
  2568  0016A4  EF56  F00B         	goto	u2591
  2569  0016A8  EF58  F00B         	goto	u2590
  2570  0016AC                     u2591:
  2571  0016AC  EF61  F00B         	goto	l436
  2572  0016B0                     u2590:
  2573  0016B0                     
  2574                           ; BSR set to: 0
  2575                           ;fs_menu_controller.c: 430:             {;fs_menu_controller.c: 431:                 men
      +                          u_flags.menu_start_flag = 0;
  2576  0016B0  93C6               	bcf	_menu_flags& (0+255),1,b
  2577  0016B2                     
  2578                           ; BSR set to: 0
  2579                           ;fs_menu_controller.c: 432:                 menu_selected = MAIN_MENU;
  2580  0016B2  0E00               	movlw	0
  2581  0016B4  6E5D               	movwf	_menu_selected^0,c
  2582                           
  2583                           ;fs_menu_controller.c: 434:                 startIsClick = 1;
  2584  0016B6  0E01               	movlw	1
  2585  0016B8  6FC8               	movwf	_startIsClick& (0+255),b
  2586                           
  2587                           ;fs_menu_controller.c: 435:                 pauseIsClick = 0;
  2588  0016BA  0E00               	movlw	0
  2589  0016BC  6FC9               	movwf	_pauseIsClick& (0+255),b
  2590                           
  2591                           ;fs_menu_controller.c: 436:                 stopIsClick = 0;
  2592  0016BE  0E00               	movlw	0
  2593  0016C0  6FC7               	movwf	_stopIsClick& (0+255),b
  2594  0016C2                     l436:
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;fs_menu_controller.c: 439:             if ( (startIsClick == 0) && (pauseIsClick == 0) 
      +                          && (stopIsClick == 1) && (menu_selected == PAUSE_MENU))
  2598  0016C2  51C8               	movf	_startIsClick& (0+255),w,b
  2599  0016C4  A4D8               	btfss	status,2,c
  2600  0016C6  EF67  F00B         	goto	u2601
  2601  0016CA  EF69  F00B         	goto	u2600
  2602  0016CE                     u2601:
  2603  0016CE  EF91  F00B         	goto	l2934
  2604  0016D2                     u2600:
  2605  0016D2                     
  2606                           ; BSR set to: 0
  2607  0016D2  51C9               	movf	_pauseIsClick& (0+255),w,b
  2608  0016D4  A4D8               	btfss	status,2,c
  2609  0016D6  EF6F  F00B         	goto	u2611
  2610  0016DA  EF71  F00B         	goto	u2610
  2611  0016DE                     u2611:
  2612  0016DE  EF91  F00B         	goto	l2934
  2613  0016E2                     u2610:
  2614  0016E2                     
  2615                           ; BSR set to: 0
  2616  0016E2  05C7               	decf	_stopIsClick& (0+255),w,b
  2617  0016E4  A4D8               	btfss	status,2,c
  2618  0016E6  EF77  F00B         	goto	u2621
  2619  0016EA  EF79  F00B         	goto	u2620
  2620  0016EE                     u2621:
  2621  0016EE  EF91  F00B         	goto	l2934
  2622  0016F2                     u2620:
  2623  0016F2                     
  2624                           ; BSR set to: 0
  2625  0016F2  0E06               	movlw	6
  2626  0016F4  185D               	xorwf	_menu_selected^0,w,c
  2627  0016F6  A4D8               	btfss	status,2,c
  2628  0016F8  EF80  F00B         	goto	u2631
  2629  0016FC  EF82  F00B         	goto	u2630
  2630  001700                     u2631:
  2631  001700  EF91  F00B         	goto	l2934
  2632  001704                     u2630:
  2633  001704                     
  2634                           ; BSR set to: 0
  2635                           ;fs_menu_controller.c: 440:             {;fs_menu_controller.c: 441:                  ti
      +                          mer_value.remainingMinute = menu_value.driver_time;
  2636  001704  C05A  F0B2         	movff	_menu_value,_timer_value+6
  2637  001708  6BB3               	clrf	(_timer_value+7)& (0+255),b
  2638  00170A                     
  2639                           ; BSR set to: 0
  2640                           ;fs_menu_controller.c: 442:                  timer_value.remainingSecond = 0;
  2641  00170A  0E00               	movlw	0
  2642  00170C  6FB1               	movwf	(_timer_value+5)& (0+255),b
  2643  00170E  0E00               	movlw	0
  2644  001710  6FB0               	movwf	(_timer_value+4)& (0+255),b
  2645                           
  2646                           ;fs_menu_controller.c: 443:                  timer_value.second = 0;
  2647  001712  0E00               	movlw	0
  2648  001714  6FAD               	movwf	(_timer_value+1)& (0+255),b
  2649  001716  0E00               	movlw	0
  2650  001718  6FAC               	movwf	_timer_value& (0+255),b
  2651                           
  2652                           ;fs_menu_controller.c: 444:                  timer_value.minute = 0;
  2653  00171A  0E00               	movlw	0
  2654  00171C  6FAF               	movwf	(_timer_value+3)& (0+255),b
  2655  00171E  0E00               	movlw	0
  2656  001720  6FAE               	movwf	(_timer_value+2)& (0+255),b
  2657  001722                     l2934:
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;fs_menu_controller.c: 448:             if ( timer_value.menu_login_delay == 100)
  2661  001722  0E64               	movlw	100
  2662  001724  19B4               	xorwf	(_timer_value+8)& (0+255),w,b
  2663  001726  A4D8               	btfss	status,2,c
  2664  001728  EF98  F00B         	goto	u2641
  2665  00172C  EF9A  F00B         	goto	u2640
  2666  001730                     u2641:
  2667  001730  EFC9  F00B         	goto	l440
  2668  001734                     u2640:
  2669  001734  EF0E  F00B         	goto	l2904
  2670  001738                     l2940:
  2671  001738  505D               	movf	_menu_selected^0,w,c
  2672  00173A  6E58               	movwf	??_stateMachine^0,c
  2673  00173C  6A59               	clrf	(??_stateMachine+1)^0,c
  2674                           
  2675                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2676                           ; Switch size 1, requested type "simple"
  2677                           ; Number of cases is 1, Range of values is 0 to 0
  2678                           ; switch strategies available:
  2679                           ; Name         Instructions Cycles
  2680                           ; simple_byte            4     3 (average)
  2681                           ;	Chosen strategy is simple_byte
  2682  00173E  5059               	movf	(??_stateMachine+1)^0,w,c
  2683  001740  0A00               	xorlw	0	; case 0
  2684  001742  B4D8               	btfsc	status,2,c
  2685  001744  EFA6  F00B         	goto	l3858
  2686  001748  EFC9  F00B         	goto	l440
  2687  00174C                     l3858:
  2688                           
  2689                           ; Switch size 1, requested type "simple"
  2690                           ; Number of cases is 8, Range of values is 0 to 7
  2691                           ; switch strategies available:
  2692                           ; Name         Instructions Cycles
  2693                           ; simple_byte           25    13 (average)
  2694                           ;	Chosen strategy is simple_byte
  2695  00174C  5058               	movf	??_stateMachine^0,w,c
  2696  00174E  0A00               	xorlw	0	; case 0
  2697  001750  B4D8               	btfsc	status,2,c
  2698  001752  EF5D  F008         	goto	l409
  2699  001756  0A01               	xorlw	1	; case 1
  2700  001758  B4D8               	btfsc	status,2,c
  2701  00175A  EF3D  F009         	goto	l416
  2702  00175E  0A03               	xorlw	3	; case 2
  2703  001760  B4D8               	btfsc	status,2,c
  2704  001762  EFCE  F009         	goto	l421
  2705  001766  0A01               	xorlw	1	; case 3
  2706  001768  B4D8               	btfsc	status,2,c
  2707  00176A  EF3F  F00A         	goto	l426
  2708  00176E  0A07               	xorlw	7	; case 4
  2709  001770  B4D8               	btfsc	status,2,c
  2710  001772  EFB0  F00A         	goto	l2874
  2711  001776  0A01               	xorlw	1	; case 5
  2712  001778  B4D8               	btfsc	status,2,c
  2713  00177A  EF14  F00B         	goto	l434
  2714  00177E  0A03               	xorlw	3	; case 6
  2715  001780  B4D8               	btfsc	status,2,c
  2716  001782  EF24  F00B         	goto	l435
  2717  001786  0A01               	xorlw	1	; case 7
  2718  001788  B4D8               	btfsc	status,2,c
  2719  00178A  EFC9  F00B         	goto	l440
  2720  00178E  EFC9  F00B         	goto	l440
  2721  001792                     l440:
  2722  001792  0012               	return		;funcret
  2723  001794                     __end_of_stateMachine:
  2724                           	callstack 0
  2725                           
  2726 ;; *************** function _sprintf *****************
  2727 ;; Defined at:
  2728 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\nf_sprintf.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  s               2    0[BANK0 ] PTR unsigned char 
  2731 ;;		 -> stateMachine@textCursor2(16), 
  2732 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2733 ;;		 -> STR_14(16), STR_12(16), STR_10(18), STR_8(18), 
  2734 ;;		 -> STR_6(18), STR_4(15), STR_2(15), 
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;  f               6   12[BANK0 ] struct _IO_FILE
  2737 ;;  ap              2   10[BANK0 ] PTR void [1]
  2738 ;;		 -> ?_sprintf(2), 
  2739 ;;  ret             2    0        int 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  2    0[BANK0 ] int 
  2742 ;; Registers used:
  2743 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2749 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2750 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2752 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2753 ;;Total ram usage:       18 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:    8
  2756 ;; This function calls:
  2757 ;;		_vfprintf
  2758 ;; This function is called by:
  2759 ;;		_stateMachine
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text7
  2764  0026E8                     __ptext7:
  2765                           	callstack 0
  2766  0026E8                     _sprintf:
  2767                           	callstack 20
  2768  0026E8  0EE2               	movlw	low (?_sprintf+4)
  2769  0026EA  0100               	movlb	0	; () banked
  2770  0026EC  6FE8               	movwf	sprintf@ap& (0+255),b
  2771  0026EE  0E00               	movlw	high (?_sprintf+4)
  2772  0026F0  6FE9               	movwf	(sprintf@ap+1)& (0+255),b
  2773  0026F2  C0DE  F0EA         	movff	sprintf@s,sprintf@f
  2774  0026F6  C0DF  F0EB         	movff	sprintf@s+1,sprintf@f+1
  2775  0026FA                     
  2776                           ; BSR set to: 0
  2777  0026FA  0E00               	movlw	0
  2778  0026FC  6FED               	movwf	(sprintf@f+3)& (0+255),b
  2779  0026FE  0E00               	movlw	0
  2780  002700  6FEC               	movwf	(sprintf@f+2)& (0+255),b
  2781  002702                     
  2782                           ; BSR set to: 0
  2783  002702  0E00               	movlw	0
  2784  002704  6FEF               	movwf	(sprintf@f+5)& (0+255),b
  2785  002706  0E00               	movlw	0
  2786  002708  6FEE               	movwf	(sprintf@f+4)& (0+255),b
  2787  00270A                     
  2788                           ; BSR set to: 0
  2789  00270A  0EEA               	movlw	low sprintf@f
  2790  00270C  6E50               	movwf	vfprintf@fp^0,c
  2791  00270E  0E00               	movlw	high sprintf@f
  2792  002710  6E51               	movwf	(vfprintf@fp+1)^0,c
  2793  002712  C0E0  F052         	movff	sprintf@fmt,vfprintf@fmt
  2794  002716  C0E1  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2795  00271A  0EE8               	movlw	low sprintf@ap
  2796  00271C  6E54               	movwf	vfprintf@ap^0,c
  2797  00271E  0E00               	movlw	high sprintf@ap
  2798  002720  6E55               	movwf	(vfprintf@ap+1)^0,c
  2799  002722  ECE5  F012         	call	_vfprintf	;wreg free
  2800  002726  0100               	movlb	0	; () banked
  2801  002728  51EC               	movf	(sprintf@f+2)& (0+255),w,b
  2802  00272A  25DE               	addwf	sprintf@s& (0+255),w,b
  2803  00272C  6ED9               	movwf	fsr2l,c
  2804  00272E  51ED               	movf	(sprintf@f+3)& (0+255),w,b
  2805  002730  21DF               	addwfc	(sprintf@s+1)& (0+255),w,b
  2806  002732  6EDA               	movwf	fsr2h,c
  2807  002734  0E00               	movlw	0
  2808  002736  6EDF               	movwf	indf2,c
  2809  002738                     
  2810                           ; BSR set to: 0
  2811  002738  0012               	return		;funcret
  2812  00273A                     __end_of_sprintf:
  2813                           	callstack 0
  2814                           
  2815 ;; *************** function _vfprintf *****************
  2816 ;; Defined at:
  2817 ;;		line 1368 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
  2820 ;;		 -> sprintf@f(6), 
  2821 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
  2822 ;;		 -> STR_14(16), STR_12(16), STR_10(18), STR_8(18), 
  2823 ;;		 -> STR_6(18), STR_4(15), STR_2(15), 
  2824 ;;  ap              2   83[COMRAM] PTR PTR void 
  2825 ;;		 -> sprintf@ap(2), 
  2826 ;; Auto vars:     Size  Location     Type
  2827 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
  2828 ;;		 -> STR_14(16), STR_12(16), STR_10(18), STR_8(18), 
  2829 ;;		 -> STR_6(18), STR_4(15), STR_2(15), 
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  2   79[COMRAM] int 
  2832 ;; Registers used:
  2833 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2839 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;Total ram usage:        8 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:    7
  2846 ;; This function calls:
  2847 ;;		_vfpfcnvrt
  2848 ;; This function is called by:
  2849 ;;		_sprintf
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           	psect	text8
  2854  0025CA                     __ptext8:
  2855                           	callstack 0
  2856  0025CA                     _vfprintf:
  2857                           	callstack 20
  2858  0025CA                     
  2859                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1368: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.20\pic\source
      +                          s\c99\common\doprnt.c: 1369: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\comm
      +                          on\doprnt.c: 1371:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\
      +                          common\doprnt.c: 1373:     cfmt = (char *)fmt;
  2860  0025CA  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
  2861  0025CE  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2862  0025D2                     
  2863                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1374:     nout = 
      +                          0;
  2864  0025D2  0E00               	movlw	0
  2865  0025D4  0100               	movlb	0	; () banked
  2866  0025D6  6FBF               	movwf	(_nout+1)& (0+255),b
  2867  0025D8  0E00               	movlw	0
  2868  0025DA  6FBE               	movwf	_nout& (0+255),b
  2869                           
  2870                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1375:     while (
      +                          *cfmt) {
  2871  0025DC  EF03  F013         	goto	l2574
  2872  0025E0                     l2572:
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1376:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  2876  0025E0  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
  2877  0025E4  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2878  0025E8  0E56               	movlw	low vfprintf@cfmt
  2879  0025EA  6E42               	movwf	vfpfcnvrt@fmt^0,c
  2880  0025EC  0E00               	movlw	high vfprintf@cfmt
  2881  0025EE  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2882  0025F0  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
  2883  0025F4  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2884  0025F8  EC3C  F00D         	call	_vfpfcnvrt	;wreg free
  2885  0025FC  5040               	movf	?_vfpfcnvrt^0,w,c
  2886  0025FE  0100               	movlb	0	; () banked
  2887  002600  27BE               	addwf	_nout& (0+255),f,b
  2888  002602  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
  2889  002604  23BF               	addwfc	(_nout+1)& (0+255),f,b
  2890  002606                     l2574:
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1375:     while (
      +                          *cfmt) {
  2894  002606  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
  2895  00260A  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2896  00260E                     	if	0	;tblptru may be non-zero
  2897  00260E                     	endif
  2898  00260E                     	if	0	;tblptru may be non-zero
  2899  00260E                     	endif
  2900  00260E  0008               	tblrd		*
  2901  002610  50F5               	movf	tablat,w,c
  2902  002612  0900               	iorlw	0
  2903  002614  A4D8               	btfss	status,2,c
  2904  002616  EF0F  F013         	goto	u1921
  2905  00261A  EF11  F013         	goto	u1920
  2906  00261E                     u1921:
  2907  00261E  EFF0  F012         	goto	l2572
  2908  002622                     u1920:
  2909  002622                     
  2910                           ; BSR set to: 0
  2911                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1378:     return 
      +                          nout;
  2912  002622  C0BE  F050         	movff	_nout,?_vfprintf
  2913  002626  C0BF  F051         	movff	_nout+1,?_vfprintf+1
  2914  00262A                     
  2915                           ; BSR set to: 0
  2916  00262A  0012               	return		;funcret
  2917  00262C                     __end_of_vfprintf:
  2918                           	callstack 0
  2919                           
  2920 ;; *************** function _vfpfcnvrt *****************
  2921 ;; Defined at:
  2922 ;;		line 670 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  2925 ;;		 -> sprintf@f(6), 
  2926 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  2927 ;;		 -> vfprintf@cfmt(2), 
  2928 ;;  ap              2   67[COMRAM] PTR PTR void 
  2929 ;;		 -> sprintf@ap(2), 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;  ll              8   71[COMRAM] long long 
  2932 ;;  llu             8    0        unsigned long long 
  2933 ;;  f               4    0        unsigned long long 
  2934 ;;  vp              3    0        PTR void 
  2935 ;;  ct              3    0        unsigned char [3]
  2936 ;;  cp              3    0        PTR unsigned char 
  2937 ;;  i               2    0        int 
  2938 ;;  done            2    0        int 
  2939 ;;  c               1    0        unsigned char 
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  2   63[COMRAM] int 
  2942 ;; Registers used:
  2943 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2949 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;Total ram usage:       16 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    6
  2956 ;; This function calls:
  2957 ;;		_dtoa
  2958 ;;		_fputc
  2959 ;; This function is called by:
  2960 ;;		_vfprintf
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text9
  2965  001A78                     __ptext9:
  2966                           	callstack 0
  2967  001A78                     _vfpfcnvrt:
  2968                           	callstack 20
  2969  001A78                     
  2970                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 670: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.20\pic\sou
      +                          rces\c99\common\doprnt.c: 671: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\co
      +                          mmon\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.20\pic\sou
      +                          rces\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files\Microchip\xc8\v2.20\pic
      +                          \sources\c99\common\doprnt.c: 674:     long long ll;;C:\Program Files\Microchip\xc8\v2.2
      +                          0\pic\sources\c99\common\doprnt.c: 675:     unsigned long long llu;
  2971  001A78  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2972  001A7C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2973  001A80  CFDE FFF6          	movff	postinc2,tblptrl
  2974  001A84  CFDD FFF7          	movff	postdec2,tblptrh
  2975  001A88                     	if	0	;tblptru may be non-zero
  2976  001A88                     	endif
  2977  001A88                     	if	0	;tblptru may be non-zero
  2978  001A88                     	endif
  2979  001A88  0008               	tblrd		*
  2980  001A8A  50F5               	movf	tablat,w,c
  2981  001A8C  0A25               	xorlw	37
  2982  001A8E  A4D8               	btfss	status,2,c
  2983  001A90  EF4C  F00D         	goto	u1881
  2984  001A94  EF4E  F00D         	goto	u1880
  2985  001A98                     u1881:
  2986  001A98  EFFA  F00D         	goto	l2530
  2987  001A9C                     u1880:
  2988  001A9C                     
  2989                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 681:         ++*f
      +                          mt;
  2990  001A9C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2991  001AA0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2992  001AA4  2ADE               	incf	postinc2,f,c
  2993  001AA6  0E00               	movlw	0
  2994  001AA8  22DD               	addwfc	postdec2,f,c
  2995  001AAA                     
  2996                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 683:         flag
      +                          s = width = 0;
  2997  001AAA  0E00               	movlw	0
  2998  001AAC  0100               	movlb	0	; () banked
  2999  001AAE  6FC1               	movwf	(_width+1)& (0+255),b
  3000  001AB0  0E00               	movlw	0
  3001  001AB2  6FC0               	movwf	_width& (0+255),b
  3002  001AB4  C0C0  F0C4         	movff	_width,_flags
  3003  001AB8  C0C1  F0C5         	movff	_width+1,_flags+1
  3004  001ABC                     
  3005                           ; BSR set to: 0
  3006                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 684:         prec
      +                           = -1;
  3007  001ABC  69C2               	setf	_prec& (0+255),b
  3008  001ABE  69C3               	setf	(_prec+1)& (0+255),b
  3009  001AC0                     
  3010                           ; BSR set to: 0
  3011                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 825:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  3012  001AC0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3013  001AC4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3014  001AC8  CFDE FFF6          	movff	postinc2,tblptrl
  3015  001ACC  CFDD FFF7          	movff	postdec2,tblptrh
  3016  001AD0                     	if	0	;tblptru may be non-zero
  3017  001AD0                     	endif
  3018  001AD0                     	if	0	;tblptru may be non-zero
  3019  001AD0                     	endif
  3020  001AD0  0008               	tblrd		*
  3021  001AD2  50F5               	movf	tablat,w,c
  3022  001AD4  0A64               	xorlw	100
  3023  001AD6  B4D8               	btfsc	status,2,c
  3024  001AD8  EF70  F00D         	goto	u1891
  3025  001ADC  EF72  F00D         	goto	u1890
  3026  001AE0                     u1891:
  3027  001AE0  EF84  F00D         	goto	l2508
  3028  001AE4                     u1890:
  3029  001AE4                     
  3030                           ; BSR set to: 0
  3031  001AE4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3032  001AE8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3033  001AEC  CFDE FFF6          	movff	postinc2,tblptrl
  3034  001AF0  CFDD FFF7          	movff	postdec2,tblptrh
  3035  001AF4                     	if	0	;tblptru may be non-zero
  3036  001AF4                     	endif
  3037  001AF4                     	if	0	;tblptru may be non-zero
  3038  001AF4                     	endif
  3039  001AF4  0008               	tblrd		*
  3040  001AF6  50F5               	movf	tablat,w,c
  3041  001AF8  0A69               	xorlw	105
  3042  001AFA  A4D8               	btfss	status,2,c
  3043  001AFC  EF82  F00D         	goto	u1901
  3044  001B00  EF84  F00D         	goto	u1900
  3045  001B04                     u1901:
  3046  001B04  EFC4  F00D         	goto	l2514
  3047  001B08                     u1900:
  3048  001B08                     l2508:
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 827:             
      +                          ++*fmt;
  3052  001B08  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3053  001B0C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3054  001B10  2ADE               	incf	postinc2,f,c
  3055  001B12  0E00               	movlw	0
  3056  001B14  22DD               	addwfc	postdec2,f,c
  3057                           
  3058                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 828:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  3059  001B16  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3060  001B1A  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3061  001B1E  CFDF F046          	movff	indf2,??_vfpfcnvrt
  3062  001B22  0E02               	movlw	2
  3063  001B24  26DE               	addwf	postinc2,f,c
  3064  001B26  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  3065  001B2A  0E00               	movlw	0
  3066  001B2C  22DD               	addwfc	postdec2,f,c
  3067  001B2E  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  3068  001B32  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3069  001B36  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  3070  001B3A  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  3071  001B3E  0E00               	movlw	0
  3072  001B40  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  3073  001B42  0EFF               	movlw	-1
  3074  001B44  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
  3075  001B46  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  3076  001B48  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  3077  001B4A  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  3078  001B4C  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  3079  001B4E  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  3080  001B50                     
  3081                           ; BSR set to: 0
  3082                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 830:             
      +                          return dtoa(fp, ll);
  3083  001B50  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  3084  001B54  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  3085  001B58  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  3086  001B5C  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  3087  001B60  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  3088  001B64  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  3089  001B68  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  3090  001B6C  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  3091  001B70  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  3092  001B74  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  3093  001B78  ECCA  F00B         	call	_dtoa	;wreg free
  3094  001B7C  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  3095  001B80  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  3096  001B84  EF15  F00E         	goto	l1215
  3097  001B88                     l2514:
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1350:         if 
      +                          ((*fmt)[0] == '%') {
  3101  001B88  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3102  001B8C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3103  001B90  CFDE FFF6          	movff	postinc2,tblptrl
  3104  001B94  CFDD FFF7          	movff	postdec2,tblptrh
  3105  001B98                     	if	0	;tblptru may be non-zero
  3106  001B98                     	endif
  3107  001B98                     	if	0	;tblptru may be non-zero
  3108  001B98                     	endif
  3109  001B98  0008               	tblrd		*
  3110  001B9A  50F5               	movf	tablat,w,c
  3111  001B9C  0A25               	xorlw	37
  3112  001B9E  A4D8               	btfss	status,2,c
  3113  001BA0  EFD4  F00D         	goto	u1911
  3114  001BA4  EFD6  F00D         	goto	u1910
  3115  001BA8                     u1911:
  3116  001BA8  EFED  F00D         	goto	l2524
  3117  001BAC                     u1910:
  3118  001BAC                     
  3119                           ; BSR set to: 0
  3120                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1351:            
      +                           ++*fmt;
  3121  001BAC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3122  001BB0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3123  001BB4  2ADE               	incf	postinc2,f,c
  3124  001BB6  0E00               	movlw	0
  3125  001BB8  22DD               	addwfc	postdec2,f,c
  3126  001BBA                     
  3127                           ; BSR set to: 0
  3128                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1352:            
      +                           fputc((int)'%', fp);
  3129  001BBA  0E00               	movlw	0
  3130  001BBC  6E02               	movwf	(fputc@c+1)^0,c
  3131  001BBE  0E25               	movlw	37
  3132  001BC0  6E01               	movwf	fputc@c^0,c
  3133  001BC2  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3134  001BC6  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3135  001BCA  EC5E  F011         	call	_fputc	;wreg free
  3136  001BCE                     l2520:
  3137                           
  3138                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1353:            
      +                           return 1;
  3139  001BCE  0E00               	movlw	0
  3140  001BD0  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  3141  001BD2  0E01               	movlw	1
  3142  001BD4  6E40               	movwf	?_vfpfcnvrt^0,c
  3143  001BD6  EF15  F00E         	goto	l1215
  3144  001BDA                     l2524:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1357:         ++*
      +                          fmt;
  3148  001BDA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3149  001BDE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3150  001BE2  2ADE               	incf	postinc2,f,c
  3151  001BE4  0E00               	movlw	0
  3152  001BE6  22DD               	addwfc	postdec2,f,c
  3153  001BE8                     
  3154                           ; BSR set to: 0
  3155                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1358:         ret
      +                          urn 0;
  3156  001BE8  0E00               	movlw	0
  3157  001BEA  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  3158  001BEC  0E00               	movlw	0
  3159  001BEE  6E40               	movwf	?_vfpfcnvrt^0,c
  3160  001BF0  EF15  F00E         	goto	l1215
  3161  001BF4                     l2530:
  3162                           
  3163                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1362:     fputc((
      +                          int)(*fmt)[0], fp);
  3164  001BF4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3165  001BF8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3166  001BFC  CFDE FFF6          	movff	postinc2,tblptrl
  3167  001C00  CFDD FFF7          	movff	postdec2,tblptrh
  3168  001C04                     	if	0	;tblptru may be non-zero
  3169  001C04                     	endif
  3170  001C04                     	if	0	;tblptru may be non-zero
  3171  001C04                     	endif
  3172  001C04  0008               	tblrd		*
  3173  001C06  50F5               	movf	tablat,w,c
  3174  001C08  6E01               	movwf	fputc@c^0,c
  3175  001C0A  6A02               	clrf	(fputc@c+1)^0,c
  3176  001C0C  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3177  001C10  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3178  001C14  EC5E  F011         	call	_fputc	;wreg free
  3179  001C18                     
  3180                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1363:     ++*fmt;
  3181  001C18  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3182  001C1C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3183  001C20  2ADE               	incf	postinc2,f,c
  3184  001C22  0E00               	movlw	0
  3185  001C24  22DD               	addwfc	postdec2,f,c
  3186  001C26  EFE7  F00D         	goto	l2520
  3187  001C2A                     l1215:
  3188  001C2A  0012               	return		;funcret
  3189  001C2C                     __end_of_vfpfcnvrt:
  3190                           	callstack 0
  3191                           
  3192 ;; *************** function _dtoa *****************
  3193 ;; Defined at:
  3194 ;;		line 274 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  3197 ;;		 -> sprintf@f(6), 
  3198 ;;  d               8   29[COMRAM] long long 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;  n               8   53[COMRAM] long long 
  3201 ;;  i               2   61[COMRAM] int 
  3202 ;;  s               2   51[COMRAM] int 
  3203 ;;  w               2   49[COMRAM] int 
  3204 ;;  p               2   47[COMRAM] int 
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  2   27[COMRAM] int 
  3207 ;; Registers used:
  3208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : 0/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3214 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3215 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3216 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3217 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3218 ;;Total ram usage:       36 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; Hardware stack levels required when called:    5
  3221 ;; This function calls:
  3222 ;;		___aodiv
  3223 ;;		___aomod
  3224 ;;		_abs
  3225 ;;		_pad
  3226 ;; This function is called by:
  3227 ;;		_vfpfcnvrt
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           	psect	text10
  3232  001794                     __ptext10:
  3233                           	callstack 0
  3234  001794                     _dtoa:
  3235                           	callstack 20
  3236  001794                     
  3237                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 274: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\d
      +                          oprnt.c: 275: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 27
      +                          6:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprn
      +                          t.c: 277:     long long n;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\d
      +                          oprnt.c: 280:     n = d;
  3238  001794  C01E  F036         	movff	dtoa@d,dtoa@n
  3239  001798  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  3240  00179C  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  3241  0017A0  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  3242  0017A4  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  3243  0017A8  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  3244  0017AC  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  3245  0017B0  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  3246  0017B4                     
  3247                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 281:     s = n < 
      +                          0 ? 1 : 0;
  3248  0017B4  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  3249  0017B6  EFDF  F00B         	goto	u1691
  3250  0017BA  EFE2  F00B         	goto	u1690
  3251  0017BE                     u1691:
  3252  0017BE  0E01               	movlw	1
  3253  0017C0  EFE3  F00B         	goto	u1700
  3254  0017C4                     u1690:
  3255  0017C4  0E00               	movlw	0
  3256  0017C6                     u1700:
  3257  0017C6  6E34               	movwf	dtoa@s^0,c
  3258  0017C8  6A35               	clrf	(dtoa@s+1)^0,c
  3259                           
  3260                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 282:     if (s) {
  3261  0017CA  5034               	movf	dtoa@s^0,w,c
  3262  0017CC  1035               	iorwf	(dtoa@s+1)^0,w,c
  3263  0017CE  B4D8               	btfsc	status,2,c
  3264  0017D0  EFEC  F00B         	goto	u1711
  3265  0017D4  EFEE  F00B         	goto	u1710
  3266  0017D8                     u1711:
  3267  0017D8  EFFE  F00B         	goto	l2424
  3268  0017DC                     u1710:
  3269  0017DC                     
  3270                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 283:         n = 
      +                          -n;
  3271  0017DC  1E3D               	comf	(dtoa@n+7)^0,f,c
  3272  0017DE  1E3C               	comf	(dtoa@n+6)^0,f,c
  3273  0017E0  1E3B               	comf	(dtoa@n+5)^0,f,c
  3274  0017E2  1E3A               	comf	(dtoa@n+4)^0,f,c
  3275  0017E4  1E39               	comf	(dtoa@n+3)^0,f,c
  3276  0017E6  1E38               	comf	(dtoa@n+2)^0,f,c
  3277  0017E8  1E37               	comf	(dtoa@n+1)^0,f,c
  3278  0017EA  6C36               	negf	dtoa@n^0,c
  3279  0017EC  0E00               	movlw	0
  3280  0017EE  2237               	addwfc	(dtoa@n+1)^0,f,c
  3281  0017F0  2238               	addwfc	(dtoa@n+2)^0,f,c
  3282  0017F2  2239               	addwfc	(dtoa@n+3)^0,f,c
  3283  0017F4  223A               	addwfc	(dtoa@n+4)^0,f,c
  3284  0017F6  223B               	addwfc	(dtoa@n+5)^0,f,c
  3285  0017F8  223C               	addwfc	(dtoa@n+6)^0,f,c
  3286  0017FA  223D               	addwfc	(dtoa@n+7)^0,f,c
  3287  0017FC                     l2424:
  3288                           
  3289                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 287:     if (!(pr
      +                          ec < 0)) {
  3290  0017FC  0100               	movlb	0	; () banked
  3291  0017FE  BFC3               	btfsc	(_prec+1)& (0+255),7,b
  3292  001800  EF04  F00C         	goto	u1721
  3293  001804  EF06  F00C         	goto	u1720
  3294  001808                     u1721:
  3295  001808  EF07  F00C         	goto	l2428
  3296  00180C                     u1720:
  3297  00180C                     
  3298                           ; BSR set to: 0
  3299                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 288:         flag
      +                          s &= ~(1 << 1);
  3300  00180C  93C4               	bcf	_flags& (0+255),1,b
  3301  00180E                     l2428:
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 290:     p = (0 <
      +                           prec) ? prec : 1;
  3305  00180E  BFC3               	btfsc	(_prec+1)& (0+255),7,b
  3306  001810  EF14  F00C         	goto	u1730
  3307  001814  51C3               	movf	(_prec+1)& (0+255),w,b
  3308  001816  E106               	bnz	u1731
  3309  001818  05C2               	decf	_prec& (0+255),w,b
  3310  00181A  B0D8               	btfsc	status,0,c
  3311  00181C  EF12  F00C         	goto	u1731
  3312  001820  EF14  F00C         	goto	u1730
  3313  001824                     u1731:
  3314  001824  EF1A  F00C         	goto	l1188
  3315  001828                     u1730:
  3316  001828                     
  3317                           ; BSR set to: 0
  3318  001828  0E00               	movlw	0
  3319  00182A  6E31               	movwf	(dtoa@p+1)^0,c
  3320  00182C  0E01               	movlw	1
  3321  00182E  6E30               	movwf	dtoa@p^0,c
  3322  001830  EF1E  F00C         	goto	l1190
  3323  001834                     l1188:
  3324                           
  3325                           ; BSR set to: 0
  3326  001834  C0C2  F030         	movff	_prec,dtoa@p
  3327  001838  C0C3  F031         	movff	_prec+1,dtoa@p+1
  3328  00183C                     l1190:
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 291:     w = widt
      +                          h;
  3332  00183C  C0C0  F032         	movff	_width,dtoa@w
  3333  001840  C0C1  F033         	movff	_width+1,dtoa@w+1
  3334  001844                     
  3335                           ; BSR set to: 0
  3336                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 292:     if (s ||
      +                           (flags & (1 << 2))) {
  3337  001844  5034               	movf	dtoa@s^0,w,c
  3338  001846  1035               	iorwf	(dtoa@s+1)^0,w,c
  3339  001848  A4D8               	btfss	status,2,c
  3340  00184A  EF29  F00C         	goto	u1741
  3341  00184E  EF2B  F00C         	goto	u1740
  3342  001852                     u1741:
  3343  001852  EF32  F00C         	goto	l2436
  3344  001856                     u1740:
  3345  001856                     
  3346                           ; BSR set to: 0
  3347  001856  A5C4               	btfss	_flags& (0+255),2,b
  3348  001858  EF30  F00C         	goto	u1751
  3349  00185C  EF32  F00C         	goto	u1750
  3350  001860                     u1751:
  3351  001860  EF35  F00C         	goto	l2438
  3352  001864                     u1750:
  3353  001864                     l2436:
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 293:         --w;
  3357  001864  0632               	decf	dtoa@w^0,f,c
  3358  001866  A0D8               	btfss	status,0,c
  3359  001868  0633               	decf	(dtoa@w+1)^0,f,c
  3360  00186A                     l2438:
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 297:     i = size
      +                          of(dbuf) - 1;
  3364  00186A  0E00               	movlw	0
  3365  00186C  6E3F               	movwf	(dtoa@i+1)^0,c
  3366  00186E  0E1F               	movlw	31
  3367  001870  6E3E               	movwf	dtoa@i^0,c
  3368  001872                     
  3369                           ; BSR set to: 0
  3370                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 298:     dbuf[i] 
      +                          = '\0';
  3371  001872  0E00               	movlw	0
  3372  001874  0101               	movlb	1	; () banked
  3373  001876  6F6F               	movwf	(_dbuf+31)& (0+255),b
  3374                           
  3375                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 299:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3376  001878  EFBA  F00C         	goto	l2452
  3377  00187C                     l2442:
  3378                           
  3379                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 300:         --i;
  3380  00187C  063E               	decf	dtoa@i^0,f,c
  3381  00187E  A0D8               	btfss	status,0,c
  3382  001880  063F               	decf	(dtoa@i+1)^0,f,c
  3383  001882                     
  3384                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 301:         dbuf
      +                          [i] = '0' + abs(n % 10);
  3385  001882  0E50               	movlw	low _dbuf
  3386  001884  243E               	addwf	dtoa@i^0,w,c
  3387  001886  6ED9               	movwf	fsr2l,c
  3388  001888  0E01               	movlw	high _dbuf
  3389  00188A  203F               	addwfc	(dtoa@i+1)^0,w,c
  3390  00188C  6EDA               	movwf	fsr2h,c
  3391  00188E  C036  F001         	movff	dtoa@n,___aomod@dividend
  3392  001892  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  3393  001896  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  3394  00189A  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  3395  00189E  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  3396  0018A2  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  3397  0018A6  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  3398  0018AA  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  3399  0018AE  0E0A               	movlw	10
  3400  0018B0  6E09               	movwf	___aomod@divisor^0,c
  3401  0018B2  0E00               	movlw	0
  3402  0018B4  6E0A               	movwf	(___aomod@divisor+1)^0,c
  3403  0018B6  0E00               	movlw	0
  3404  0018B8  6E0B               	movwf	(___aomod@divisor+2)^0,c
  3405  0018BA  0E00               	movlw	0
  3406  0018BC  6E0C               	movwf	(___aomod@divisor+3)^0,c
  3407  0018BE  0E00               	movlw	0
  3408  0018C0  6E0D               	movwf	(___aomod@divisor+4)^0,c
  3409  0018C2  0E00               	movlw	0
  3410  0018C4  6E0E               	movwf	(___aomod@divisor+5)^0,c
  3411  0018C6  0E00               	movlw	0
  3412  0018C8  6E0F               	movwf	(___aomod@divisor+6)^0,c
  3413  0018CA  0E00               	movlw	0
  3414  0018CC  6E10               	movwf	(___aomod@divisor+7)^0,c
  3415  0018CE  ECAD  F00F         	call	___aomod	;wreg free
  3416  0018D2  C001  F026         	movff	?___aomod,??_dtoa
  3417  0018D6  C002  F027         	movff	?___aomod+1,??_dtoa+1
  3418  0018DA  C003  F028         	movff	?___aomod+2,??_dtoa+2
  3419  0018DE  C004  F029         	movff	?___aomod+3,??_dtoa+3
  3420  0018E2  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  3421  0018E6  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  3422  0018EA  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  3423  0018EE  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  3424  0018F2  C026  F013         	movff	??_dtoa,abs@a
  3425  0018F6  C028  F014         	movff	??_dtoa+2,abs@a+1
  3426  0018FA  ECBF  F013         	call	_abs	;wreg free
  3427  0018FE  5013               	movf	?_abs^0,w,c
  3428  001900  0F30               	addlw	48
  3429  001902  6EDF               	movwf	indf2,c
  3430  001904                     
  3431                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 302:         --p;
  3432  001904  0630               	decf	dtoa@p^0,f,c
  3433  001906  A0D8               	btfss	status,0,c
  3434  001908  0631               	decf	(dtoa@p+1)^0,f,c
  3435  00190A                     
  3436                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 303:         --w;
  3437  00190A  0632               	decf	dtoa@w^0,f,c
  3438  00190C  A0D8               	btfss	status,0,c
  3439  00190E  0633               	decf	(dtoa@w+1)^0,f,c
  3440  001910                     
  3441                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 304:         n = 
      +                          n / 10;
  3442  001910  C036  F001         	movff	dtoa@n,___aodiv@dividend
  3443  001914  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  3444  001918  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  3445  00191C  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  3446  001920  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  3447  001924  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  3448  001928  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  3449  00192C  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  3450  001930  0E0A               	movlw	10
  3451  001932  6E09               	movwf	___aodiv@divisor^0,c
  3452  001934  0E00               	movlw	0
  3453  001936  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  3454  001938  0E00               	movlw	0
  3455  00193A  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  3456  00193C  0E00               	movlw	0
  3457  00193E  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  3458  001940  0E00               	movlw	0
  3459  001942  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  3460  001944  0E00               	movlw	0
  3461  001946  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  3462  001948  0E00               	movlw	0
  3463  00194A  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  3464  00194C  0E00               	movlw	0
  3465  00194E  6E10               	movwf	(___aodiv@divisor+7)^0,c
  3466  001950  ECE9  F00E         	call	___aodiv	;wreg free
  3467  001954  C001  F036         	movff	?___aodiv,dtoa@n
  3468  001958  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  3469  00195C  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  3470  001960  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  3471  001964  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  3472  001968  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  3473  00196C  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  3474  001970  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  3475  001974                     l2452:
  3476                           
  3477                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 299:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3478  001974  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  3479  001976  EFC5  F00C         	goto	u1761
  3480  00197A  503F               	movf	(dtoa@i+1)^0,w,c
  3481  00197C  E108               	bnz	u1760
  3482  00197E  043E               	decf	dtoa@i^0,w,c
  3483  001980  A0D8               	btfss	status,0,c
  3484  001982  EFC5  F00C         	goto	u1761
  3485  001986  EFC7  F00C         	goto	u1760
  3486  00198A                     u1761:
  3487  00198A  EFF8  F00C         	goto	l2462
  3488  00198E                     u1760:
  3489  00198E  5036               	movf	dtoa@n^0,w,c
  3490  001990  1037               	iorwf	(dtoa@n+1)^0,w,c
  3491  001992  1038               	iorwf	(dtoa@n+2)^0,w,c
  3492  001994  1039               	iorwf	(dtoa@n+3)^0,w,c
  3493  001996  103A               	iorwf	(dtoa@n+4)^0,w,c
  3494  001998  103B               	iorwf	(dtoa@n+5)^0,w,c
  3495  00199A  103C               	iorwf	(dtoa@n+6)^0,w,c
  3496  00199C  103D               	iorwf	(dtoa@n+7)^0,w,c
  3497  00199E  A4D8               	btfss	status,2,c
  3498  0019A0  EFD4  F00C         	goto	u1771
  3499  0019A4  EFD6  F00C         	goto	u1770
  3500  0019A8                     u1771:
  3501  0019A8  EF3E  F00C         	goto	l2442
  3502  0019AC                     u1770:
  3503  0019AC  BE31               	btfsc	(dtoa@p+1)^0,7,c
  3504  0019AE  EFE3  F00C         	goto	u1780
  3505  0019B2  5031               	movf	(dtoa@p+1)^0,w,c
  3506  0019B4  E106               	bnz	u1781
  3507  0019B6  0430               	decf	dtoa@p^0,w,c
  3508  0019B8  B0D8               	btfsc	status,0,c
  3509  0019BA  EFE1  F00C         	goto	u1781
  3510  0019BE  EFE3  F00C         	goto	u1780
  3511  0019C2                     u1781:
  3512  0019C2  EF3E  F00C         	goto	l2442
  3513  0019C6                     u1780:
  3514  0019C6  BE33               	btfsc	(dtoa@w+1)^0,7,c
  3515  0019C8  EFEE  F00C         	goto	u1791
  3516  0019CC  5033               	movf	(dtoa@w+1)^0,w,c
  3517  0019CE  E108               	bnz	u1790
  3518  0019D0  0432               	decf	dtoa@w^0,w,c
  3519  0019D2  A0D8               	btfss	status,0,c
  3520  0019D4  EFEE  F00C         	goto	u1791
  3521  0019D8  EFF0  F00C         	goto	u1790
  3522  0019DC                     u1791:
  3523  0019DC  EFF8  F00C         	goto	l2462
  3524  0019E0                     u1790:
  3525  0019E0  0100               	movlb	0	; () banked
  3526  0019E2  B3C4               	btfsc	_flags& (0+255),1,b
  3527  0019E4  EFF6  F00C         	goto	u1801
  3528  0019E8  EFF8  F00C         	goto	u1800
  3529  0019EC                     u1801:
  3530  0019EC  EF3E  F00C         	goto	l2442
  3531  0019F0                     u1800:
  3532  0019F0                     l2462:
  3533                           
  3534                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 308:     if (s ||
      +                           (flags & (1 << 2))) {
  3535  0019F0  5034               	movf	dtoa@s^0,w,c
  3536  0019F2  1035               	iorwf	(dtoa@s+1)^0,w,c
  3537  0019F4  A4D8               	btfss	status,2,c
  3538  0019F6  EFFF  F00C         	goto	u1811
  3539  0019FA  EF01  F00D         	goto	u1810
  3540  0019FE                     u1811:
  3541  0019FE  EF09  F00D         	goto	l2466
  3542  001A02                     u1810:
  3543  001A02  0100               	movlb	0	; () banked
  3544  001A04  A5C4               	btfss	_flags& (0+255),2,b
  3545  001A06  EF07  F00D         	goto	u1821
  3546  001A0A  EF09  F00D         	goto	u1820
  3547  001A0E                     u1821:
  3548  001A0E  EF27  F00D         	goto	l2476
  3549  001A12                     u1820:
  3550  001A12                     l2466:
  3551                           
  3552                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 309:         --i;
  3553  001A12  063E               	decf	dtoa@i^0,f,c
  3554  001A14  A0D8               	btfss	status,0,c
  3555  001A16  063F               	decf	(dtoa@i+1)^0,f,c
  3556  001A18                     
  3557                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 310:         dbuf
      +                          [i] = s ? '-' : '+';
  3558  001A18  5034               	movf	dtoa@s^0,w,c
  3559  001A1A  1035               	iorwf	(dtoa@s+1)^0,w,c
  3560  001A1C  A4D8               	btfss	status,2,c
  3561  001A1E  EF13  F00D         	goto	u1831
  3562  001A22  EF15  F00D         	goto	u1830
  3563  001A26                     u1831:
  3564  001A26  EF1B  F00D         	goto	l2472
  3565  001A2A                     u1830:
  3566  001A2A  0E00               	movlw	0
  3567  001A2C  6E2F               	movwf	(_dtoa$2789+1)^0,c
  3568  001A2E  0E2B               	movlw	43
  3569  001A30  6E2E               	movwf	_dtoa$2789^0,c
  3570  001A32  EF1F  F00D         	goto	l2474
  3571  001A36                     l2472:
  3572  001A36  0E00               	movlw	0
  3573  001A38  6E2F               	movwf	(_dtoa$2789+1)^0,c
  3574  001A3A  0E2D               	movlw	45
  3575  001A3C  6E2E               	movwf	_dtoa$2789^0,c
  3576  001A3E                     l2474:
  3577  001A3E  0E50               	movlw	low _dbuf
  3578  001A40  243E               	addwf	dtoa@i^0,w,c
  3579  001A42  6ED9               	movwf	fsr2l,c
  3580  001A44  0E01               	movlw	high _dbuf
  3581  001A46  203F               	addwfc	(dtoa@i+1)^0,w,c
  3582  001A48  6EDA               	movwf	fsr2h,c
  3583  001A4A  C02E  FFDF         	movff	_dtoa$2789,indf2
  3584  001A4E                     l2476:
  3585                           
  3586                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 314:     return p
      +                          ad(fp, &dbuf[i], w);
  3587  001A4E  C01C  F011         	movff	dtoa@fp,pad@fp
  3588  001A52  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  3589  001A56  0E50               	movlw	low _dbuf
  3590  001A58  243E               	addwf	dtoa@i^0,w,c
  3591  001A5A  6E13               	movwf	pad@buf^0,c
  3592  001A5C  0E01               	movlw	high _dbuf
  3593  001A5E  203F               	addwfc	(dtoa@i+1)^0,w,c
  3594  001A60  6E14               	movwf	(pad@buf+1)^0,c
  3595  001A62  C032  F015         	movff	dtoa@w,pad@p
  3596  001A66  C033  F016         	movff	dtoa@w+1,pad@p+1
  3597  001A6A  ECC3  F011         	call	_pad	;wreg free
  3598  001A6E  C011  F01C         	movff	?_pad,?_dtoa
  3599  001A72  C012  F01D         	movff	?_pad+1,?_dtoa+1
  3600  001A76  0012               	return		;funcret
  3601  001A78                     __end_of_dtoa:
  3602                           	callstack 0
  3603                           
  3604 ;; *************** function _pad *****************
  3605 ;; Defined at:
  3606 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  3609 ;;		 -> sprintf@f(6), 
  3610 ;;  buf             2   18[COMRAM] PTR unsigned char 
  3611 ;;		 -> dbuf(32), 
  3612 ;;  p               2   20[COMRAM] int 
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  w               2   25[COMRAM] int 
  3615 ;;  i               2   23[COMRAM] int 
  3616 ;; Return value:  Size  Location     Type
  3617 ;;                  2   16[COMRAM] int 
  3618 ;; Registers used:
  3619 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3625 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;Total ram usage:       11 bytes
  3630 ;; Hardware stack levels used:    1
  3631 ;; Hardware stack levels required when called:    4
  3632 ;; This function calls:
  3633 ;;		_fputc
  3634 ;;		_fputs
  3635 ;;		_strlen
  3636 ;; This function is called by:
  3637 ;;		_dtoa
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           	psect	text11
  3642  002386                     __ptext11:
  3643                           	callstack 0
  3644  002386                     _pad:
  3645                           	callstack 20
  3646  002386                     
  3647                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  3648  002386  0100               	movlb	0	; () banked
  3649  002388  A1C4               	btfss	_flags& (0+255),0,b
  3650  00238A  EFC9  F011         	goto	u1641
  3651  00238E  EFCB  F011         	goto	u1640
  3652  002392                     u1641:
  3653  002392  EFD5  F011         	goto	l2396
  3654  002396                     u1640:
  3655  002396                     
  3656                           ; BSR set to: 0
  3657                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  3658  002396  C013  F00A         	movff	pad@buf,fputs@s
  3659  00239A  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3660  00239E  C011  F00C         	movff	pad@fp,fputs@fp
  3661  0023A2  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3662  0023A6  EC9D  F013         	call	_fputs	;wreg free
  3663  0023AA                     l2396:
  3664                           
  3665                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  3666  0023AA  BE16               	btfsc	(pad@p+1)^0,7,c
  3667  0023AC  EFDA  F011         	goto	u1651
  3668  0023B0  EFDC  F011         	goto	u1650
  3669  0023B4                     u1651:
  3670  0023B4  EFE2  F011         	goto	l2400
  3671  0023B8                     u1650:
  3672  0023B8  C015  F01A         	movff	pad@p,pad@w
  3673  0023BC  C016  F01B         	movff	pad@p+1,pad@w+1
  3674  0023C0  EFE6  F011         	goto	l1177
  3675  0023C4                     l2400:
  3676  0023C4  0E00               	movlw	0
  3677  0023C6  6E1B               	movwf	(pad@w+1)^0,c
  3678  0023C8  0E00               	movlw	0
  3679  0023CA  6E1A               	movwf	pad@w^0,c
  3680  0023CC                     l1177:
  3681                           
  3682                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  3683  0023CC  0E00               	movlw	0
  3684  0023CE  6E19               	movwf	(pad@i+1)^0,c
  3685  0023D0  0E00               	movlw	0
  3686  0023D2  6E18               	movwf	pad@i^0,c
  3687                           
  3688                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  3689  0023D4  EFF8  F011         	goto	l2406
  3690  0023D8                     l2402:
  3691                           
  3692                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  3693  0023D8  0E00               	movlw	0
  3694  0023DA  6E02               	movwf	(fputc@c+1)^0,c
  3695  0023DC  0E20               	movlw	32
  3696  0023DE  6E01               	movwf	fputc@c^0,c
  3697  0023E0  C011  F003         	movff	pad@fp,fputc@fp
  3698  0023E4  C012  F004         	movff	pad@fp+1,fputc@fp+1
  3699  0023E8  EC5E  F011         	call	_fputc	;wreg free
  3700  0023EC                     
  3701                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 86:         ++i;
  3702  0023EC  4A18               	infsnz	pad@i^0,f,c
  3703  0023EE  2A19               	incf	(pad@i+1)^0,f,c
  3704  0023F0                     l2406:
  3705                           
  3706                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  3707  0023F0  501A               	movf	pad@w^0,w,c
  3708  0023F2  5C18               	subwf	pad@i^0,w,c
  3709  0023F4  5019               	movf	(pad@i+1)^0,w,c
  3710  0023F6  0A80               	xorlw	128
  3711  0023F8  6E17               	movwf	??_pad^0,c
  3712  0023FA  501B               	movf	(pad@w+1)^0,w,c
  3713  0023FC  0A80               	xorlw	128
  3714  0023FE  5817               	subwfb	??_pad^0,w,c
  3715  002400  A0D8               	btfss	status,0,c
  3716  002402  EF05  F012         	goto	u1661
  3717  002406  EF07  F012         	goto	u1660
  3718  00240A                     u1661:
  3719  00240A  EFEC  F011         	goto	l2402
  3720  00240E                     u1660:
  3721  00240E                     
  3722                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  3723  00240E  0100               	movlb	0	; () banked
  3724  002410  B1C4               	btfsc	_flags& (0+255),0,b
  3725  002412  EF0D  F012         	goto	u1671
  3726  002416  EF0F  F012         	goto	u1670
  3727  00241A                     u1671:
  3728  00241A  EF19  F012         	goto	l2410
  3729  00241E                     u1670:
  3730  00241E                     
  3731                           ; BSR set to: 0
  3732                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  3733  00241E  C013  F00A         	movff	pad@buf,fputs@s
  3734  002422  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3735  002426  C011  F00C         	movff	pad@fp,fputs@fp
  3736  00242A  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3737  00242E  EC9D  F013         	call	_fputs	;wreg free
  3738  002432                     l2410:
  3739                           
  3740                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 94:     return st
      +                          rlen(buf) + w;
  3741  002432  C013  F001         	movff	pad@buf,strlen@s
  3742  002436  C014  F002         	movff	pad@buf+1,strlen@s+1
  3743  00243A  ECDF  F013         	call	_strlen	;wreg free
  3744  00243E  501A               	movf	pad@w^0,w,c
  3745  002440  2401               	addwf	?_strlen^0,w,c
  3746  002442  6E11               	movwf	?_pad^0,c
  3747  002444  501B               	movf	(pad@w+1)^0,w,c
  3748  002446  2002               	addwfc	(?_strlen+1)^0,w,c
  3749  002448  6E12               	movwf	(?_pad+1)^0,c
  3750  00244A  0012               	return		;funcret
  3751  00244C                     __end_of_pad:
  3752                           	callstack 0
  3753                           
  3754 ;; *************** function _strlen *****************
  3755 ;; Defined at:
  3756 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\strlen.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  s               2    0[COMRAM] PTR const unsigned char 
  3759 ;;		 -> dbuf(32), 
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  a               2    2[COMRAM] PTR const unsigned char 
  3762 ;;		 -> dbuf(32), 
  3763 ;; Return value:  Size  Location     Type
  3764 ;;                  2    0[COMRAM] unsigned int 
  3765 ;; Registers used:
  3766 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3772 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;Total ram usage:        4 bytes
  3777 ;; Hardware stack levels used:    1
  3778 ;; Hardware stack levels required when called:    1
  3779 ;; This function calls:
  3780 ;;		Nothing
  3781 ;; This function is called by:
  3782 ;;		_pad
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           	psect	text12
  3787  0027BE                     __ptext12:
  3788                           	callstack 0
  3789  0027BE                     _strlen:
  3790                           	callstack 22
  3791  0027BE  C001  F003         	movff	strlen@s,strlen@a
  3792  0027C2  C002  F004         	movff	strlen@s+1,strlen@a+1
  3793  0027C6  EFE7  F013         	goto	l2306
  3794  0027CA                     l2304:
  3795  0027CA  4A01               	infsnz	strlen@s^0,f,c
  3796  0027CC  2A02               	incf	(strlen@s+1)^0,f,c
  3797  0027CE                     l2306:
  3798  0027CE  C001  FFD9         	movff	strlen@s,fsr2l
  3799  0027D2  C002  FFDA         	movff	strlen@s+1,fsr2h
  3800  0027D6  50DF               	movf	indf2,w,c
  3801  0027D8  A4D8               	btfss	status,2,c
  3802  0027DA  EFF1  F013         	goto	u1501
  3803  0027DE  EFF3  F013         	goto	u1500
  3804  0027E2                     u1501:
  3805  0027E2  EFE5  F013         	goto	l2304
  3806  0027E6                     u1500:
  3807  0027E6  5003               	movf	strlen@a^0,w,c
  3808  0027E8  5C01               	subwf	strlen@s^0,w,c
  3809  0027EA  6E01               	movwf	?_strlen^0,c
  3810  0027EC  5004               	movf	(strlen@a+1)^0,w,c
  3811  0027EE  5802               	subwfb	(strlen@s+1)^0,w,c
  3812  0027F0  6E02               	movwf	(?_strlen+1)^0,c
  3813  0027F2  0012               	return		;funcret
  3814  0027F4                     __end_of_strlen:
  3815                           	callstack 0
  3816                           
  3817 ;; *************** function _fputs *****************
  3818 ;; Defined at:
  3819 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\nf_fputs.c"
  3820 ;; Parameters:    Size  Location     Type
  3821 ;;  s               2    9[COMRAM] PTR const unsigned char 
  3822 ;;		 -> dbuf(32), 
  3823 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  3824 ;;		 -> sprintf@f(6), 
  3825 ;; Auto vars:     Size  Location     Type
  3826 ;;  i               2   14[COMRAM] int 
  3827 ;;  c               1   13[COMRAM] unsigned char 
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  2    9[COMRAM] int 
  3830 ;; Registers used:
  3831 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3837 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3840 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3841 ;;Total ram usage:        7 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; Hardware stack levels required when called:    3
  3844 ;; This function calls:
  3845 ;;		_fputc
  3846 ;; This function is called by:
  3847 ;;		_pad
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text13
  3852  00273A                     __ptext13:
  3853                           	callstack 0
  3854  00273A                     _fputs:
  3855                           	callstack 20
  3856  00273A  0E00               	movlw	0
  3857  00273C  6E10               	movwf	(fputs@i+1)^0,c
  3858  00273E  0E00               	movlw	0
  3859  002740  6E0F               	movwf	fputs@i^0,c
  3860  002742  EFAE  F013         	goto	l2300
  3861  002746                     l2296:
  3862  002746  C00E  F001         	movff	fputs@c,fputc@c
  3863  00274A  6A02               	clrf	(fputc@c+1)^0,c
  3864  00274C  C00C  F003         	movff	fputs@fp,fputc@fp
  3865  002750  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  3866  002754  EC5E  F011         	call	_fputc	;wreg free
  3867  002758  4A0F               	infsnz	fputs@i^0,f,c
  3868  00275A  2A10               	incf	(fputs@i+1)^0,f,c
  3869  00275C                     l2300:
  3870  00275C  500F               	movf	fputs@i^0,w,c
  3871  00275E  240A               	addwf	fputs@s^0,w,c
  3872  002760  6ED9               	movwf	fsr2l,c
  3873  002762  5010               	movf	(fputs@i+1)^0,w,c
  3874  002764  200B               	addwfc	(fputs@s+1)^0,w,c
  3875  002766  6EDA               	movwf	fsr2h,c
  3876  002768  50DF               	movf	indf2,w,c
  3877  00276A  6E0E               	movwf	fputs@c^0,c
  3878  00276C  500E               	movf	fputs@c^0,w,c
  3879  00276E  A4D8               	btfss	status,2,c
  3880  002770  EFBC  F013         	goto	u1491
  3881  002774  EFBE  F013         	goto	u1490
  3882  002778                     u1491:
  3883  002778  EFA3  F013         	goto	l2296
  3884  00277C                     u1490:
  3885  00277C  0012               	return		;funcret
  3886  00277E                     __end_of_fputs:
  3887                           	callstack 0
  3888                           
  3889 ;; *************** function _fputc *****************
  3890 ;; Defined at:
  3891 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\nf_fputc.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;  c               2    0[COMRAM] int 
  3894 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  3895 ;;		 -> sprintf@f(6), 
  3896 ;; Auto vars:     Size  Location     Type
  3897 ;;		None
  3898 ;; Return value:  Size  Location     Type
  3899 ;;                  2    0[COMRAM] int 
  3900 ;; Registers used:
  3901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3902 ;; Tracked objects:
  3903 ;;		On entry : 0/0
  3904 ;;		On exit  : 0/0
  3905 ;;		Unchanged: 0/0
  3906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3907 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3910 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;Total ram usage:        9 bytes
  3912 ;; Hardware stack levels used:    1
  3913 ;; Hardware stack levels required when called:    2
  3914 ;; This function calls:
  3915 ;;		_putch
  3916 ;; This function is called by:
  3917 ;;		_pad
  3918 ;;		_vfpfcnvrt
  3919 ;;		_fputs
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           
  3923                           	psect	text14
  3924  0022BC                     __ptext14:
  3925                           	callstack 0
  3926  0022BC                     _fputc:
  3927                           	callstack 23
  3928  0022BC  5003               	movf	fputc@fp^0,w,c
  3929  0022BE  1004               	iorwf	(fputc@fp+1)^0,w,c
  3930  0022C0  B4D8               	btfsc	status,2,c
  3931  0022C2  EF65  F011         	goto	u1451
  3932  0022C6  EF67  F011         	goto	u1450
  3933  0022CA                     u1451:
  3934  0022CA  EF70  F011         	goto	l2284
  3935  0022CE                     u1450:
  3936  0022CE  5003               	movf	fputc@fp^0,w,c
  3937  0022D0  1004               	iorwf	(fputc@fp+1)^0,w,c
  3938  0022D2  A4D8               	btfss	status,2,c
  3939  0022D4  EF6E  F011         	goto	u1461
  3940  0022D8  EF70  F011         	goto	u1460
  3941  0022DC                     u1461:
  3942  0022DC  EF75  F011         	goto	l2286
  3943  0022E0                     u1460:
  3944  0022E0                     l2284:
  3945  0022E0  5001               	movf	fputc@c^0,w,c
  3946  0022E2  EC91  F014         	call	_putch
  3947  0022E6  EFC2  F011         	goto	l1241
  3948  0022EA                     l2286:
  3949  0022EA  EE20 F004          	lfsr	2,4
  3950  0022EE  5003               	movf	fputc@fp^0,w,c
  3951  0022F0  26D9               	addwf	fsr2l,f,c
  3952  0022F2  5004               	movf	(fputc@fp+1)^0,w,c
  3953  0022F4  22DA               	addwfc	fsr2h,f,c
  3954  0022F6  50DE               	movf	postinc2,w,c
  3955  0022F8  10DE               	iorwf	postinc2,w,c
  3956  0022FA  B4D8               	btfsc	status,2,c
  3957  0022FC  EF82  F011         	goto	u1471
  3958  002300  EF84  F011         	goto	u1470
  3959  002304                     u1471:
  3960  002304  EF9F  F011         	goto	l2290
  3961  002308                     u1470:
  3962  002308  EE20 F004          	lfsr	2,4
  3963  00230C  5003               	movf	fputc@fp^0,w,c
  3964  00230E  26D9               	addwf	fsr2l,f,c
  3965  002310  5004               	movf	(fputc@fp+1)^0,w,c
  3966  002312  22DA               	addwfc	fsr2h,f,c
  3967  002314  EE10 F002          	lfsr	1,2
  3968  002318  5003               	movf	fputc@fp^0,w,c
  3969  00231A  26E1               	addwf	fsr1l,f,c
  3970  00231C  5004               	movf	(fputc@fp+1)^0,w,c
  3971  00231E  22E2               	addwfc	fsr1h,f,c
  3972  002320  50DE               	movf	postinc2,w,c
  3973  002322  5CE6               	subwf	postinc1,w,c
  3974  002324  50E6               	movf	postinc1,w,c
  3975  002326  0A80               	xorlw	128
  3976  002328  6E09               	movwf	(??_fputc+4)^0,c
  3977  00232A  50DE               	movf	postinc2,w,c
  3978  00232C  0A80               	xorlw	128
  3979  00232E  5809               	subwfb	(??_fputc+4)^0,w,c
  3980  002330  B0D8               	btfsc	status,0,c
  3981  002332  EF9D  F011         	goto	u1481
  3982  002336  EF9F  F011         	goto	u1480
  3983  00233A                     u1481:
  3984  00233A  EFC2  F011         	goto	l1241
  3985  00233E                     u1480:
  3986  00233E                     l2290:
  3987  00233E  EE20 F002          	lfsr	2,2
  3988  002342  5003               	movf	fputc@fp^0,w,c
  3989  002344  26D9               	addwf	fsr2l,f,c
  3990  002346  5004               	movf	(fputc@fp+1)^0,w,c
  3991  002348  22DA               	addwfc	fsr2h,f,c
  3992  00234A  CFDE F005          	movff	postinc2,??_fputc
  3993  00234E  CFDD F006          	movff	postdec2,??_fputc+1
  3994  002352  C003  FFD9         	movff	fputc@fp,fsr2l
  3995  002356  C004  FFDA         	movff	fputc@fp+1,fsr2h
  3996  00235A  CFDE F007          	movff	postinc2,??_fputc+2
  3997  00235E  CFDD F008          	movff	postdec2,??_fputc+3
  3998  002362  5005               	movf	??_fputc^0,w,c
  3999  002364  2407               	addwf	(??_fputc+2)^0,w,c
  4000  002366  6ED9               	movwf	fsr2l,c
  4001  002368  5006               	movf	(??_fputc+1)^0,w,c
  4002  00236A  2008               	addwfc	(??_fputc+3)^0,w,c
  4003  00236C  6EDA               	movwf	fsr2h,c
  4004  00236E  C001  FFDF         	movff	fputc@c,indf2
  4005  002372  EE20 F002          	lfsr	2,2
  4006  002376  5003               	movf	fputc@fp^0,w,c
  4007  002378  26D9               	addwf	fsr2l,f,c
  4008  00237A  5004               	movf	(fputc@fp+1)^0,w,c
  4009  00237C  22DA               	addwfc	fsr2h,f,c
  4010  00237E  2ADE               	incf	postinc2,f,c
  4011  002380  0E00               	movlw	0
  4012  002382  22DD               	addwfc	postdec2,f,c
  4013  002384                     l1241:
  4014  002384  0012               	return		;funcret
  4015  002386                     __end_of_fputc:
  4016                           	callstack 0
  4017                           
  4018 ;; *************** function _putch *****************
  4019 ;; Defined at:
  4020 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\putch.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  c               1    wreg     unsigned char 
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;  c               1    0[COMRAM] unsigned char 
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  1    wreg      void 
  4027 ;; Registers used:
  4028 ;;		wreg
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;Total ram usage:        0 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    1
  4041 ;; This function calls:
  4042 ;;		Nothing
  4043 ;; This function is called by:
  4044 ;;		_fputc
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           	psect	text15
  4049  002922                     __ptext15:
  4050                           	callstack 0
  4051  002922                     _putch:
  4052                           	callstack 23
  4053  002922  0012               	return		;funcret
  4054  002924                     __end_of_putch:
  4055                           	callstack 0
  4056                           
  4057 ;; *************** function _abs *****************
  4058 ;; Defined at:
  4059 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\abs.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  a               2   18[COMRAM] int 
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;		None
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  2   18[COMRAM] int 
  4066 ;; Registers used:
  4067 ;;		wreg, status,2, status,0
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4073 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;Total ram usage:        4 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    1
  4080 ;; This function calls:
  4081 ;;		Nothing
  4082 ;; This function is called by:
  4083 ;;		_dtoa
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           	psect	text16
  4088  00277E                     __ptext16:
  4089                           	callstack 0
  4090  00277E                     _abs:
  4091                           	callstack 23
  4092  00277E  BE14               	btfsc	(abs@a+1)^0,7,c
  4093  002780  EFCC  F013         	goto	u1680
  4094  002784  5014               	movf	(abs@a+1)^0,w,c
  4095  002786  E106               	bnz	u1681
  4096  002788  0413               	decf	abs@a^0,w,c
  4097  00278A  B0D8               	btfsc	status,0,c
  4098  00278C  EFCA  F013         	goto	u1681
  4099  002790  EFCC  F013         	goto	u1680
  4100  002794                     u1681:
  4101  002794  EFDA  F013         	goto	l1226
  4102  002798                     u1680:
  4103  002798  C013  F015         	movff	abs@a,??_abs
  4104  00279C  C014  F016         	movff	abs@a+1,??_abs+1
  4105  0027A0  1E15               	comf	??_abs^0,f,c
  4106  0027A2  1E16               	comf	(??_abs+1)^0,f,c
  4107  0027A4  4A15               	infsnz	??_abs^0,f,c
  4108  0027A6  2A16               	incf	(??_abs+1)^0,f,c
  4109  0027A8  C015  F013         	movff	??_abs,?_abs
  4110  0027AC  C016  F014         	movff	??_abs+1,?_abs+1
  4111  0027B0  EFDE  F013         	goto	l1229
  4112  0027B4                     l1226:
  4113  0027B4  C013  F013         	movff	abs@a,?_abs
  4114  0027B8  C014  F014         	movff	abs@a+1,?_abs+1
  4115  0027BC                     l1229:
  4116  0027BC  0012               	return		;funcret
  4117  0027BE                     __end_of_abs:
  4118                           	callstack 0
  4119                           
  4120 ;; *************** function ___aomod *****************
  4121 ;; Defined at:
  4122 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aomod.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  dividend        8    0[COMRAM] long long 
  4125 ;;  divisor         8    8[COMRAM] long long 
  4126 ;; Auto vars:     Size  Location     Type
  4127 ;;  sign            1   17[COMRAM] unsigned char 
  4128 ;;  counter         1   16[COMRAM] unsigned char 
  4129 ;; Return value:  Size  Location     Type
  4130 ;;                  8    0[COMRAM] long long 
  4131 ;; Registers used:
  4132 ;;		wreg, status,2, status,0
  4133 ;; Tracked objects:
  4134 ;;		On entry : 0/0
  4135 ;;		On exit  : 0/0
  4136 ;;		Unchanged: 0/0
  4137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4138 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4139 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4141 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4142 ;;Total ram usage:       18 bytes
  4143 ;; Hardware stack levels used:    1
  4144 ;; Hardware stack levels required when called:    1
  4145 ;; This function calls:
  4146 ;;		Nothing
  4147 ;; This function is called by:
  4148 ;;		_dtoa
  4149 ;; This function uses a non-reentrant model
  4150 ;;
  4151                           
  4152                           	psect	text17
  4153  001F5A                     __ptext17:
  4154                           	callstack 0
  4155  001F5A                     ___aomod:
  4156                           	callstack 23
  4157  001F5A  0E00               	movlw	0
  4158  001F5C  6E12               	movwf	___aomod@sign^0,c
  4159  001F5E  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  4160  001F60  EFB6  F00F         	goto	u1580
  4161  001F64  EFB4  F00F         	goto	u1581
  4162  001F68                     u1581:
  4163  001F68  EFC8  F00F         	goto	l2364
  4164  001F6C                     u1580:
  4165  001F6C  1E08               	comf	(___aomod@dividend+7)^0,f,c
  4166  001F6E  1E07               	comf	(___aomod@dividend+6)^0,f,c
  4167  001F70  1E06               	comf	(___aomod@dividend+5)^0,f,c
  4168  001F72  1E05               	comf	(___aomod@dividend+4)^0,f,c
  4169  001F74  1E04               	comf	(___aomod@dividend+3)^0,f,c
  4170  001F76  1E03               	comf	(___aomod@dividend+2)^0,f,c
  4171  001F78  1E02               	comf	(___aomod@dividend+1)^0,f,c
  4172  001F7A  6C01               	negf	___aomod@dividend^0,c
  4173  001F7C  0E00               	movlw	0
  4174  001F7E  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  4175  001F80  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  4176  001F82  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  4177  001F84  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  4178  001F86  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  4179  001F88  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  4180  001F8A  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  4181  001F8C  0E01               	movlw	1
  4182  001F8E  6E12               	movwf	___aomod@sign^0,c
  4183  001F90                     l2364:
  4184  001F90  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  4185  001F92  EFCF  F00F         	goto	u1590
  4186  001F96  EFCD  F00F         	goto	u1591
  4187  001F9A                     u1591:
  4188  001F9A  EFDF  F00F         	goto	l2368
  4189  001F9E                     u1590:
  4190  001F9E  1E10               	comf	(___aomod@divisor+7)^0,f,c
  4191  001FA0  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  4192  001FA2  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  4193  001FA4  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  4194  001FA6  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  4195  001FA8  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  4196  001FAA  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  4197  001FAC  6C09               	negf	___aomod@divisor^0,c
  4198  001FAE  0E00               	movlw	0
  4199  001FB0  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  4200  001FB2  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  4201  001FB4  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  4202  001FB6  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  4203  001FB8  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  4204  001FBA  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  4205  001FBC  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  4206  001FBE                     l2368:
  4207  001FBE  5009               	movf	___aomod@divisor^0,w,c
  4208  001FC0  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  4209  001FC2  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  4210  001FC4  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  4211  001FC6  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  4212  001FC8  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  4213  001FCA  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  4214  001FCC  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  4215  001FCE  B4D8               	btfsc	status,2,c
  4216  001FD0  EFEC  F00F         	goto	u1601
  4217  001FD4  EFEE  F00F         	goto	u1600
  4218  001FD8                     u1601:
  4219  001FD8  EF36  F010         	goto	l2384
  4220  001FDC                     u1600:
  4221  001FDC  0E01               	movlw	1
  4222  001FDE  6E11               	movwf	___aomod@counter^0,c
  4223  001FE0  EFFC  F00F         	goto	l2374
  4224  001FE4                     l2372:
  4225  001FE4  90D8               	bcf	status,0,c
  4226  001FE6  3609               	rlcf	___aomod@divisor^0,f,c
  4227  001FE8  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  4228  001FEA  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  4229  001FEC  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  4230  001FEE  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  4231  001FF0  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  4232  001FF2  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  4233  001FF4  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  4234  001FF6  2A11               	incf	___aomod@counter^0,f,c
  4235  001FF8                     l2374:
  4236  001FF8  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  4237  001FFA  EF01  F010         	goto	u1611
  4238  001FFE  EF03  F010         	goto	u1610
  4239  002002                     u1611:
  4240  002002  EFF2  F00F         	goto	l2372
  4241  002006                     u1610:
  4242  002006                     l2376:
  4243  002006  5009               	movf	___aomod@divisor^0,w,c
  4244  002008  5C01               	subwf	___aomod@dividend^0,w,c
  4245  00200A  500A               	movf	(___aomod@divisor+1)^0,w,c
  4246  00200C  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  4247  00200E  500B               	movf	(___aomod@divisor+2)^0,w,c
  4248  002010  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  4249  002012  500C               	movf	(___aomod@divisor+3)^0,w,c
  4250  002014  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  4251  002016  500D               	movf	(___aomod@divisor+4)^0,w,c
  4252  002018  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  4253  00201A  500E               	movf	(___aomod@divisor+5)^0,w,c
  4254  00201C  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  4255  00201E  500F               	movf	(___aomod@divisor+6)^0,w,c
  4256  002020  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  4257  002022  5010               	movf	(___aomod@divisor+7)^0,w,c
  4258  002024  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  4259  002026  A0D8               	btfss	status,0,c
  4260  002028  EF18  F010         	goto	u1621
  4261  00202C  EF1A  F010         	goto	u1620
  4262  002030                     u1621:
  4263  002030  EF2A  F010         	goto	l2380
  4264  002034                     u1620:
  4265  002034  5009               	movf	___aomod@divisor^0,w,c
  4266  002036  5E01               	subwf	___aomod@dividend^0,f,c
  4267  002038  500A               	movf	(___aomod@divisor+1)^0,w,c
  4268  00203A  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  4269  00203C  500B               	movf	(___aomod@divisor+2)^0,w,c
  4270  00203E  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  4271  002040  500C               	movf	(___aomod@divisor+3)^0,w,c
  4272  002042  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  4273  002044  500D               	movf	(___aomod@divisor+4)^0,w,c
  4274  002046  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  4275  002048  500E               	movf	(___aomod@divisor+5)^0,w,c
  4276  00204A  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  4277  00204C  500F               	movf	(___aomod@divisor+6)^0,w,c
  4278  00204E  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  4279  002050  5010               	movf	(___aomod@divisor+7)^0,w,c
  4280  002052  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  4281  002054                     l2380:
  4282  002054  90D8               	bcf	status,0,c
  4283  002056  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  4284  002058  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  4285  00205A  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  4286  00205C  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  4287  00205E  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  4288  002060  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  4289  002062  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  4290  002064  3209               	rrcf	___aomod@divisor^0,f,c
  4291  002066  2E11               	decfsz	___aomod@counter^0,f,c
  4292  002068  EF03  F010         	goto	l2376
  4293  00206C                     l2384:
  4294  00206C  5012               	movf	___aomod@sign^0,w,c
  4295  00206E  B4D8               	btfsc	status,2,c
  4296  002070  EF3C  F010         	goto	u1631
  4297  002074  EF3E  F010         	goto	u1630
  4298  002078                     u1631:
  4299  002078  EF4E  F010         	goto	l2388
  4300  00207C                     u1630:
  4301  00207C  1E08               	comf	(___aomod@dividend+7)^0,f,c
  4302  00207E  1E07               	comf	(___aomod@dividend+6)^0,f,c
  4303  002080  1E06               	comf	(___aomod@dividend+5)^0,f,c
  4304  002082  1E05               	comf	(___aomod@dividend+4)^0,f,c
  4305  002084  1E04               	comf	(___aomod@dividend+3)^0,f,c
  4306  002086  1E03               	comf	(___aomod@dividend+2)^0,f,c
  4307  002088  1E02               	comf	(___aomod@dividend+1)^0,f,c
  4308  00208A  6C01               	negf	___aomod@dividend^0,c
  4309  00208C  0E00               	movlw	0
  4310  00208E  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  4311  002090  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  4312  002092  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  4313  002094  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  4314  002096  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  4315  002098  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  4316  00209A  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  4317  00209C                     l2388:
  4318  00209C  C001  F001         	movff	___aomod@dividend,?___aomod
  4319  0020A0  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  4320  0020A4  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  4321  0020A8  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  4322  0020AC  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  4323  0020B0  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  4324  0020B4  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  4325  0020B8  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  4326  0020BC  0012               	return		;funcret
  4327  0020BE                     __end_of___aomod:
  4328                           	callstack 0
  4329                           
  4330 ;; *************** function ___aodiv *****************
  4331 ;; Defined at:
  4332 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aodiv.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  dividend        8    0[COMRAM] long long 
  4335 ;;  divisor         8    8[COMRAM] long long 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  quotient        8   18[COMRAM] long long 
  4338 ;;  sign            1   17[COMRAM] unsigned char 
  4339 ;;  counter         1   16[COMRAM] unsigned char 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  8    0[COMRAM] long long 
  4342 ;; Registers used:
  4343 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4349 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4352 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;Total ram usage:       26 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    1
  4356 ;; This function calls:
  4357 ;;		Nothing
  4358 ;; This function is called by:
  4359 ;;		_dtoa
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           	psect	text18
  4364  001DD2                     __ptext18:
  4365                           	callstack 0
  4366  001DD2                     ___aodiv:
  4367                           	callstack 23
  4368  001DD2  0E00               	movlw	0
  4369  001DD4  6E12               	movwf	___aodiv@sign^0,c
  4370  001DD6  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  4371  001DD8  EFF2  F00E         	goto	u1510
  4372  001DDC  EFF0  F00E         	goto	u1511
  4373  001DE0                     u1511:
  4374  001DE0  EF04  F00F         	goto	l2320
  4375  001DE4                     u1510:
  4376  001DE4  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  4377  001DE6  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  4378  001DE8  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  4379  001DEA  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  4380  001DEC  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  4381  001DEE  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  4382  001DF0  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  4383  001DF2  6C09               	negf	___aodiv@divisor^0,c
  4384  001DF4  0E00               	movlw	0
  4385  001DF6  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  4386  001DF8  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  4387  001DFA  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  4388  001DFC  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  4389  001DFE  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  4390  001E00  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  4391  001E02  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  4392  001E04  0E01               	movlw	1
  4393  001E06  6E12               	movwf	___aodiv@sign^0,c
  4394  001E08                     l2320:
  4395  001E08  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  4396  001E0A  EF0B  F00F         	goto	u1520
  4397  001E0E  EF09  F00F         	goto	u1521
  4398  001E12                     u1521:
  4399  001E12  EF1D  F00F         	goto	l2326
  4400  001E16                     u1520:
  4401  001E16  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  4402  001E18  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  4403  001E1A  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  4404  001E1C  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  4405  001E1E  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  4406  001E20  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  4407  001E22  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  4408  001E24  6C01               	negf	___aodiv@dividend^0,c
  4409  001E26  0E00               	movlw	0
  4410  001E28  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  4411  001E2A  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  4412  001E2C  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  4413  001E2E  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  4414  001E30  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  4415  001E32  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  4416  001E34  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  4417  001E36  0E01               	movlw	1
  4418  001E38  1A12               	xorwf	___aodiv@sign^0,f,c
  4419  001E3A                     l2326:
  4420  001E3A  EE20  F013         	lfsr	2,___aodiv@quotient
  4421  001E3E  0E07               	movlw	7
  4422  001E40                     u1531:
  4423  001E40  6ADE               	clrf	postinc2,c
  4424  001E42  06E8               	decf	wreg,f,c
  4425  001E44  E2FD               	bc	u1531
  4426  001E46  5009               	movf	___aodiv@divisor^0,w,c
  4427  001E48  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  4428  001E4A  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  4429  001E4C  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  4430  001E4E  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  4431  001E50  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  4432  001E52  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  4433  001E54  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  4434  001E56  B4D8               	btfsc	status,2,c
  4435  001E58  EF30  F00F         	goto	u1541
  4436  001E5C  EF32  F00F         	goto	u1540
  4437  001E60                     u1541:
  4438  001E60  EF84  F00F         	goto	l2348
  4439  001E64                     u1540:
  4440  001E64  0E01               	movlw	1
  4441  001E66  6E11               	movwf	___aodiv@counter^0,c
  4442  001E68  EF40  F00F         	goto	l2334
  4443  001E6C                     l2332:
  4444  001E6C  90D8               	bcf	status,0,c
  4445  001E6E  3609               	rlcf	___aodiv@divisor^0,f,c
  4446  001E70  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  4447  001E72  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  4448  001E74  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  4449  001E76  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  4450  001E78  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  4451  001E7A  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  4452  001E7C  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  4453  001E7E  2A11               	incf	___aodiv@counter^0,f,c
  4454  001E80                     l2334:
  4455  001E80  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  4456  001E82  EF45  F00F         	goto	u1551
  4457  001E86  EF47  F00F         	goto	u1550
  4458  001E8A                     u1551:
  4459  001E8A  EF36  F00F         	goto	l2332
  4460  001E8E                     u1550:
  4461  001E8E                     l2336:
  4462  001E8E  90D8               	bcf	status,0,c
  4463  001E90  3613               	rlcf	___aodiv@quotient^0,f,c
  4464  001E92  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  4465  001E94  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  4466  001E96  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  4467  001E98  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  4468  001E9A  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  4469  001E9C  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  4470  001E9E  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  4471  001EA0  5009               	movf	___aodiv@divisor^0,w,c
  4472  001EA2  5C01               	subwf	___aodiv@dividend^0,w,c
  4473  001EA4  500A               	movf	(___aodiv@divisor+1)^0,w,c
  4474  001EA6  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  4475  001EA8  500B               	movf	(___aodiv@divisor+2)^0,w,c
  4476  001EAA  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  4477  001EAC  500C               	movf	(___aodiv@divisor+3)^0,w,c
  4478  001EAE  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  4479  001EB0  500D               	movf	(___aodiv@divisor+4)^0,w,c
  4480  001EB2  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  4481  001EB4  500E               	movf	(___aodiv@divisor+5)^0,w,c
  4482  001EB6  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  4483  001EB8  500F               	movf	(___aodiv@divisor+6)^0,w,c
  4484  001EBA  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  4485  001EBC  5010               	movf	(___aodiv@divisor+7)^0,w,c
  4486  001EBE  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  4487  001EC0  A0D8               	btfss	status,0,c
  4488  001EC2  EF65  F00F         	goto	u1561
  4489  001EC6  EF67  F00F         	goto	u1560
  4490  001ECA                     u1561:
  4491  001ECA  EF78  F00F         	goto	l2344
  4492  001ECE                     u1560:
  4493  001ECE  5009               	movf	___aodiv@divisor^0,w,c
  4494  001ED0  5E01               	subwf	___aodiv@dividend^0,f,c
  4495  001ED2  500A               	movf	(___aodiv@divisor+1)^0,w,c
  4496  001ED4  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  4497  001ED6  500B               	movf	(___aodiv@divisor+2)^0,w,c
  4498  001ED8  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  4499  001EDA  500C               	movf	(___aodiv@divisor+3)^0,w,c
  4500  001EDC  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  4501  001EDE  500D               	movf	(___aodiv@divisor+4)^0,w,c
  4502  001EE0  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  4503  001EE2  500E               	movf	(___aodiv@divisor+5)^0,w,c
  4504  001EE4  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  4505  001EE6  500F               	movf	(___aodiv@divisor+6)^0,w,c
  4506  001EE8  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  4507  001EEA  5010               	movf	(___aodiv@divisor+7)^0,w,c
  4508  001EEC  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  4509  001EEE  8013               	bsf	___aodiv@quotient^0,0,c
  4510  001EF0                     l2344:
  4511  001EF0  90D8               	bcf	status,0,c
  4512  001EF2  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  4513  001EF4  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  4514  001EF6  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  4515  001EF8  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  4516  001EFA  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  4517  001EFC  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  4518  001EFE  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  4519  001F00  3209               	rrcf	___aodiv@divisor^0,f,c
  4520  001F02  2E11               	decfsz	___aodiv@counter^0,f,c
  4521  001F04  EF47  F00F         	goto	l2336
  4522  001F08                     l2348:
  4523  001F08  5012               	movf	___aodiv@sign^0,w,c
  4524  001F0A  B4D8               	btfsc	status,2,c
  4525  001F0C  EF8A  F00F         	goto	u1571
  4526  001F10  EF8C  F00F         	goto	u1570
  4527  001F14                     u1571:
  4528  001F14  EF9C  F00F         	goto	l2352
  4529  001F18                     u1570:
  4530  001F18  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  4531  001F1A  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  4532  001F1C  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  4533  001F1E  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  4534  001F20  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  4535  001F22  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  4536  001F24  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  4537  001F26  6C13               	negf	___aodiv@quotient^0,c
  4538  001F28  0E00               	movlw	0
  4539  001F2A  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  4540  001F2C  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  4541  001F2E  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  4542  001F30  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  4543  001F32  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  4544  001F34  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  4545  001F36  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  4546  001F38                     l2352:
  4547  001F38  C013  F001         	movff	___aodiv@quotient,?___aodiv
  4548  001F3C  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  4549  001F40  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  4550  001F44  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  4551  001F48  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  4552  001F4C  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  4553  001F50  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  4554  001F54  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  4555  001F58  0012               	return		;funcret
  4556  001F5A                     __end_of___aodiv:
  4557                           	callstack 0
  4558                           
  4559 ;; *************** function _eepromWrite *****************
  4560 ;; Defined at:
  4561 ;;		line 57 in file "fs_eeprom.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;  address         2    0[COMRAM] unsigned short 
  4564 ;;  data            1    2[COMRAM] unsigned char 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;		None
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  1    wreg      void 
  4569 ;; Registers used:
  4570 ;;		wreg, status,2
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4576 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;Total ram usage:        3 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    1
  4583 ;; This function calls:
  4584 ;;		Nothing
  4585 ;; This function is called by:
  4586 ;;		_stateMachine
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           	psect	text19
  4591  00285A                     __ptext19:
  4592                           	callstack 0
  4593  00285A                     _eepromWrite:
  4594                           	callstack 27
  4595  00285A                     
  4596                           ;fs_eeprom.c: 57: void eepromWrite(uint16_t address, uint8_t data);fs_eeprom.c: 58: {;fs
      +                          _eeprom.c: 60:     EEADRH = (uint8_t)(address >> 8);
  4597  00285A  5002               	movf	(eepromWrite@address+1)^0,w,c
  4598  00285C  6EAA               	movwf	170,c	;volatile
  4599  00285E                     
  4600                           ;fs_eeprom.c: 61:     EEADR = (uint8_t)address;
  4601  00285E  C001  FFA9         	movff	eepromWrite@address,4009	;volatile
  4602  002862                     
  4603                           ;fs_eeprom.c: 63:     EEDATA = data;
  4604  002862  C003  FFA8         	movff	eepromWrite@data,4008	;volatile
  4605  002866                     
  4606                           ;fs_eeprom.c: 64:     EECON1bits.EEPGD = 0;
  4607  002866  9EA6               	bcf	166,7,c	;volsfr
  4608  002868                     
  4609                           ;fs_eeprom.c: 65:     EECON1bits.CFGS = 0;
  4610  002868  9CA6               	bcf	166,6,c	;volsfr
  4611  00286A                     
  4612                           ;fs_eeprom.c: 66:     EECON1bits.WREN = 1;
  4613  00286A  84A6               	bsf	166,2,c	;volsfr
  4614                           
  4615                           ;fs_eeprom.c: 70:     EECON2 = 0x55;
  4616  00286C  0E55               	movlw	85
  4617  00286E  6EA7               	movwf	167,c	;volsfr
  4618                           
  4619                           ;fs_eeprom.c: 71:     EECON2 = 0xAA;
  4620  002870  0EAA               	movlw	170
  4621  002872  6EA7               	movwf	167,c	;volsfr
  4622  002874                     
  4623                           ;fs_eeprom.c: 72:     EECON1bits.WR = 1;
  4624  002874  82A6               	bsf	166,1,c	;volsfr
  4625  002876                     l461:
  4626                           
  4627                           ;fs_eeprom.c: 75:     while(PIR2bits.EEIF == 0)
  4628  002876  A8A1               	btfss	161,4,c	;volatile
  4629  002878  EF40  F014         	goto	u1981
  4630  00287C  EF42  F014         	goto	u1980
  4631  002880                     u1981:
  4632  002880  EF3B  F014         	goto	l461
  4633  002884                     u1980:
  4634  002884                     
  4635                           ;fs_eeprom.c: 80:     PIR2bits.EEIF = 0;
  4636  002884  98A1               	bcf	161,4,c	;volatile
  4637                           
  4638                           ;fs_eeprom.c: 81:     EECON1bits.WREN = 0;
  4639  002886  94A6               	bcf	166,2,c	;volsfr
  4640  002888  0012               	return		;funcret
  4641  00288A                     __end_of_eepromWrite:
  4642                           	callstack 0
  4643                           
  4644 ;; *************** function _Lcd_Write_String *****************
  4645 ;; Defined at:
  4646 ;;		line 146 in file "fs_lcd.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;  a               2    4[COMRAM] PTR unsigned char 
  4649 ;;		 -> STR_13(17), STR_11(17), STR_9(17), STR_7(17), 
  4650 ;;		 -> STR_5(17), STR_3(16), STR_1(17), stateMachine@textCursor2(16), 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;  i               2    8[COMRAM] int 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  1    wreg      void 
  4655 ;; Registers used:
  4656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4662 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;Total ram usage:        6 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    3
  4669 ;; This function calls:
  4670 ;;		_Lcd_Write_Char
  4671 ;; This function is called by:
  4672 ;;		_stateMachine
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           	psect	text20
  4677  0024E2                     __ptext20:
  4678                           	callstack 0
  4679  0024E2                     _Lcd_Write_String:
  4680                           	callstack 25
  4681  0024E2                     
  4682                           ;fs_lcd.c: 146: void Lcd_Write_String(char *a);fs_lcd.c: 147: {;fs_lcd.c: 148:    int i;
      +                          ;fs_lcd.c: 149:    for(i=0;a[i]!='\0';i++)
  4683  0024E2  0E00               	movlw	0
  4684  0024E4  6E0A               	movwf	(Lcd_Write_String@i+1)^0,c
  4685  0024E6  0E00               	movlw	0
  4686  0024E8  6E09               	movwf	Lcd_Write_String@i^0,c
  4687  0024EA  EF92  F012         	goto	l2598
  4688  0024EE                     l2594:
  4689                           
  4690                           ;fs_lcd.c: 150:    Lcd_Write_Char(a[i]);
  4691  0024EE  5009               	movf	Lcd_Write_String@i^0,w,c
  4692  0024F0  2405               	addwf	Lcd_Write_String@a^0,w,c
  4693  0024F2  6E07               	movwf	??_Lcd_Write_String^0,c
  4694  0024F4  500A               	movf	(Lcd_Write_String@i+1)^0,w,c
  4695  0024F6  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  4696  0024F8  6E08               	movwf	(??_Lcd_Write_String+1)^0,c
  4697  0024FA  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4698  0024FE  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4699  002502  0E00               	movlw	low (__smallconst shr (0+16))
  4700  002504  6EF8               	movwf	tblptru,c
  4701  002506  0E0F               	movlw	(high __ramtop+-1)
  4702  002508  64F7               	cpfsgt	tblptrh,c
  4703  00250A  D003               	bra	u1957
  4704  00250C  0008               	tblrd		*
  4705  00250E  50F5               	movf	tablat,w,c
  4706  002510  D005               	bra	u1950
  4707  002512                     u1957:
  4708  002512  CFF6 FFE9          	movff	tblptrl,fsr0l
  4709  002516  CFF7 FFEA          	movff	tblptrh,fsr0h
  4710  00251A  50EF               	movf	indf0,w,c
  4711  00251C                     u1950:
  4712  00251C  ECFA  F013         	call	_Lcd_Write_Char
  4713  002520  4A09               	infsnz	Lcd_Write_String@i^0,f,c
  4714  002522  2A0A               	incf	(Lcd_Write_String@i+1)^0,f,c
  4715  002524                     l2598:
  4716  002524  5009               	movf	Lcd_Write_String@i^0,w,c
  4717  002526  2405               	addwf	Lcd_Write_String@a^0,w,c
  4718  002528  6E07               	movwf	??_Lcd_Write_String^0,c
  4719  00252A  500A               	movf	(Lcd_Write_String@i+1)^0,w,c
  4720  00252C  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  4721  00252E  6E08               	movwf	(??_Lcd_Write_String+1)^0,c
  4722  002530  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4723  002534  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4724  002538  0E00               	movlw	low (__smallconst shr (0+16))
  4725  00253A  6EF8               	movwf	tblptru,c
  4726  00253C  0E0F               	movlw	(high __ramtop+-1)
  4727  00253E  64F7               	cpfsgt	tblptrh,c
  4728  002540  D003               	bra	u1967
  4729  002542  0008               	tblrd		*
  4730  002544  50F5               	movf	tablat,w,c
  4731  002546  D005               	bra	u1960
  4732  002548                     u1967:
  4733  002548  CFF6 FFE9          	movff	tblptrl,fsr0l
  4734  00254C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4735  002550  50EF               	movf	indf0,w,c
  4736  002552                     u1960:
  4737  002552  0900               	iorlw	0
  4738  002554  A4D8               	btfss	status,2,c
  4739  002556  EFAF  F012         	goto	u1971
  4740  00255A  EFB1  F012         	goto	u1970
  4741  00255E                     u1971:
  4742  00255E  EF77  F012         	goto	l2594
  4743  002562                     u1970:
  4744  002562  0012               	return		;funcret
  4745  002564                     __end_of_Lcd_Write_String:
  4746                           	callstack 0
  4747                           
  4748 ;; *************** function _Lcd_Write_Char *****************
  4749 ;; Defined at:
  4750 ;;		line 123 in file "fs_lcd.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;  a               1    wreg     unsigned char 
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;  a               1    3[COMRAM] unsigned char 
  4755 ;;  y               1    2[COMRAM] unsigned char 
  4756 ;;  temp            1    1[COMRAM] unsigned char 
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  1    wreg      void 
  4759 ;; Registers used:
  4760 ;;		wreg, status,2, status,0, cstack
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;Total ram usage:        3 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    2
  4773 ;; This function calls:
  4774 ;;		_Lcd_Port
  4775 ;; This function is called by:
  4776 ;;		_Lcd_Write_String
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           	psect	text21
  4781  0027F4                     __ptext21:
  4782                           	callstack 0
  4783  0027F4                     _Lcd_Write_Char:
  4784                           	callstack 25
  4785                           
  4786                           ;incstack = 0
  4787                           ;Lcd_Write_Char@a stored from wreg
  4788  0027F4  6E04               	movwf	Lcd_Write_Char@a^0,c
  4789  0027F6                     
  4790                           ;fs_lcd.c: 123: void Lcd_Write_Char(char a);fs_lcd.c: 124: {;fs_lcd.c: 125:    char temp
      +                          ,y;;fs_lcd.c: 126:    temp = a&0x0F;
  4791  0027F6  5004               	movf	Lcd_Write_Char@a^0,w,c
  4792  0027F8  0B0F               	andlw	15
  4793  0027FA  6E02               	movwf	Lcd_Write_Char@temp^0,c
  4794                           
  4795                           ;fs_lcd.c: 127:    y = a&0xF0;
  4796  0027FC  5004               	movf	Lcd_Write_Char@a^0,w,c
  4797  0027FE  0BF0               	andlw	240
  4798  002800  6E03               	movwf	Lcd_Write_Char@y^0,c
  4799  002802                     
  4800                           ;fs_lcd.c: 128:    PORTEbits.RE0 = 1;
  4801  002802  8084               	bsf	132,0,c	;volatile
  4802  002804                     
  4803                           ;fs_lcd.c: 129:    Lcd_Port(y>>4);
  4804  002804  3803               	swapf	Lcd_Write_Char@y^0,w,c
  4805  002806  0B0F               	andlw	15
  4806  002808  EC46  F013         	call	_Lcd_Port
  4807  00280C                     
  4808                           ;fs_lcd.c: 130:    PORTAbits.RA3 = 1;
  4809  00280C  8680               	bsf	128,3,c	;volatile
  4810  00280E                     
  4811                           ;fs_lcd.c: 131:    _delay((unsigned long)((30)*(64000000UL/4000000.0)));
  4812  00280E  0EA0               	movlw	160
  4813  002810                     u3937:
  4814  002810  2EE8               	decfsz	wreg,f,c
  4815  002812  D7FE               	bra	u3937
  4816  002814                     
  4817                           ;fs_lcd.c: 132:    PORTAbits.RA3 = 0;
  4818  002814  9680               	bcf	128,3,c	;volatile
  4819  002816                     
  4820                           ;fs_lcd.c: 133:    Lcd_Port(temp);
  4821  002816  5002               	movf	Lcd_Write_Char@temp^0,w,c
  4822  002818  EC46  F013         	call	_Lcd_Port
  4823  00281C                     
  4824                           ;fs_lcd.c: 134:    PORTAbits.RA3 = 1;
  4825  00281C  8680               	bsf	128,3,c	;volatile
  4826  00281E                     
  4827                           ;fs_lcd.c: 135:    _delay((unsigned long)((25)*(64000000UL/4000000.0)));
  4828  00281E  0E85               	movlw	133
  4829  002820                     u3947:
  4830  002820  2EE8               	decfsz	wreg,f,c
  4831  002822  D7FE               	bra	u3947
  4832  002824  F000               	nop	
  4833  002826                     
  4834                           ;fs_lcd.c: 136:    PORTAbits.RA3 = 0;
  4835  002826  9680               	bcf	128,3,c	;volatile
  4836  002828  0012               	return		;funcret
  4837  00282A                     __end_of_Lcd_Write_Char:
  4838                           	callstack 0
  4839                           
  4840 ;; *************** function _Lcd_Set_Cursor *****************
  4841 ;; Defined at:
  4842 ;;		line 53 in file "fs_lcd.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;  a               1    wreg     unsigned char 
  4845 ;;  b               1    3[COMRAM] unsigned char 
  4846 ;; Auto vars:     Size  Location     Type
  4847 ;;  a               1    4[COMRAM] unsigned char 
  4848 ;;  temp            1    7[COMRAM] unsigned char 
  4849 ;;  y               1    6[COMRAM] unsigned char 
  4850 ;;  z               1    5[COMRAM] unsigned char 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  1    wreg      void 
  4853 ;; Registers used:
  4854 ;;		wreg, status,2, status,0, cstack
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4860 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;Total ram usage:        5 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:    3
  4867 ;; This function calls:
  4868 ;;		_Lcd_Cmd
  4869 ;; This function is called by:
  4870 ;;		_stateMachine
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           	psect	text22
  4875  002564                     __ptext22:
  4876                           	callstack 0
  4877  002564                     _Lcd_Set_Cursor:
  4878                           	callstack 25
  4879                           
  4880                           ;incstack = 0
  4881                           ;Lcd_Set_Cursor@a stored from wreg
  4882  002564  6E05               	movwf	Lcd_Set_Cursor@a^0,c
  4883  002566                     
  4884                           ;fs_lcd.c: 53: void Lcd_Set_Cursor(char a, char b);fs_lcd.c: 54: {;fs_lcd.c: 55:    char
      +                           temp,z,y;;fs_lcd.c: 56:    if(a == 1)
  4885  002566  0405               	decf	Lcd_Set_Cursor@a^0,w,c
  4886  002568  A4D8               	btfss	status,2,c
  4887  00256A  EFB9  F012         	goto	u1931
  4888  00256E  EFBB  F012         	goto	u1930
  4889  002572                     u1931:
  4890  002572  EFCC  F012         	goto	l2584
  4891  002576                     u1930:
  4892  002576                     
  4893                           ;fs_lcd.c: 57:    {;fs_lcd.c: 58:      temp = 0x80 + b - 1;
  4894  002576  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  4895  002578  0F7F               	addlw	127
  4896  00257A  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  4897                           
  4898                           ;fs_lcd.c: 59:       z = temp>>4;
  4899  00257C  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4900  00257E  0B0F               	andlw	15
  4901  002580  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  4902                           
  4903                           ;fs_lcd.c: 60:       y = temp & 0x0F;
  4904  002582  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  4905  002584  0B0F               	andlw	15
  4906  002586  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  4907  002588                     
  4908                           ;fs_lcd.c: 61:       Lcd_Cmd(z);
  4909  002588  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  4910  00258A  EC67  F014         	call	_Lcd_Cmd
  4911  00258E                     
  4912                           ;fs_lcd.c: 62:       Lcd_Cmd(y);
  4913  00258E  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  4914  002590  EC67  F014         	call	_Lcd_Cmd
  4915                           
  4916                           ;fs_lcd.c: 63:    }
  4917  002594  EFE4  F012         	goto	l196
  4918  002598                     l2584:
  4919  002598  0E02               	movlw	2
  4920  00259A  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4921  00259C  A4D8               	btfss	status,2,c
  4922  00259E  EFD3  F012         	goto	u1941
  4923  0025A2  EFD5  F012         	goto	u1940
  4924  0025A6                     u1941:
  4925  0025A6  EFE4  F012         	goto	l196
  4926  0025AA                     u1940:
  4927  0025AA                     
  4928                           ;fs_lcd.c: 65:    {;fs_lcd.c: 66:       temp = 0xC0 + b - 1;
  4929  0025AA  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  4930  0025AC  0FBF               	addlw	191
  4931  0025AE  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  4932                           
  4933                           ;fs_lcd.c: 67:       z = temp>>4;
  4934  0025B0  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4935  0025B2  0B0F               	andlw	15
  4936  0025B4  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  4937                           
  4938                           ;fs_lcd.c: 68:       y = temp & 0x0F;
  4939  0025B6  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  4940  0025B8  0B0F               	andlw	15
  4941  0025BA  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  4942  0025BC                     
  4943                           ;fs_lcd.c: 69:       Lcd_Cmd(z);
  4944  0025BC  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  4945  0025BE  EC67  F014         	call	_Lcd_Cmd
  4946  0025C2                     
  4947                           ;fs_lcd.c: 70:       Lcd_Cmd(y);
  4948  0025C2  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  4949  0025C4  EC67  F014         	call	_Lcd_Cmd
  4950  0025C8                     l196:
  4951  0025C8  0012               	return		;funcret
  4952  0025CA                     __end_of_Lcd_Set_Cursor:
  4953                           	callstack 0
  4954                           
  4955 ;; *************** function _buttonControlFlags *****************
  4956 ;; Defined at:
  4957 ;;		line 72 in file "fs_menu_controller.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;		None
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  textCursor2    16    0[COMRAM] unsigned char [16]
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  1    wreg      void 
  4964 ;; Registers used:
  4965 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;Total ram usage:       16 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    1
  4978 ;; This function calls:
  4979 ;;		Nothing
  4980 ;; This function is called by:
  4981 ;;		_menuControl
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text23
  4986  001C2C                     __ptext23:
  4987                           	callstack 0
  4988  001C2C                     _buttonControlFlags:
  4989                           	callstack 28
  4990  001C2C                     
  4991                           ;fs_menu_controller.c: 74:     char textCursor2[16] = {0};
  4992  001C2C  EE20  F001         	lfsr	2,buttonControlFlags@textCursor2
  4993  001C30  0E0F               	movlw	15
  4994  001C32                     u2001:
  4995  001C32  6ADE               	clrf	postinc2,c
  4996  001C34  06E8               	decf	wreg,f,c
  4997  001C36  E2FD               	bc	u2001
  4998  001C38                     
  4999                           ;fs_menu_controller.c: 76:     if ((button_bounce_controller.menu == 0) && (PORTBbits.RB
      +                          2 == 0))
  5000  001C38  B05E               	btfsc	_button_bounce_controller^0,0,c
  5001  001C3A  EF21  F00E         	goto	u2011
  5002  001C3E  EF23  F00E         	goto	u2010
  5003  001C42                     u2011:
  5004  001C42  EF2D  F00E         	goto	l385
  5005  001C46                     u2010:
  5006  001C46  B481               	btfsc	129,2,c	;volatile
  5007  001C48  EF28  F00E         	goto	u2021
  5008  001C4C  EF2A  F00E         	goto	u2020
  5009  001C50                     u2021:
  5010  001C50  EF2D  F00E         	goto	l385
  5011  001C54                     u2020:
  5012  001C54                     
  5013                           ;fs_menu_controller.c: 77:     {;fs_menu_controller.c: 78:         button_bounce_control
      +                          ler.menu = 1;
  5014  001C54  805E               	bsf	_button_bounce_controller^0,0,c
  5015                           
  5016                           ;fs_menu_controller.c: 79:         menu_flags.menu_input_flag = 1;
  5017  001C56  0100               	movlb	0	; () banked
  5018  001C58  81C6               	bsf	_menu_flags& (0+255),0,b
  5019  001C5A                     l385:
  5020                           
  5021                           ;fs_menu_controller.c: 82:     if ((PORTBbits.RB2 == 1) && (button_bounce_controller.men
      +                          u == 1))
  5022  001C5A  A481               	btfss	129,2,c	;volatile
  5023  001C5C  EF32  F00E         	goto	u2031
  5024  001C60  EF34  F00E         	goto	u2030
  5025  001C64                     u2031:
  5026  001C64  EF3E  F00E         	goto	l386
  5027  001C68                     u2030:
  5028  001C68  A05E               	btfss	_button_bounce_controller^0,0,c
  5029  001C6A  EF39  F00E         	goto	u2041
  5030  001C6E  EF3B  F00E         	goto	u2040
  5031  001C72                     u2041:
  5032  001C72  EF3E  F00E         	goto	l386
  5033  001C76                     u2040:
  5034  001C76                     
  5035                           ;fs_menu_controller.c: 83:     {;fs_menu_controller.c: 84:         button_bounce_control
      +                          ler.menu = 0;
  5036  001C76  905E               	bcf	_button_bounce_controller^0,0,c
  5037                           
  5038                           ;fs_menu_controller.c: 85:         menu_flags.menu_input_flag = 0;
  5039  001C78  0100               	movlb	0	; () banked
  5040  001C7A  91C6               	bcf	_menu_flags& (0+255),0,b
  5041  001C7C                     l386:
  5042                           
  5043                           ;fs_menu_controller.c: 88:     if ((button_bounce_controller.pause == 0) && (PORTBbits.R
      +                          B3 == 0))
  5044  001C7C  B65E               	btfsc	_button_bounce_controller^0,3,c
  5045  001C7E  EF43  F00E         	goto	u2051
  5046  001C82  EF45  F00E         	goto	u2050
  5047  001C86                     u2051:
  5048  001C86  EF4F  F00E         	goto	l387
  5049  001C8A                     u2050:
  5050  001C8A  B681               	btfsc	129,3,c	;volatile
  5051  001C8C  EF4A  F00E         	goto	u2061
  5052  001C90  EF4C  F00E         	goto	u2060
  5053  001C94                     u2061:
  5054  001C94  EF4F  F00E         	goto	l387
  5055  001C98                     u2060:
  5056  001C98                     
  5057                           ;fs_menu_controller.c: 89:     {;fs_menu_controller.c: 90:         button_bounce_control
      +                          ler.pause = 1;
  5058  001C98  865E               	bsf	_button_bounce_controller^0,3,c
  5059                           
  5060                           ;fs_menu_controller.c: 91:         menu_flags.menu_pause_flag = 1;
  5061  001C9A  0100               	movlb	0	; () banked
  5062  001C9C  87C6               	bsf	_menu_flags& (0+255),3,b
  5063  001C9E                     l387:
  5064                           
  5065                           ;fs_menu_controller.c: 93:     if ((PORTBbits.RB3 == 1) && (button_bounce_controller.pau
      +                          se == 1))
  5066  001C9E  A681               	btfss	129,3,c	;volatile
  5067  001CA0  EF54  F00E         	goto	u2071
  5068  001CA4  EF56  F00E         	goto	u2070
  5069  001CA8                     u2071:
  5070  001CA8  EF60  F00E         	goto	l388
  5071  001CAC                     u2070:
  5072  001CAC  A65E               	btfss	_button_bounce_controller^0,3,c
  5073  001CAE  EF5B  F00E         	goto	u2081
  5074  001CB2  EF5D  F00E         	goto	u2080
  5075  001CB6                     u2081:
  5076  001CB6  EF60  F00E         	goto	l388
  5077  001CBA                     u2080:
  5078  001CBA                     
  5079                           ;fs_menu_controller.c: 94:     {;fs_menu_controller.c: 95:         button_bounce_control
      +                          ler.pause = 0;
  5080  001CBA  965E               	bcf	_button_bounce_controller^0,3,c
  5081                           
  5082                           ;fs_menu_controller.c: 96:         menu_flags.menu_pause_flag = 0;
  5083  001CBC  0100               	movlb	0	; () banked
  5084  001CBE  97C6               	bcf	_menu_flags& (0+255),3,b
  5085  001CC0                     l388:
  5086                           
  5087                           ;fs_menu_controller.c: 100:     if ((button_bounce_controller.start == 0) && (PORTAbits.
      +                          RA0 == 0))
  5088  001CC0  B25E               	btfsc	_button_bounce_controller^0,1,c
  5089  001CC2  EF65  F00E         	goto	u2091
  5090  001CC6  EF67  F00E         	goto	u2090
  5091  001CCA                     u2091:
  5092  001CCA  EF71  F00E         	goto	l389
  5093  001CCE                     u2090:
  5094  001CCE  B080               	btfsc	128,0,c	;volatile
  5095  001CD0  EF6C  F00E         	goto	u2101
  5096  001CD4  EF6E  F00E         	goto	u2100
  5097  001CD8                     u2101:
  5098  001CD8  EF71  F00E         	goto	l389
  5099  001CDC                     u2100:
  5100  001CDC                     
  5101                           ;fs_menu_controller.c: 101:     {;fs_menu_controller.c: 102:         button_bounce_contr
      +                          oller.start = 1;
  5102  001CDC  825E               	bsf	_button_bounce_controller^0,1,c
  5103                           
  5104                           ;fs_menu_controller.c: 103:         menu_flags.menu_start_flag = 1;
  5105  001CDE  0100               	movlb	0	; () banked
  5106  001CE0  83C6               	bsf	_menu_flags& (0+255),1,b
  5107  001CE2                     l389:
  5108                           
  5109                           ;fs_menu_controller.c: 105:     if ((PORTAbits.RA0 == 1) && (button_bounce_controller.st
      +                          art == 1))
  5110  001CE2  A080               	btfss	128,0,c	;volatile
  5111  001CE4  EF76  F00E         	goto	u2111
  5112  001CE8  EF78  F00E         	goto	u2110
  5113  001CEC                     u2111:
  5114  001CEC  EF82  F00E         	goto	l390
  5115  001CF0                     u2110:
  5116  001CF0  A25E               	btfss	_button_bounce_controller^0,1,c
  5117  001CF2  EF7D  F00E         	goto	u2121
  5118  001CF6  EF7F  F00E         	goto	u2120
  5119  001CFA                     u2121:
  5120  001CFA  EF82  F00E         	goto	l390
  5121  001CFE                     u2120:
  5122  001CFE                     
  5123                           ;fs_menu_controller.c: 106:     {;fs_menu_controller.c: 107:         button_bounce_contr
      +                          oller.start = 0;
  5124  001CFE  925E               	bcf	_button_bounce_controller^0,1,c
  5125                           
  5126                           ;fs_menu_controller.c: 108:         menu_flags.menu_start_flag = 0;
  5127  001D00  0100               	movlb	0	; () banked
  5128  001D02  93C6               	bcf	_menu_flags& (0+255),1,b
  5129  001D04                     l390:
  5130                           
  5131                           ;fs_menu_controller.c: 112:     if ((button_bounce_controller.stop == 0) && (PORTAbits.R
      +                          A5 == 0))
  5132  001D04  B45E               	btfsc	_button_bounce_controller^0,2,c
  5133  001D06  EF87  F00E         	goto	u2131
  5134  001D0A  EF89  F00E         	goto	u2130
  5135  001D0E                     u2131:
  5136  001D0E  EF93  F00E         	goto	l391
  5137  001D12                     u2130:
  5138  001D12  BA80               	btfsc	128,5,c	;volatile
  5139  001D14  EF8E  F00E         	goto	u2141
  5140  001D18  EF90  F00E         	goto	u2140
  5141  001D1C                     u2141:
  5142  001D1C  EF93  F00E         	goto	l391
  5143  001D20                     u2140:
  5144  001D20                     
  5145                           ;fs_menu_controller.c: 113:     {;fs_menu_controller.c: 114:         button_bounce_contr
      +                          oller.stop = 1;
  5146  001D20  845E               	bsf	_button_bounce_controller^0,2,c
  5147                           
  5148                           ;fs_menu_controller.c: 115:         menu_flags.menu_stop_flag = 1;
  5149  001D22  0100               	movlb	0	; () banked
  5150  001D24  85C6               	bsf	_menu_flags& (0+255),2,b
  5151  001D26                     l391:
  5152                           
  5153                           ;fs_menu_controller.c: 117:     if ((PORTAbits.RA5 == 1) && (button_bounce_controller.st
      +                          op == 1))
  5154  001D26  AA80               	btfss	128,5,c	;volatile
  5155  001D28  EF98  F00E         	goto	u2151
  5156  001D2C  EF9A  F00E         	goto	u2150
  5157  001D30                     u2151:
  5158  001D30  EFA4  F00E         	goto	l392
  5159  001D34                     u2150:
  5160  001D34  A45E               	btfss	_button_bounce_controller^0,2,c
  5161  001D36  EF9F  F00E         	goto	u2161
  5162  001D3A  EFA1  F00E         	goto	u2160
  5163  001D3E                     u2161:
  5164  001D3E  EFA4  F00E         	goto	l392
  5165  001D42                     u2160:
  5166  001D42                     
  5167                           ;fs_menu_controller.c: 118:     {;fs_menu_controller.c: 119:         button_bounce_contr
      +                          oller.stop = 0;
  5168  001D42  945E               	bcf	_button_bounce_controller^0,2,c
  5169                           
  5170                           ;fs_menu_controller.c: 120:         menu_flags.menu_stop_flag = 0;
  5171  001D44  0100               	movlb	0	; () banked
  5172  001D46  95C6               	bcf	_menu_flags& (0+255),2,b
  5173  001D48                     l392:
  5174                           
  5175                           ;fs_menu_controller.c: 124:     if ((button_bounce_controller.increase == 0) && (PORTBbi
      +                          ts.RB5 == 0))
  5176  001D48  BA5E               	btfsc	_button_bounce_controller^0,5,c
  5177  001D4A  EFA9  F00E         	goto	u2171
  5178  001D4E  EFAB  F00E         	goto	u2170
  5179  001D52                     u2171:
  5180  001D52  EFB5  F00E         	goto	l393
  5181  001D56                     u2170:
  5182  001D56  BA81               	btfsc	129,5,c	;volatile
  5183  001D58  EFB0  F00E         	goto	u2181
  5184  001D5C  EFB2  F00E         	goto	u2180
  5185  001D60                     u2181:
  5186  001D60  EFB5  F00E         	goto	l393
  5187  001D64                     u2180:
  5188  001D64                     
  5189                           ;fs_menu_controller.c: 125:     {;fs_menu_controller.c: 126:         button_bounce_contr
      +                          oller.increase = 1;
  5190  001D64  8A5E               	bsf	_button_bounce_controller^0,5,c
  5191                           
  5192                           ;fs_menu_controller.c: 127:         menu_flags.menu_increase_flag = 1;
  5193  001D66  0100               	movlb	0	; () banked
  5194  001D68  89C6               	bsf	_menu_flags& (0+255),4,b
  5195  001D6A                     l393:
  5196                           
  5197                           ;fs_menu_controller.c: 129:     if ((PORTBbits.RB5 == 1) && (button_bounce_controller.in
      +                          crease == 1))
  5198  001D6A  AA81               	btfss	129,5,c	;volatile
  5199  001D6C  EFBA  F00E         	goto	u2191
  5200  001D70  EFBC  F00E         	goto	u2190
  5201  001D74                     u2191:
  5202  001D74  EFC6  F00E         	goto	l394
  5203  001D78                     u2190:
  5204  001D78  AA5E               	btfss	_button_bounce_controller^0,5,c
  5205  001D7A  EFC1  F00E         	goto	u2201
  5206  001D7E  EFC3  F00E         	goto	u2200
  5207  001D82                     u2201:
  5208  001D82  EFC6  F00E         	goto	l394
  5209  001D86                     u2200:
  5210  001D86                     
  5211                           ;fs_menu_controller.c: 130:     {;fs_menu_controller.c: 131:         button_bounce_contr
      +                          oller.increase = 0;
  5212  001D86  9A5E               	bcf	_button_bounce_controller^0,5,c
  5213                           
  5214                           ;fs_menu_controller.c: 132:         menu_flags.menu_increase_flag = 0;
  5215  001D88  0100               	movlb	0	; () banked
  5216  001D8A  99C6               	bcf	_menu_flags& (0+255),4,b
  5217  001D8C                     l394:
  5218                           
  5219                           ;fs_menu_controller.c: 136:     if ((button_bounce_controller.decrease == 0) && (PORTBbi
      +                          ts.RB4 == 0))
  5220  001D8C  B85E               	btfsc	_button_bounce_controller^0,4,c
  5221  001D8E  EFCB  F00E         	goto	u2211
  5222  001D92  EFCD  F00E         	goto	u2210
  5223  001D96                     u2211:
  5224  001D96  EFD7  F00E         	goto	l395
  5225  001D9A                     u2210:
  5226  001D9A  B881               	btfsc	129,4,c	;volatile
  5227  001D9C  EFD2  F00E         	goto	u2221
  5228  001DA0  EFD4  F00E         	goto	u2220
  5229  001DA4                     u2221:
  5230  001DA4  EFD7  F00E         	goto	l395
  5231  001DA8                     u2220:
  5232  001DA8                     
  5233                           ;fs_menu_controller.c: 137:     {;fs_menu_controller.c: 138:         button_bounce_contr
      +                          oller.decrease = 1;
  5234  001DA8  885E               	bsf	_button_bounce_controller^0,4,c
  5235                           
  5236                           ;fs_menu_controller.c: 139:         menu_flags.menu_decrease_flag = 1;
  5237  001DAA  0100               	movlb	0	; () banked
  5238  001DAC  8BC6               	bsf	_menu_flags& (0+255),5,b
  5239  001DAE                     l395:
  5240                           
  5241                           ;fs_menu_controller.c: 141:     if ((PORTBbits.RB4 == 1) && (button_bounce_controller.de
      +                          crease == 1))
  5242  001DAE  A881               	btfss	129,4,c	;volatile
  5243  001DB0  EFDC  F00E         	goto	u2231
  5244  001DB4  EFDE  F00E         	goto	u2230
  5245  001DB8                     u2231:
  5246  001DB8  EFE8  F00E         	goto	l397
  5247  001DBC                     u2230:
  5248  001DBC  A85E               	btfss	_button_bounce_controller^0,4,c
  5249  001DBE  EFE3  F00E         	goto	u2241
  5250  001DC2  EFE5  F00E         	goto	u2240
  5251  001DC6                     u2241:
  5252  001DC6  EFE8  F00E         	goto	l397
  5253  001DCA                     u2240:
  5254  001DCA                     
  5255                           ;fs_menu_controller.c: 142:     {;fs_menu_controller.c: 143:         button_bounce_contr
      +                          oller.decrease = 0;
  5256  001DCA  985E               	bcf	_button_bounce_controller^0,4,c
  5257                           
  5258                           ;fs_menu_controller.c: 144:         menu_flags.menu_decrease_flag = 0;
  5259  001DCC  0100               	movlb	0	; () banked
  5260  001DCE  9BC6               	bcf	_menu_flags& (0+255),5,b
  5261  001DD0                     l397:
  5262  001DD0  0012               	return		;funcret
  5263  001DD2                     __end_of_buttonControlFlags:
  5264                           	callstack 0
  5265                           
  5266 ;; *************** function _mcu_init *****************
  5267 ;; Defined at:
  5268 ;;		line 38 in file "fs_mcu.c"
  5269 ;; Parameters:    Size  Location     Type
  5270 ;;		None
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;		None
  5273 ;; Return value:  Size  Location     Type
  5274 ;;                  1    wreg      void 
  5275 ;; Registers used:
  5276 ;;		wreg, status,2
  5277 ;; Tracked objects:
  5278 ;;		On entry : 0/0
  5279 ;;		On exit  : 0/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5286 ;;Total ram usage:        0 bytes
  5287 ;; Hardware stack levels used:    1
  5288 ;; Hardware stack levels required when called:    1
  5289 ;; This function calls:
  5290 ;;		Nothing
  5291 ;; This function is called by:
  5292 ;;		_main
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           	psect	text24
  5297  0028EC                     __ptext24:
  5298                           	callstack 0
  5299  0028EC                     _mcu_init:
  5300                           	callstack 29
  5301  0028EC                     
  5302                           ;fs_mcu.c: 40:    OSCCONbits.IRCF = 0b111;
  5303  0028EC  0E70               	movlw	112
  5304  0028EE  12D3               	iorwf	211,f,c	;volatile
  5305  0028F0                     
  5306                           ;fs_mcu.c: 42:    OSCTUNEbits.PLLEN = 0b1;
  5307  0028F0  8C9B               	bsf	155,6,c	;volatile
  5308  0028F2                     l265:
  5309  0028F2  A4D3               	btfss	211,2,c	;volatile
  5310  0028F4  EF7E  F014         	goto	u2651
  5311  0028F8  EF80  F014         	goto	u2650
  5312  0028FC                     u2651:
  5313  0028FC  EF79  F014         	goto	l265
  5314  002900                     u2650:
  5315  002900  0012               	return		;funcret
  5316  002902                     __end_of_mcu_init:
  5317                           	callstack 0
  5318                           
  5319 ;; *************** function _lcd_init *****************
  5320 ;; Defined at:
  5321 ;;		line 79 in file "fs_lcd.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;		None
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;		None
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  1    wreg      void 
  5328 ;; Registers used:
  5329 ;;		wreg, status,2, cstack
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;Total ram usage:        2 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:    3
  5342 ;; This function calls:
  5343 ;;		_Lcd_Cmd
  5344 ;;		_Lcd_Port
  5345 ;; This function is called by:
  5346 ;;		_main
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text25
  5351  00244C                     __ptext25:
  5352                           	callstack 0
  5353  00244C                     _lcd_init:
  5354                           	callstack 27
  5355  00244C                     
  5356                           ;fs_lcd.c: 81:     TRISEbits.RE0 = 0;
  5357  00244C  9096               	bcf	150,0,c	;volatile
  5358                           
  5359                           ;fs_lcd.c: 82:     ANSELEbits.ANSE0 = 0;
  5360  00244E  010F               	movlb	15	; () banked
  5361  002450  913C               	bcf	60,0,b	;volatile
  5362                           
  5363                           ;fs_lcd.c: 84:     TRISAbits.RA3 = 0;
  5364  002452  9692               	bcf	146,3,c	;volatile
  5365                           
  5366                           ;fs_lcd.c: 85:     ANSELAbits.ANSA3 = 0;
  5367  002454  9738               	bcf	56,3,b	;volatile
  5368                           
  5369                           ;fs_lcd.c: 87:     TRISDbits.RD0 = 0;
  5370  002456  9095               	bcf	149,0,c	;volatile
  5371                           
  5372                           ;fs_lcd.c: 88:     ANSELDbits.ANSD0 = 0;
  5373  002458  913B               	bcf	59,0,b	;volatile
  5374                           
  5375                           ;fs_lcd.c: 90:     TRISDbits.RD1 = 0;
  5376  00245A  9295               	bcf	149,1,c	;volatile
  5377                           
  5378                           ;fs_lcd.c: 91:     ANSELDbits.ANSD1 = 0;
  5379  00245C  933B               	bcf	59,1,b	;volatile
  5380                           
  5381                           ;fs_lcd.c: 93:     TRISDbits.RD2 = 0;
  5382  00245E  9495               	bcf	149,2,c	;volatile
  5383                           
  5384                           ;fs_lcd.c: 94:     ANSELDbits.ANSD2 = 0;
  5385  002460  953B               	bcf	59,2,b	;volatile
  5386                           
  5387                           ;fs_lcd.c: 96:     TRISDbits.RD3 = 0;
  5388  002462  9695               	bcf	149,3,c	;volatile
  5389                           
  5390                           ;fs_lcd.c: 97:     ANSELDbits.ANSD3 = 0;
  5391  002464  973B               	bcf	59,3,b	;volatile
  5392  002466                     
  5393                           ; BSR set to: 15
  5394                           ;fs_lcd.c: 100:     Lcd_Port(0x00);
  5395  002466  0E00               	movlw	0
  5396  002468  EC46  F013         	call	_Lcd_Port
  5397  00246C                     
  5398                           ;fs_lcd.c: 101:      _delay((unsigned long)((20)*(64000000UL/4000.0)));
  5399  00246C  0E02               	movlw	2
  5400  00246E  6E05               	movwf	(??_lcd_init+1)^0,c
  5401  002470  0EA0               	movlw	160
  5402  002472  6E04               	movwf	??_lcd_init^0,c
  5403  002474  0E92               	movlw	146
  5404  002476                     u3957:
  5405  002476  2EE8               	decfsz	wreg,f,c
  5406  002478  D7FE               	bra	u3957
  5407  00247A  2E04               	decfsz	??_lcd_init^0,f,c
  5408  00247C  D7FC               	bra	u3957
  5409  00247E  2E05               	decfsz	(??_lcd_init+1)^0,f,c
  5410  002480  D7FA               	bra	u3957
  5411  002482  D000               	nop2	
  5412  002484                     
  5413                           ;fs_lcd.c: 102:     Lcd_Cmd(0x03);
  5414  002484  0E03               	movlw	3
  5415  002486  EC67  F014         	call	_Lcd_Cmd
  5416  00248A                     
  5417                           ;fs_lcd.c: 103:      _delay((unsigned long)((5)*(64000000UL/4000.0)));
  5418  00248A  0E68               	movlw	104
  5419  00248C  6E04               	movwf	??_lcd_init^0,c
  5420  00248E  0EE4               	movlw	228
  5421  002490                     u3967:
  5422  002490  2EE8               	decfsz	wreg,f,c
  5423  002492  D7FE               	bra	u3967
  5424  002494  2E04               	decfsz	??_lcd_init^0,f,c
  5425  002496  D7FC               	bra	u3967
  5426  002498  D000               	nop2	
  5427  00249A                     
  5428                           ;fs_lcd.c: 104:     Lcd_Cmd(0x03);
  5429  00249A  0E03               	movlw	3
  5430  00249C  EC67  F014         	call	_Lcd_Cmd
  5431  0024A0                     
  5432                           ;fs_lcd.c: 105:      _delay((unsigned long)((11)*(64000000UL/4000.0)));
  5433  0024A0  0EE5               	movlw	229
  5434  0024A2  6E04               	movwf	??_lcd_init^0,c
  5435  0024A4  0E91               	movlw	145
  5436  0024A6                     u3977:
  5437  0024A6  2EE8               	decfsz	wreg,f,c
  5438  0024A8  D7FE               	bra	u3977
  5439  0024AA  2E04               	decfsz	??_lcd_init^0,f,c
  5440  0024AC  D7FC               	bra	u3977
  5441  0024AE  F000               	nop	
  5442  0024B0                     
  5443                           ;fs_lcd.c: 106:     Lcd_Cmd(0x03);
  5444  0024B0  0E03               	movlw	3
  5445  0024B2  EC67  F014         	call	_Lcd_Cmd
  5446  0024B6                     
  5447                           ;fs_lcd.c: 107:     Lcd_Cmd(0x02);
  5448  0024B6  0E02               	movlw	2
  5449  0024B8  EC67  F014         	call	_Lcd_Cmd
  5450  0024BC                     
  5451                           ;fs_lcd.c: 108:     Lcd_Cmd(0x02);
  5452  0024BC  0E02               	movlw	2
  5453  0024BE  EC67  F014         	call	_Lcd_Cmd
  5454  0024C2                     
  5455                           ;fs_lcd.c: 109:     Lcd_Cmd(0x08);
  5456  0024C2  0E08               	movlw	8
  5457  0024C4  EC67  F014         	call	_Lcd_Cmd
  5458  0024C8                     
  5459                           ;fs_lcd.c: 110:     Lcd_Cmd(0x00);
  5460  0024C8  0E00               	movlw	0
  5461  0024CA  EC67  F014         	call	_Lcd_Cmd
  5462  0024CE                     
  5463                           ;fs_lcd.c: 111:     Lcd_Cmd(0x0C);
  5464  0024CE  0E0C               	movlw	12
  5465  0024D0  EC67  F014         	call	_Lcd_Cmd
  5466  0024D4                     
  5467                           ;fs_lcd.c: 112:     Lcd_Cmd(0x00);
  5468  0024D4  0E00               	movlw	0
  5469  0024D6  EC67  F014         	call	_Lcd_Cmd
  5470  0024DA                     
  5471                           ;fs_lcd.c: 113:     Lcd_Cmd(0x06);
  5472  0024DA  0E06               	movlw	6
  5473  0024DC  EC67  F014         	call	_Lcd_Cmd
  5474  0024E0  0012               	return		;funcret
  5475  0024E2                     __end_of_lcd_init:
  5476                           	callstack 0
  5477                           
  5478 ;; *************** function _Lcd_Clear *****************
  5479 ;; Defined at:
  5480 ;;		line 42 in file "fs_lcd.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;		None
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;		None
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  1    wreg      void 
  5487 ;; Registers used:
  5488 ;;		wreg, status,2, cstack
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;Total ram usage:        0 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    3
  5501 ;; This function calls:
  5502 ;;		_Lcd_Cmd
  5503 ;; This function is called by:
  5504 ;;		_main
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text26
  5509  002914                     __ptext26:
  5510                           	callstack 0
  5511  002914                     _Lcd_Clear:
  5512                           	callstack 27
  5513  002914                     
  5514                           ;fs_lcd.c: 44:    Lcd_Cmd(0);
  5515  002914  0E00               	movlw	0
  5516  002916  EC67  F014         	call	_Lcd_Cmd
  5517                           
  5518                           ;fs_lcd.c: 45:    Lcd_Cmd(1);
  5519  00291A  0E01               	movlw	1
  5520  00291C  EC67  F014         	call	_Lcd_Cmd
  5521  002920  0012               	return		;funcret
  5522  002922                     __end_of_Lcd_Clear:
  5523                           	callstack 0
  5524                           
  5525 ;; *************** function _Lcd_Cmd *****************
  5526 ;; Defined at:
  5527 ;;		line 28 in file "fs_lcd.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  a               1    wreg     unsigned char 
  5530 ;; Auto vars:     Size  Location     Type
  5531 ;;  a               1    2[COMRAM] unsigned char 
  5532 ;; Return value:  Size  Location     Type
  5533 ;;                  1    wreg      void 
  5534 ;; Registers used:
  5535 ;;		wreg, status,2, cstack
  5536 ;; Tracked objects:
  5537 ;;		On entry : 0/0
  5538 ;;		On exit  : 0/0
  5539 ;;		Unchanged: 0/0
  5540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5542 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;Total ram usage:        2 bytes
  5546 ;; Hardware stack levels used:    1
  5547 ;; Hardware stack levels required when called:    2
  5548 ;; This function calls:
  5549 ;;		_Lcd_Port
  5550 ;; This function is called by:
  5551 ;;		_Lcd_Clear
  5552 ;;		_Lcd_Set_Cursor
  5553 ;;		_lcd_init
  5554 ;;		_Lcd_Shift_Right
  5555 ;;		_Lcd_Shift_Left
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           	psect	text27
  5560  0028CE                     __ptext27:
  5561                           	callstack 0
  5562  0028CE                     _Lcd_Cmd:
  5563                           	callstack 25
  5564                           
  5565                           ;incstack = 0
  5566                           ;Lcd_Cmd@a stored from wreg
  5567  0028CE  6E03               	movwf	Lcd_Cmd@a^0,c
  5568  0028D0                     
  5569                           ;fs_lcd.c: 28: void Lcd_Cmd(char a);fs_lcd.c: 29: {;fs_lcd.c: 30:    PORTEbits.RE0 = 0;
  5570  0028D0  9084               	bcf	132,0,c	;volatile
  5571  0028D2                     
  5572                           ;fs_lcd.c: 31:    Lcd_Port(a);
  5573  0028D2  5003               	movf	Lcd_Cmd@a^0,w,c
  5574  0028D4  EC46  F013         	call	_Lcd_Port
  5575  0028D8                     
  5576                           ;fs_lcd.c: 32:    PORTAbits.RA3 = 1;
  5577  0028D8  8680               	bsf	128,3,c	;volatile
  5578  0028DA                     
  5579                           ;fs_lcd.c: 33:    _delay((unsigned long)((2)*(64000000UL/4000.0)));
  5580  0028DA  0E2A               	movlw	42
  5581  0028DC  6E02               	movwf	??_Lcd_Cmd^0,c
  5582  0028DE  0E8E               	movlw	142
  5583  0028E0                     u3987:
  5584  0028E0  2EE8               	decfsz	wreg,f,c
  5585  0028E2  D7FE               	bra	u3987
  5586  0028E4  2E02               	decfsz	??_Lcd_Cmd^0,f,c
  5587  0028E6  D7FC               	bra	u3987
  5588  0028E8                     
  5589                           ;fs_lcd.c: 34:    PORTAbits.RA3 = 0;
  5590  0028E8  9680               	bcf	128,3,c	;volatile
  5591  0028EA  0012               	return		;funcret
  5592  0028EC                     __end_of_Lcd_Cmd:
  5593                           	callstack 0
  5594                           
  5595 ;; *************** function _Lcd_Port *****************
  5596 ;; Defined at:
  5597 ;;		line 12 in file "fs_lcd.c"
  5598 ;; Parameters:    Size  Location     Type
  5599 ;;  a               1    wreg     unsigned char 
  5600 ;; Auto vars:     Size  Location     Type
  5601 ;;  a               1    0[COMRAM] unsigned char 
  5602 ;; Return value:  Size  Location     Type
  5603 ;;                  1    wreg      void 
  5604 ;; Registers used:
  5605 ;;		wreg
  5606 ;; Tracked objects:
  5607 ;;		On entry : 0/0
  5608 ;;		On exit  : 0/0
  5609 ;;		Unchanged: 0/0
  5610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5612 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5614 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5615 ;;Total ram usage:        1 bytes
  5616 ;; Hardware stack levels used:    1
  5617 ;; Hardware stack levels required when called:    1
  5618 ;; This function calls:
  5619 ;;		Nothing
  5620 ;; This function is called by:
  5621 ;;		_Lcd_Cmd
  5622 ;;		_lcd_init
  5623 ;;		_Lcd_Write_Char
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           	psect	text28
  5628  00268C                     __ptext28:
  5629                           	callstack 0
  5630  00268C                     _Lcd_Port:
  5631                           	callstack 25
  5632                           
  5633                           ;incstack = 0
  5634                           ;Lcd_Port@a stored from wreg
  5635  00268C  6E01               	movwf	Lcd_Port@a^0,c
  5636  00268E                     
  5637                           ;fs_lcd.c: 12: void Lcd_Port(char a);fs_lcd.c: 13: {;fs_lcd.c: 14:    if(a & 1) { PORTDb
      +                          its.RD0 = 1;}
  5638  00268E  A001               	btfss	Lcd_Port@a^0,0,c
  5639  002690  EF4C  F013         	goto	u1841
  5640  002694  EF4E  F013         	goto	u1840
  5641  002698                     u1841:
  5642  002698  EF51  F013         	goto	l176
  5643  00269C                     u1840:
  5644  00269C  8083               	bsf	131,0,c	;volatile
  5645  00269E  EF52  F013         	goto	l2484
  5646  0026A2                     l176:
  5647  0026A2  9083               	bcf	131,0,c	;volatile
  5648  0026A4                     l2484:
  5649                           
  5650                           ;fs_lcd.c: 17:    if(a & 2) { PORTDbits.RD1 = 1;}
  5651  0026A4  A201               	btfss	Lcd_Port@a^0,1,c
  5652  0026A6  EF57  F013         	goto	u1851
  5653  0026AA  EF59  F013         	goto	u1850
  5654  0026AE                     u1851:
  5655  0026AE  EF5C  F013         	goto	l178
  5656  0026B2                     u1850:
  5657  0026B2  8283               	bsf	131,1,c	;volatile
  5658  0026B4  EF5D  F013         	goto	l2488
  5659  0026B8                     l178:
  5660  0026B8  9283               	bcf	131,1,c	;volatile
  5661  0026BA                     l2488:
  5662                           
  5663                           ;fs_lcd.c: 20:    if(a & 4) {PORTDbits.RD2 = 1;}
  5664  0026BA  A401               	btfss	Lcd_Port@a^0,2,c
  5665  0026BC  EF62  F013         	goto	u1861
  5666  0026C0  EF64  F013         	goto	u1860
  5667  0026C4                     u1861:
  5668  0026C4  EF67  F013         	goto	l180
  5669  0026C8                     u1860:
  5670  0026C8  8483               	bsf	131,2,c	;volatile
  5671  0026CA  EF68  F013         	goto	l2492
  5672  0026CE                     l180:
  5673  0026CE  9483               	bcf	131,2,c	;volatile
  5674  0026D0                     l2492:
  5675                           
  5676                           ;fs_lcd.c: 23:    if(a & 8) {PORTDbits.RD3 = 1;}
  5677  0026D0  A601               	btfss	Lcd_Port@a^0,3,c
  5678  0026D2  EF6D  F013         	goto	u1871
  5679  0026D6  EF6F  F013         	goto	u1870
  5680  0026DA                     u1871:
  5681  0026DA  EF72  F013         	goto	l182
  5682  0026DE                     u1870:
  5683  0026DE  8683               	bsf	131,3,c	;volatile
  5684  0026E0  EF73  F013         	goto	l184
  5685  0026E4                     l182:
  5686  0026E4  9683               	bcf	131,3,c	;volatile
  5687  0026E6                     l184:
  5688  0026E6  0012               	return		;funcret
  5689  0026E8                     __end_of_Lcd_Port:
  5690                           	callstack 0
  5691                           
  5692 ;; *************** function _TIMER0 *****************
  5693 ;; Defined at:
  5694 ;;		line 33 in file "fs_timer.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;		None
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;		None
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  1    wreg      void 
  5701 ;; Registers used:
  5702 ;;		wreg, status,2, status,0
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5712 ;;Total ram usage:        0 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; This function calls:
  5715 ;;		Nothing
  5716 ;; This function is called by:
  5717 ;;		Interrupt level 2
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           	psect	intcode
  5722  000008                     __pintcode:
  5723                           	callstack 0
  5724  000008                     _TIMER0:
  5725                           	callstack 20
  5726                           
  5727                           ;incstack = 0
  5728  000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5729  00000A                     
  5730                           ;fs_timer.c: 35:     if ((INTCONbits.TMR0IF)&&(INTCONbits.TMR0IE))
  5731  00000A  A4F2               	btfss	242,2,c	;volatile
  5732  00000C  EF0A  F000         	goto	i2u318_41
  5733  000010  EF0C  F000         	goto	i2u318_40
  5734  000014                     i2u318_41:
  5735  000014  EF31  F000         	goto	i2l150
  5736  000018                     i2u318_40:
  5737  000018  AAF2               	btfss	242,5,c	;volatile
  5738  00001A  EF11  F000         	goto	i2u319_41
  5739  00001E  EF13  F000         	goto	i2u319_40
  5740  000022                     i2u319_41:
  5741  000022  EF31  F000         	goto	i2l150
  5742  000026                     i2u319_40:
  5743  000026                     
  5744                           ;fs_timer.c: 36:     {;fs_timer.c: 37:         INTCONbits.TMR0IF = 0;
  5745  000026  94F2               	bcf	242,2,c	;volatile
  5746  000028                     
  5747                           ;fs_timer.c: 38:         TMR0H = 0x63;
  5748  000028  0E63               	movlw	99
  5749  00002A  6ED7               	movwf	215,c	;volatile
  5750                           
  5751                           ;fs_timer.c: 39:         TMR0L = 0xC0;
  5752  00002C  0EC0               	movlw	192
  5753  00002E  6ED6               	movwf	214,c	;volatile
  5754  000030                     
  5755                           ;fs_timer.c: 41:         timer_value.timer_0_counter++;
  5756  000030  0100               	movlb	0	; () banked
  5757  000032  2BB5               	incf	(_timer_value+9)& (0+255),f,b
  5758  000034                     
  5759                           ; BSR set to: 0
  5760                           ;fs_timer.c: 43:         if(button_bounce_controller.menu == 1)
  5761  000034  A05E               	btfss	_button_bounce_controller^0,0,c
  5762  000036  EF1F  F000         	goto	i2u320_41
  5763  00003A  EF21  F000         	goto	i2u320_40
  5764  00003E                     i2u320_41:
  5765  00003E  EF24  F000         	goto	i2l3384
  5766  000042                     i2u320_40:
  5767  000042                     
  5768                           ; BSR set to: 0
  5769                           ;fs_timer.c: 44:         {;fs_timer.c: 45:              timer_value.menu_login_delay++;
  5770  000042  2BB4               	incf	(_timer_value+8)& (0+255),f,b
  5771                           
  5772                           ;fs_timer.c: 46:         }
  5773  000044  EF26  F000         	goto	i2l3386
  5774  000048                     i2l3384:
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;fs_timer.c: 48:         {;fs_timer.c: 49:              timer_value.menu_login_delay = 0
      +                          ;
  5778  000048  0E00               	movlw	0
  5779  00004A  6FB4               	movwf	(_timer_value+8)& (0+255),b
  5780  00004C                     i2l3386:
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;fs_timer.c: 52:         if (timer_value.timer_0_counter >= 100)
  5784  00004C  0E63               	movlw	99
  5785  00004E  65B5               	cpfsgt	(_timer_value+9)& (0+255),b
  5786  000050  EF2C  F000         	goto	i2u321_41
  5787  000054  EF2E  F000         	goto	i2u321_40
  5788  000058                     i2u321_41:
  5789  000058  EF31  F000         	goto	i2l150
  5790  00005C                     i2u321_40:
  5791  00005C                     
  5792                           ; BSR set to: 0
  5793                           ;fs_timer.c: 53:         {;fs_timer.c: 54:             timer_value.timer_0_counter = 0;
  5794  00005C  0E00               	movlw	0
  5795  00005E  6FB5               	movwf	(_timer_value+9)& (0+255),b
  5796  000060                     
  5797                           ; BSR set to: 0
  5798                           ;fs_timer.c: 55:             timer_counter_flag.one_second_flag = 1;
  5799  000060  81CA               	bsf	_timer_counter_flag& (0+255),0,b
  5800  000062                     i2l150:
  5801  000062  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5802  000064  0011               	retfie		f
  5803  000066                     __end_of_TIMER0:
  5804                           	callstack 0
  5805                           
  5806                           	psect	rparam
  5807  0000                     
  5808                           	psect	temp
  5809  00005F                     btemp:
  5810                           	callstack 0
  5811  00005F                     	ds	1
  5812  0000                     int$flags	set	btemp
  5813  0000                     wtemp8	set	btemp+1
  5814  0000                     ttemp5	set	btemp+1
  5815  0000                     ttemp6	set	btemp+4
  5816  0000                     ttemp7	set	btemp+8
  5817                           
  5818                           	psect	idloc
  5819                           
  5820                           ;Config register IDLOC0 @ 0x200000
  5821                           ;	unspecified, using default values
  5822  200000                     	org	2097152
  5823  200000  FF                 	db	255
  5824                           
  5825                           ;Config register IDLOC1 @ 0x200001
  5826                           ;	unspecified, using default values
  5827  200001                     	org	2097153
  5828  200001  FF                 	db	255
  5829                           
  5830                           ;Config register IDLOC2 @ 0x200002
  5831                           ;	unspecified, using default values
  5832  200002                     	org	2097154
  5833  200002  FF                 	db	255
  5834                           
  5835                           ;Config register IDLOC3 @ 0x200003
  5836                           ;	unspecified, using default values
  5837  200003                     	org	2097155
  5838  200003  FF                 	db	255
  5839                           
  5840                           ;Config register IDLOC4 @ 0x200004
  5841                           ;	unspecified, using default values
  5842  200004                     	org	2097156
  5843  200004  FF                 	db	255
  5844                           
  5845                           ;Config register IDLOC5 @ 0x200005
  5846                           ;	unspecified, using default values
  5847  200005                     	org	2097157
  5848  200005  FF                 	db	255
  5849                           
  5850                           ;Config register IDLOC6 @ 0x200006
  5851                           ;	unspecified, using default values
  5852  200006                     	org	2097158
  5853  200006  FF                 	db	255
  5854                           
  5855                           ;Config register IDLOC7 @ 0x200007
  5856                           ;	unspecified, using default values
  5857  200007                     	org	2097159
  5858  200007  FF                 	db	255
  5859                           
  5860                           	psect	config
  5861                           
  5862                           ; Padding undefined space
  5863  300000                     	org	3145728
  5864  300000  FF                 	db	255
  5865                           
  5866                           ;Config register CONFIG1H @ 0x300001
  5867                           ;	Oscillator Selection bits
  5868                           ;	FOSC = INTIO67, Internal oscillator block
  5869                           ;	4X PLL Enable
  5870                           ;	PLLCFG = ON, Oscillator multiplied by 4
  5871                           ;	Primary clock enable bit
  5872                           ;	PRICLKEN = ON, Primary clock is always enabled
  5873                           ;	Fail-Safe Clock Monitor Enable bit
  5874                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  5875                           ;	Internal/External Oscillator Switchover bit
  5876                           ;	IESO = ON, Oscillator Switchover mode enabled
  5877  300001                     	org	3145729
  5878  300001  B8                 	db	184
  5879                           
  5880                           ;Config register CONFIG2L @ 0x300002
  5881                           ;	Power-up Timer Enable bit
  5882                           ;	PWRTEN = OFF, Power up timer disabled
  5883                           ;	Brown-out Reset Enable bits
  5884                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  5885                           ;	Brown Out Reset Voltage bits
  5886                           ;	BORV = 190, VBOR set to 1.90 V nominal
  5887  300002                     	org	3145730
  5888  300002  1F                 	db	31
  5889                           
  5890                           ;Config register CONFIG2H @ 0x300003
  5891                           ;	Watchdog Timer Enable bits
  5892                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  5893                           ;	Watchdog Timer Postscale Select bits
  5894                           ;	WDTPS = 32768, 1:32768
  5895  300003                     	org	3145731
  5896  300003  3C                 	db	60
  5897                           
  5898                           ; Padding undefined space
  5899  300004                     	org	3145732
  5900  300004  FF                 	db	255
  5901                           
  5902                           ;Config register CONFIG3H @ 0x300005
  5903                           ;	CCP2 MUX bit
  5904                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  5905                           ;	PORTB A/D Enable bit
  5906                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  5907                           ;	P3A/CCP3 Mux bit
  5908                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  5909                           ;	HFINTOSC Fast Start-up
  5910                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  5911                           ;	Timer3 Clock input mux bit
  5912                           ;	T3CMX = PORTC0, T3CKI is on RC0
  5913                           ;	ECCP2 B output mux bit
  5914                           ;	P2BMX = PORTD2, P2B is on RD2
  5915                           ;	MCLR Pin Enable bit
  5916                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  5917  300005                     	org	3145733
  5918  300005  BD                 	db	189
  5919                           
  5920                           ;Config register CONFIG4L @ 0x300006
  5921                           ;	Stack Full/Underflow Reset Enable bit
  5922                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  5923                           ;	Single-Supply ICSP Enable bit
  5924                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
  5925                           ;	Extended Instruction Set Enable bit
  5926                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  5927                           ;	Background Debug
  5928                           ;	DEBUG = 0x1, unprogrammed default
  5929  300006                     	org	3145734
  5930  300006  84                 	db	132
  5931                           
  5932                           ; Padding undefined space
  5933  300007                     	org	3145735
  5934  300007  FF                 	db	255
  5935                           
  5936                           ;Config register CONFIG5L @ 0x300008
  5937                           ;	Code Protection Block 0
  5938                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  5939                           ;	Code Protection Block 1
  5940                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  5941                           ;	Code Protection Block 2
  5942                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  5943                           ;	Code Protection Block 3
  5944                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  5945  300008                     	org	3145736
  5946  300008  0F                 	db	15
  5947                           
  5948                           ;Config register CONFIG5H @ 0x300009
  5949                           ;	Boot Block Code Protection bit
  5950                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  5951                           ;	Data EEPROM Code Protection bit
  5952                           ;	CPD = OFF, Data EEPROM not code-protected
  5953  300009                     	org	3145737
  5954  300009  C0                 	db	192
  5955                           
  5956                           ;Config register CONFIG6L @ 0x30000A
  5957                           ;	Write Protection Block 0
  5958                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  5959                           ;	Write Protection Block 1
  5960                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  5961                           ;	Write Protection Block 2
  5962                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  5963                           ;	Write Protection Block 3
  5964                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  5965  30000A                     	org	3145738
  5966  30000A  0F                 	db	15
  5967                           
  5968                           ;Config register CONFIG6H @ 0x30000B
  5969                           ;	Configuration Register Write Protection bit
  5970                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  5971                           ;	Boot Block Write Protection bit
  5972                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  5973                           ;	Data EEPROM Write Protection bit
  5974                           ;	WRTD = OFF, Data EEPROM not write-protected
  5975  30000B                     	org	3145739
  5976  30000B  E0                 	db	224
  5977                           
  5978                           ;Config register CONFIG7L @ 0x30000C
  5979                           ;	Table Read Protection Block 0
  5980                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  5981                           ;	Table Read Protection Block 1
  5982                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  5983                           ;	Table Read Protection Block 2
  5984                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  5985                           ;	Table Read Protection Block 3
  5986                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  5987  30000C                     	org	3145740
  5988  30000C  0F                 	db	15
  5989                           
  5990                           ;Config register CONFIG7H @ 0x30000D
  5991                           ;	Boot Block Table Read Protection bit
  5992                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  5993  30000D                     	org	3145741
  5994  30000D  40                 	db	64
  5995                           tosu	equ	0xFFF
  5996                           tosh	equ	0xFFE
  5997                           tosl	equ	0xFFD
  5998                           stkptr	equ	0xFFC
  5999                           pclatu	equ	0xFFB
  6000                           pclath	equ	0xFFA
  6001                           pcl	equ	0xFF9
  6002                           tblptru	equ	0xFF8
  6003                           tblptrh	equ	0xFF7
  6004                           tblptrl	equ	0xFF6
  6005                           tablat	equ	0xFF5
  6006                           prodh	equ	0xFF4
  6007                           prodl	equ	0xFF3
  6008                           indf0	equ	0xFEF
  6009                           postinc0	equ	0xFEE
  6010                           postdec0	equ	0xFED
  6011                           preinc0	equ	0xFEC
  6012                           plusw0	equ	0xFEB
  6013                           fsr0h	equ	0xFEA
  6014                           fsr0l	equ	0xFE9
  6015                           wreg	equ	0xFE8
  6016                           indf1	equ	0xFE7
  6017                           postinc1	equ	0xFE6
  6018                           postdec1	equ	0xFE5
  6019                           preinc1	equ	0xFE4
  6020                           plusw1	equ	0xFE3
  6021                           fsr1h	equ	0xFE2
  6022                           fsr1l	equ	0xFE1
  6023                           bsr	equ	0xFE0
  6024                           indf2	equ	0xFDF
  6025                           postinc2	equ	0xFDE
  6026                           postdec2	equ	0xFDD
  6027                           preinc2	equ	0xFDC
  6028                           plusw2	equ	0xFDB
  6029                           fsr2h	equ	0xFDA
  6030                           fsr2l	equ	0xFD9
  6031                           status	equ	0xFD8

Data Sizes:
    Strings     167
    Constant    0
    Data        0
    BSS         243
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     89      94
    BANK0           160     34     160
    BANK1           256      0     112
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> stateMachine@textCursor2(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_14(CODE[16]), STR_12(CODE[16]), STR_10(CODE[18]), STR_8(CODE[18]), 
		 -> STR_6(CODE[18]), STR_4(CODE[15]), STR_2(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_14(CODE[16]), STR_12(CODE[16]), STR_10(CODE[18]), STR_8(CODE[18]), 
		 -> STR_6(CODE[18]), STR_4(CODE[15]), STR_2(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_14(CODE[16]), STR_12(CODE[16]), STR_10(CODE[18]), STR_8(CODE[18]), 
		 -> STR_6(CODE[18]), STR_4(CODE[15]), STR_2(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> stateMachine@textCursor2(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2716_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> stateMachine@textCursor2(BANK0[16]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> stateMachine@textCursor2(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_13(CODE[17]), STR_11(CODE[17]), STR_9(CODE[17]), STR_7(CODE[17]), 
		 -> STR_5(CODE[17]), STR_3(CODE[16]), STR_1(CODE[17]), stateMachine@textCursor2(BANK0[16]), 


Critical Paths under _main in COMRAM

    _system_init->_eepromRead
    _menuControl->_stateMachine
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _lcd_init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TIMER0 in COMRAM

    None.

Critical Paths under _main in BANK0

    _menuControl->_stateMachine
    _stateMachine->_sprintf

Critical Paths under _TIMER0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TIMER0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TIMER0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TIMER0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TIMER0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TIMER0 in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TIMER0 in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TIMER0 in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _TIMER0 in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _TIMER0 in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _TIMER0 in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _TIMER0 in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _TIMER0 in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _TIMER0 in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _TIMER0 in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _TIMER0 in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12018
                          _Lcd_Clear
                           _lcd_init
                           _mcu_init
                        _menuControl
                     _menuInitialize
                        _system_init
                       _timer_0_init
 ---------------------------------------------------------------------------------
 (1) _timer_0_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _system_init                                          2     2      0     272
                                              2 COMRAM     2     2      0
                         _eepromRead
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           2     0      2     272
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _menuInitialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _menuControl                                          0     0      0   11438
                 _buttonControlFlags
                       _stateMachine
 ---------------------------------------------------------------------------------
 (2) _stateMachine                                        18    18      0   11437
                                             87 COMRAM     2     2      0
                                             18 BANK0     16    16      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                        _eepromWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             18    10      8    7368
                                              0 BANK0     18    10      8
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (7) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (8) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (7) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (3) _eepromWrite                                          3     0      3     978
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     6     4      2    1332
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       3     3      0     178
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       5     4      1    1444
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _buttonControlFlags                                  16    16      0       1
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 (1) _mcu_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     198
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              2     2      0     110
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _TIMER0                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _lcd_init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _mcu_init
   _menuControl
     _buttonControlFlags
     _stateMachine
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _eepromWrite
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _fputc
               _putch
   _menuInitialize
   _system_init
     _eepromRead
   _timer_0_init

 _TIMER0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      70       7       43.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     22      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     59      5E       1      100.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16E      12        0.0%
DATA                 0      0     16E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Aug 07 02:23:30 2020

          __end_of_system_init 21EC                            l202 2828                            l208 2562  
                          l153 2912                            l411 1166                            l403 268A  
                          l180 26CE                            l412 11AA                            l421 139C  
                          l182 26E4                            l190 2920                            l184 26E6  
                          l176 26A2                            l416 127A                            l440 1792  
                          l265 28F2                            l409 10BA                            l178 26B8  
                          l434 1628                            l426 147E                            l274 21EA  
                          l187 28EA                            l435 1648                            l268 2900  
                          l196 25C8                            l436 16C2                            l380 28AC  
                          l461 2876                            l390 1D04                            l199 24E0  
                          l391 1D26                            l463 2884                            l455 28BC  
                 _startIsClick 00C8                            l392 1D48                            l464 2888  
                          l393 1D6A                            l385 1C5A                            l394 1D8C  
                          l386 1C7C                            l458 28CC                            l395 1DAE  
                          l387 1C9E                            l388 1CC0                            l397 1DD0  
                          l389 1CE2                            l581 1F58                            l594 20BC  
                          _PR2 000FBB                            _abs 277E                            _pad 2386  
                          wreg 000FE8                    _stopIsClick 00C7                           ?_abs 0013  
                         l1221 2622                           l1222 262A                           l1150 2738  
                         l1215 1C2A                           l1208 1A76                           l3000 21A6  
                         l1241 2384                           l3010 2914                           l1226 27B4  
                         l3002 21B4                           l1252 2922                           l2300 275C  
                         l1180 240E                           l3020 2646                           l3012 262C  
                         l3004 21C2                           l1229 27BC                           l2302 27BE  
                         l1182 244A                           l1190 183C                           l3030 267C  
                         l3022 2652                           l3014 2630                           l3006 21DA  
                         l2320 1E08                           l2312 1DD2                           l2304 27CA  
                         l2400 23C4                           l3032 267E                           l3024 2660  
                         l3016 2634                           l3008 21E2                           l1249 277C  
                         l1177 23CC                           l2330 1E64                           l2322 1E16  
                         l2314 1DD6                           l1258 27F2                           l2306 27CE  
                         l2410 2432                           l2402 23D8                           l3026 2662  
                         l3018 2644                           l2340 1ECE                           l2332 1E6C  
                         l2324 1E36                           l2316 1DE4                           l2308 27E6  
                         l2404 23EC                           l1188 1834                           l2420 17B4  
                         l2500 1AAA                           l3028 266E                           l2350 1F18  
                         l2342 1EEE                           l2334 1E80                           l2326 1E3A  
                         l2318 1E04                           l2414 277E                           l2406 23F0  
                         l2430 1828                           l2422 17DC                           l2510 1B50  
                         l2502 1ABC                           l2352 1F38                           l2344 1EF0  
                         l2336 1E8E                           l2328 1E46                           l2360 1F6C  
                         l2416 2798                           l2280 22BC                           l2408 241E  
                         l2440 1872                           l2432 1844                           l2424 17FC  
                         l2520 1BCE                           l2504 1AC0                           l2600 26E8  
                         l2346 1F02                           l2338 1EA0                           l2370 1FDC  
                         l2362 1F8C                           l2290 233E                           l2282 22CE  
                         l2450 1910                           l2442 187C                           l2434 1856  
                         l2426 180C                           l2418 1794                           l2514 1B88  
                         l2506 1AE4                           l2530 1BF4                           l2602 26FA  
                         l2540 28D2                           l2620 2868                           l2612 285A  
                         l2348 1F08                           l2380 2054                           l2372 1FE4  
                         l2364 1F90                           l2356 1F5A                           l2284 22E0  
                         l2460 19E0                           l2444 1882                           l2452 1974  
                         l2436 1864                           l2428 180E                           l2532 1C18  
                         l2516 1BAC                           l2524 1BDA                           l2508 1B08  
                         l2604 2702                           l2700 10E0                           l3260 21EC  
                         l2542 28D8                           l2550 2802                           l2622 286A  
                         l2614 285E                           l2382 2066                           l2374 1FF8  
                         l2366 1F9E                           l2358 1F5E                           l2286 22EA  
                         l2294 273A                           l2470 1A2A                           l2454 198E  
                         l2462 19F0                           l2446 1904                           l2438 186A  
                         l2526 1BE8                           l2518 1BBA                           l2606 270A  
                         l2710 1148                           l2702 1106                           l2630 28B6  
                         l3270 2200                           l3262 21F0                           l2480 268E  
                         l2544 28DA                           l2640 1C2C                           l2560 2816  
                         l2552 2804                           l2624 2874                           l2616 2862  
                         l2376 2006                           l2384 206C                           l2368 1FBE  
                         l2288 2308                           l2296 2746                           l2392 2386  
                         l2472 1A36                           l2464 1A02                           l2456 19AC  
                         l2448 190A                           l2608 2726                           l2800 13B4  
                         l2720 11A6                           l2712 115A                           l2704 1112  
                         l2632 28B8                           l3280 2236                           l3272 2204  
                         l3264 21F4                           l2490 26C8                           l2482 269C  
                         l2546 28E8                           l2538 28D0                           l2650 1C76  
                         l2642 1C38                           l2562 281C                           l2554 280C  
                         l2618 2866                           l2386 207C                           l2378 2034  
                         l2298 2758                           l2394 2396                           l2474 1A3E  
                         l2466 1A12                           l2458 19C6                           l2570 25D2  
                         l2810 13DA                           l2802 13B8                           l2730 11F0  
                         l2722 11BA                           l2714 1176                           l2706 1126  
                         l2634 28BA                           l2626 28AE                           l3290 227E  
                         l3282 2246                           l3274 2214                           l3266 21F8  
                         l2492 26D0                           l2484 26A4                           l2660 1CCE  
                         l2652 1C8A                           l2644 1C46                           l2580 2588  
                         l2564 281E                           l2556 280E                           l2548 27F6  
                         l2388 209C                           l2396 23AA                           l2468 1A18  
                         l2476 1A4E                           l2572 25E0                           l2900 15EA  
                         l2820 140E                           l2804 13C6                           l2812 13EA  
                         l2740 123A                           l2724 11CA                           l2732 1208  
                         l2716 1186                           l2708 112E                           l2636 28CA  
                         l2628 28B2                           l3292 2282                           l3284 2256  
                         l3276 2216                           l3268 21FC                           l2494 26DE  
                         l2486 26B2                           l2670 1D20                           l2662 1CDC  
                         l2654 1C98                           l2646 1C54                           l2590 25C2  
                         l2582 258E                           l2566 2826                           l2558 2814  
                         l2398 23B8                           l2574 2606                           l2910 1658  
                         l2902 160A                           l2830 145A                           l2814 13FA  
                         l2822 141E                           l2806 13D6                           l2750 1296  
                         l2742 1244                           l2734 1216                           l2726 11DA  
                         l2718 1196                           l3294 2292                           l3286 225A  
                         l3278 2226                           l2488 26BA                           l2680 1D78  
                         l2672 1D34                           l2664 1CF0                           l2656 1CAC  
                         l2648 1C68                           l2584 2598                           l2576 2566  
                         l2592 24E2                           l2496 1A78                           l2568 25CA  
                         l2920 16B0                           l2912 1664                           l2904 161C  
                         l2840 149A                           l2832 1466                           l2824 1428  
                         l2816 140A                           l2808 13D8                           l2760 12C8  
                         l2752 12A4                           l2744 126A                           l2736 1224  
                         l2728 11EA                           l3296 22A8                           l3288 226A  
                         l2690 1DCA                           l2682 1D86                           l2674 1D42  
                         l2666 1CFE                           l2658 1CBA                           l2586 25AA  
                         l2578 2576                           l2594 24EE                           l2498 1A9C  
                         l2930 1704                           l2922 16B2                           l2914 166E  
                         l2906 1630                           l2842 14A8                           l2850 14CC  
                         l2826 1434                           l2818 140C                           l2770 1300  
                         l2762 12D2                           l2754 12B4                           l2746 1290  
                         l2738 122E                           l3298 22B0                           l2684 1D9A  
                         l2676 1D56                           l2668 1D12                           l2588 25BC  
                         l2596 2520                           l2932 170A                           l2924 16D2  
                         l2916 1694                           l2908 164E                           l2852 14DC  
                         l2860 1500                           l2844 14B8                           l2836 1494  
                         l2828 143E                           l2780 1326                           l2772 1302  
                         l2764 12DA                           l2756 12B6                           l2748 1292  
                         l2940 1738                           l2692 10AA                           l2686 1DA8  
                         l2678 1D64                           l2598 2524                           l2926 16E2  
                         l2934 1722                           l2918 16A0                           l2870 1548  
                         l2862 150A                           l2854 14EC                           l2846 14BA  
                         l2838 1496                           l2790 1354                           l2774 1304  
                         l2782 132E                           l2758 12B8                           l2766 12E2  
                         l2694 10C0                           l2950 288A                           ?_pad 0011  
                         l2960 2466                           l2688 1DBC                           l2928 16F2  
                         l2880 1584                           l2864 1516                           l2856 14EE  
                         l2848 14BC                           l2792 1370                           l2784 1334  
                         l2776 1314                           l2768 12F0                           l2696 10CA  
                         l2952 2902                           l2970 24A0                           l2962 246C  
                         l2946 28EC                           l2890 159C                           l2882 1586  
                         l2874 1560                           l2866 1520                           l2858 14F0  
                         l2794 137C                           l2786 133E                           l2778 131E  
                         l2698 10D6                           l2954 290E                           l2980 24C8  
                         l2972 24B0                           l2964 2484                           l2948 28F0  
                         l2892 15A6                           l2884 1588                           l2876 156E  
                         l2868 153C                           l2796 1390                           l2788 134A  
                         l2956 2910                           l2982 24CE                           l2974 24B6  
                         l2966 248A                           l2958 244C                           l2894 15CC  
                         l2886 158A                           l2878 1578                           l2798 13B2  
                         l2990 2190                           l2984 24D4                           l2976 24BC  
                         l2968 249A                           l2896 15D8                           l2888 1594  
                         l2992 2192                           l2986 24DA                           l2978 24C2  
                         l3858 174C                           l2898 15E8                           l2994 2194  
                         l2996 2196                           l2988 20BE                           l2998 2198  
                         STR_1 1024                           STR_2 1099                           STR_3 1079  
                         STR_4 1099                           STR_5 1057                           STR_6 1001  
                         STR_7 1068                           STR_8 1001                           STR_9 1013  
                         u2001 1C32                           u2010 1C46                           u2011 1C42  
                         u2100 1CDC                           u2020 1C54                           u2101 1CD8  
                         u2021 1C50                           u2110 1CF0                           u2030 1C68  
                         u2111 1CEC                           u2031 1C64                           u2200 1D86  
                         u2120 1CFE                           u2040 1C76                           u2201 1D82  
                         u2121 1CFA                           u2041 1C72                           u2210 1D9A  
                         u2130 1D12                           u2050 1C8A                           u2211 1D96  
                         u2131 1D0E                           u2051 1C86                           u2220 1DA8  
                         u2140 1D20                           u2060 1C98                           u1500 27E6  
                         u2300 1186                           u2221 1DA4                           u2141 1D1C  
                         u2061 1C94                           u1501 27E2                           u2301 1182  
                         u2230 1DBC                           u2150 1D34                           u2070 1CAC  
                         u1510 1DE4                           u2310 1196                           u3110 2214  
                         u2231 1DB8                           u2151 1D30                           u2071 1CA8  
                         u1511 1DE0                           u2311 1192                           u3111 2210  
                         u2240 1DCA                           u2160 1D42                           u2080 1CBA  
                         u1520 1E16                           u1600 1FDC                           u2400 12A4  
                         u2320 11A6                           u3120 2226                           u2241 1DC6  
                         u2161 1D3E                           u2081 1CB6                           u1521 1E12  
                         u1601 1FD8                           u2401 12A0                           u2321 11A2  
                         u3121 2222                           u2170 1D56                           u2090 1CCE  
                         u1610 2006                           u1450 22CE                           u2410 12B4  
                         u2330 11BA                           u3130 2236                           u2171 1D52  
                         u2091 1CCA                           u1531 1E40                           u1611 2002  
                         u1451 22CA                           u2411 12B0                           u2331 11B6  
                         u2251 10B0                           u3131 2232                           u2180 1D64  
                         u1540 1E64                           u1620 2034                           u1460 22E0  
                         u1700 17C6                           u2500 147A                           u2420 12F0  
                         u2340 11CA                           u2260 1126                           u3140 2246  
                         u2181 1D60                           u1541 1E60                           u1621 2030  
                         u1461 22DC                           u2501 1476                           u2421 12EC  
                         u2341 11C6                           u2261 1122                           u3141 2242  
                         u2190 1D78                           u1550 1E8E                           u1630 207C  
                         u1470 2308                           u1710 17DC                           u2510 1494  
                         u2430 1300                           u2350 11DA                           u2270 1148  
                         u3150 2256                           u2191 1D74                           u1551 1E8A  
                         u1631 2078                           u1471 2304                           u1711 17D8  
                         u2511 1490                           u2431 12FC                           u2351 11D6  
                         u2271 1144                           u3151 2252                           u1560 1ECE  
                         u1480 233E                           u1640 2396                           u1800 19F0  
                         u1720 180C                           u2600 16D2                           u2520 14A8  
                         u2440 1390                           u2360 11EA                           u2280 115A  
                         u3160 227E                           u1561 1ECA                           u1481 233A  
                         u1641 2392                           u1801 19EC                           u1721 1808  
                         u2601 16CE                           u2521 14A4                           u2441 138C  
                         u2361 11E6                           u2281 1156                           u3161 227A  
                         u1570 1F18                           u1490 277C                           u1650 23B8  
                         u1810 1A02                           u1730 1828                           u2610 16E2  
                         u2530 14B8                           u2450 13B2                           u2370 1216  
                         u2290 1176                           u3170 22A8                           u1571 1F14  
                         u1491 2778                           u1651 23B4                           u1811 19FE  
                         u1731 1824                           u2611 16DE                           u2531 14B4  
                         u2451 13AE                           u2371 1212                           u2291 1172  
                         u3171 22A4                           u1580 1F6C                           u1660 240E  
                         u1820 1A12                           u1740 1856                           u1900 1B08  
                         u2620 16F2                           u2540 14DC                           u2460 13C6  
                         u2380 1224                           u1581 1F68                           u1661 240A  
                         u1821 1A0E                           u1741 1852                           u1901 1B04  
                         u2621 16EE                           u2541 14D8                           u2461 13C2  
                         u2381 1220                           u1590 1F9E                           u1670 241E  
                         u1830 1A2A                           u1750 1864                           u1910 1BAC  
                         u2630 1704                           u2550 14EC                           u2470 13D6  
                         u2390 1290                           u1591 1F9A                           u1671 241A  
                         u1831 1A26                           u1751 1860                           u1911 1BA8  
                         u2631 1700                           u2551 14E8                           u2471 13D2  
                         u2391 128C                           u1840 269C                           u1680 2798  
                         u1760 198E                           u1920 2622                           u2640 1734  
                         u2560 155C                           u2480 13FA                           u1841 2698  
                         u1681 2794                           u1761 198A                           u1921 261E  
                         u2641 1730                           u2561 1558                           u2481 13F6  
                         u1850 26B2                           u2650 2900                           u1930 2576  
                         u1770 19AC                           u1690 17C4                           u2570 15E8  
                         u2490 140A                           u1851 26AE                           u2651 28FC  
                         u1931 2572                           u1771 19A8                           u1691 17BE  
                         u2571 15E4                           u2491 1406                           u1860 26C8  
                         u1940 25AA                           u1780 19C6                           u2580 161C  
                         u2660 2644                           u1861 26C4                           u1941 25A6  
                         u1781 19C2                           u2581 1618                           u2661 2640  
                         u1870 26DE                           u1950 251C                           u1790 19E0  
                         u2590 16B0                           u2670 2660                           u1871 26DA  
                         u1791 19DC                           u2591 16AC                           u2671 265C  
                         u1960 2552                           u1880 1A9C                           u2680 267C  
                         u1881 1A98                           u2681 2678                           u1970 2562  
                         u1890 1AE4                           u1971 255E                           u1891 1AE0  
                         u1980 2884                           u1957 2512                           u1981 2880  
                         u1990 28CA                           u1967 2548                           u1991 28C6  
                         u3927 21CC                           u3937 2810                           u3947 2820  
                         u3957 2476                           u3967 2490                           u3977 24A6  
                         u3987 28E0                           _TMR2 000FBC                           abs@a 0013  
            ?_Lcd_Write_String 0005                           _dbuf 0150                           _main 21EC  
                         _dtoa 1794                           _prec 00C2                           _nout 00BE  
                         pad@i 0018                           pad@p 0015                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf2 000FDF                           fsr1l 000FE1  
                         pad@w 001A                           fsr2l 000FD9                           btemp 005F  
                         start 0066             ??_Lcd_Write_String 0007                __end_of_Lcd_Cmd 28EC  
                 ___param_bank 000000                          ??_abs 0015                          ??_pad 0017  
                 ?_menuControl 0001                __end_of___aodiv 1F5A                          ?_main 0001  
                        ?_dtoa 001C                __end_of___aomod 20BE                          _EEADR 000FA9  
                        STR_10 1001                          STR_11 1035                          STR_12 1089  
                        STR_13 1046                          STR_14 1089                          _T0CON 000FD5  
                        i2l150 0062                   vfpfcnvrt@fmt 0042                          _TMR0H 000FD7  
                        _TMR0L 000FD6        __size_of_Lcd_Set_Cursor 0066                          _flags 00C4  
                        _fputc 22BC                          _fputs 273A                   _adc_raw_data 0090  
                        pad@fp 0011                          _width 00C0                          _putch 2922  
                        dtoa@d 001E                          dtoa@i 003E                          dtoa@n 0036  
                        dtoa@p 0030                          dtoa@s 0034                          dtoa@w 0032  
                        tablat 000FF5                          ttemp5 0060                          ttemp6 0063  
                        ttemp7 0067                          status 000FD8                          wtemp8 0060  
              __end_of_sprintf 273A               __end_of_Lcd_Port 26E8                __initialization 282A  
                  _system_init 20BE                   __end_of_main 22BC                   __end_of_dtoa 1A78  
                       ??_main 005A                         ??_dtoa 0026             __size_of_Lcd_Clear 000E  
                __activetblptr 000002                         _ADCON0 000FC2                         _ADCON1 000FC1  
                       ?_fputc 0001                         ?_fputs 000A                         _ADRESH 000FC4  
                       _EEADRH 000FAA                         _ADRESL 000FC3                         _EEDATA 000FA8  
                       _CCPR1L 000FBE                         _CCPR2L 000F67                         _EECON2 000FA7  
                       ?_putch 0001                         _ANSELB 000F39                         i2l3370 000A  
                       i2l3380 0034                         i2l3372 0018                         i2l3390 0060  
                       i2l3382 0042                         i2l3374 0026                         i2l3384 0048  
                       i2l3376 0028                         i2l3386 004C                         i2l3378 0030  
                       i2l3388 005C                      ??_Lcd_Cmd 0002                         _TIMER0 0008  
      __size_of_Lcd_Write_Char 0036             _timer_counter_flag 00CA           __size_of_eepromWrite 0030  
                 vfprintf@cfmt 0056               __end_of_lcd_init 24E2                      ??___aodiv 0011  
                    ??___aomod 0011               __end_of_mcu_init 2902                         clear_0 2830  
                       clear_1 283C                eepromWrite@data 0003                         pad@buf 0013  
                       dtoa@fp 001C                         _strlen 27BE                         fputc@c 0001  
                       fputs@c 000E                         fputs@i 000F                         fputs@s 000A  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                         putch@c 0001               __end_of_vfprintf 262C  
                    ??_sprintf 0058     __end_of_buttonControlFlags 1DD2                Lcd_Set_Cursor@a 0005  
              Lcd_Set_Cursor@b 0004                Lcd_Set_Cursor@y 0007                Lcd_Set_Cursor@z 0006  
                   __accesstop 0060        __end_of__initialization 284C              __end_of_Lcd_Clear 2922  
                ___rparam_used 000001                 __pcstackCOMRAM 0001                  __end_of_fputc 2386  
                __end_of_fputs 277E                  __end_of_putch 2924                 _Lcd_Set_Cursor 2564  
            eepromRead@address 0001           __size_of_menuControl 0060                      ?_Lcd_Port 0001  
                      ??_fputc 0005                        ??_fputs 000E                        ??_putch 0001  
                   __pbssBANK0 0060                     __pbssBANK1 0100                        ?_TIMER0 0001  
                      _CCP1CON 000FBD                        _CCP2CON 000F66      __size_of_Lcd_Write_String 0082  
       __end_of_Lcd_Set_Cursor 25CA                        ?_strlen 0001                     _eepromRead 28AE  
           __size_of_vfpfcnvrt 01B4                     ??_Lcd_Port 0001                      ?_lcd_init 0001  
      __size_of_menuInitialize 0024                  _menu_selected 005D                 _Lcd_Write_Char 27F4  
                      _Lcd_Cmd 28CE                      ?_mcu_init 0001                __size_of_TIMER0 005E  
            stateMachine@F6398 0130                     _controller 00CB                        __Hparam 0000  
                      __Lparam 0000                   ?_system_init 0001                        ___aodiv 1DD2  
                      ___aomod 1F5A                      ?_vfprintf 0050                   __psmallconst 1000  
                      __pcinit 282A                        __ramtop 1000                ?_Lcd_Set_Cursor 0004  
                      __ptext0 21EC                        __ptext1 2902                        __ptext2 20BE  
                      __ptext3 28AE                        __ptext4 288A                        __ptext5 262C  
                      __ptext6 10AA                        __ptext7 26E8                        __ptext8 25CA  
                      __ptext9 1A78                     _menu_flags 00C6                     _menu_value 005A  
              __size_of_strlen 0036                        _counter 00BA        stateMachine@textCursor2 00F0  
                    _T2CONbits 000FBA                   __size_of_abs 0040                   __size_of_pad 00C6  
                ?_timer_0_init 0001                        _sprintf 26E8                     ??_lcd_init 0004  
       __end_of_Lcd_Write_Char 282A           end_of_initialization 284C                        fputc@fp 0003  
                   ??_mcu_init 0001                  __Lmediumconst 0000                        fputs@fp 000C  
            __end_of_vfpfcnvrt 1C2C                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                      Lcd_Port@a 0001  
                   ??_vfprintf 0056                        strlen@a 0003                        strlen@s 0001  
                    _PORTAbits 000F80                      _PORTBbits 000F81                      _PORTDbits 000F83  
                    _PORTEbits 000F84                    ?_eepromRead 0001                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISDbits 000F95  
                    _TRISEbits 000F96                 ??_timer_0_init 0001                ?_Lcd_Write_Char 0001  
            Lcd_Write_String@a 0005              Lcd_Write_String@i 0009                  ??_eepromWrite 0004  
     _button_bounce_controller 005E                 __end_of_TIMER0 0066                  ?_stateMachine 0001  
           _buttonControlFlags 1C2C                      _Lcd_Clear 2914                   _convert_data 0100  
                  vfpfcnvrt@ap 0044                    vfpfcnvrt@fp 0040                    vfpfcnvrt@ll 0048  
             _Lcd_Write_String 24E2            ?_buttonControlFlags 0001                 __end_of_strlen 27F4  
          start_initialization 282A                    __end_of_abs 27BE                    __end_of_pad 244C  
               _menuInitialize 288A                   _driver_limit 00A0              __size_of_Lcd_Port 005C  
         ??_buttonControlFlags 0001                       ??_TIMER0 0001                 ??_stateMachine 0058  
          __size_of_eepromRead 0020                    vfprintf@fmt 0052                     ?_Lcd_Clear 0001  
          __end_of_eepromWrite 288A  buttonControlFlags@textCursor2 0001           __size_of_system_init 012E  
              Lcd_Write_Char@a 0004                Lcd_Write_Char@y 0003                  ??_menuControl 005A  
                     ??_strlen 0003                    __pbssCOMRAM 005A         __end_of_menuInitialize 28AE  
                __pcstackBANK0 00DE               ___aodiv@dividend 0001                       ?_Lcd_Cmd 0001  
            __size_of_lcd_init 0096              __size_of_mcu_init 0016                      _dtoa$2789 002E  
             ??_Lcd_Set_Cursor 0005                      __pintcode 0008           __end_of_timer_0_init 2914  
                     ?___aodiv 0001                       ?___aomod 0001               ___aodiv@quotient 0013  
            __size_of_vfprintf 0062                      fabsf@F463 00B6                    __smallconst 1000  
              ?_menuInitialize 0001            __end_of_menuControl 268C                       ?_sprintf 00DE  
               __size_of_fputc 00CA                 __size_of_fputs 0044                 __size_of_putch 0002  
           eepromWrite@address 0001                       _LATAbits 000F89                       _LATBbits 000F8A  
                     _LATEbits 000F8D                    _eepromWrite 285A                       i2u320_40 0042  
                     i2u320_41 003E                       i2u321_40 005C                       i2u321_41 0058  
                     Lcd_Cmd@a 0003                       i2u318_40 0018                       i2u318_41 0014  
                     i2u319_40 0026                       i2u319_41 0022                       _PIR2bits 000FA1  
                  ??_Lcd_Clear 0004                   _pauseIsClick 00C9                      _vfpfcnvrt 1A78  
                   _ADCON0bits 000FC2                     _ADCON2bits 000FC0                   ??_eepromRead 0003  
             ??_Lcd_Write_Char 0002           __end_of_stateMachine 1794                       _Lcd_Port 268C  
     __end_of_Lcd_Write_String 2564               __size_of_Lcd_Cmd 001E                     _EECON1bits 000FA6  
                     __Hrparam 0000                     vfprintf@ap 0054                       __Lrparam 0000  
                   vfprintf@fp 0050             __end_of_eepromRead 28CE        buttonControlFlags@F6394 0140  
             __size_of___aodiv 0188               __size_of___aomod 0164                     ?_vfpfcnvrt 0040  
                  _menuControl 262C                ___aodiv@divisor 0009                ___aodiv@counter 0011  
                   _ANSELAbits 000F38                     _ANSELBbits 000F39                     _ANSELCbits 000F3A  
                   _ANSELDbits 000F3B                     _ANSELEbits 000F3C                     sprintf@fmt 00E0  
                     __ptext10 1794                       __ptext11 2386                       __ptext20 24E2  
                     __ptext12 27BE                       __ptext21 27F4                       __ptext13 273A  
                     __ptext22 2564                       __ptext14 22BC                       __ptext23 1C2C  
                     __ptext15 2922                       __ptext24 28EC                       __ptext16 277E  
                     __ptext25 244C                       __ptext17 1F5A                       __ptext26 2914  
                     __ptext18 1DD2                       __ptext27 28CE                       __ptext19 285A  
                     __ptext28 268C                       _lcd_init 244C               __size_of_sprintf 0052  
                     _mcu_init 28EC                  __size_of_main 00D0                  __size_of_dtoa 02E4  
        __size_of_timer_0_init 0012                       int$flags 005F                       _vfprintf 25CA  
             ___aomod@dividend 0001                    _OSCTUNEbits 000F9B                     _INTCONbits 000FF2  
                 _timer_0_init 2902             Lcd_Write_Char@temp 0002                       intlevel2 0000  
                    sprintf@ap 00E8    __size_of_buttonControlFlags 01A6                     _OSCCONbits 000FD3  
                ??_system_init 0003                   _procces_data 0060                ___aomod@divisor 0009  
                  ??_vfpfcnvrt 0046                ___aomod@counter 0011             Lcd_Set_Cursor@temp 0008  
             ??_menuInitialize 0001          __size_of_stateMachine 06EA                       sprintf@f 00EA  
                     sprintf@s 00DE                    _timer_value 00AC                   ___aodiv@sign 0012  
                  _textCursor2 0080                   ?_eepromWrite 0001                   ___aomod@sign 0012  
                 _stateMachine 10AA  
