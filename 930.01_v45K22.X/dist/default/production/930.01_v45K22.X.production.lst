

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Aug 07 02:55:42 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    49                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    50  0000                     
    51                           ; Version 2.20
    52                           ; Generated 05/05/2020 GMT
    53                           ; 
    54                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F45K22 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	eeprom_data
    87  F00000  1E 02 04 00 00 00 00 00 	db	30,2,4,0,0,0,0,0	;# 
    88  0000                     
    89                           	psect	idataBANK0
    90  001E80                     __pidataBANK0:
    91                           	callstack 0
    92                           
    93                           ;initializer for _KP
    94  001E80  CCCD               	dw	52429
    95  001E82  3E4C               	dw	15948
    96  0000                     _ANSELBbits	set	3897
    97  0000                     _ANSELCbits	set	3898
    98  0000                     _ANSELB	set	3897
    99  0000                     _ANSELDbits	set	3899
   100  0000                     _ANSELEbits	set	3900
   101  0000                     _ANSELAbits	set	3896
   102  0000                     _T0CON	set	4053
   103  0000                     _TMR0L	set	4054
   104  0000                     _TMR0H	set	4055
   105  0000                     _INTCONbits	set	4082
   106  0000                     _CCPR2L	set	3943
   107  0000                     _CCPR1L	set	4030
   108  0000                     _PR2	set	4027
   109  0000                     _TMR2	set	4028
   110  0000                     _T2CONbits	set	4026
   111  0000                     _CCP2CON	set	3942
   112  0000                     _CCP1CON	set	4029
   113  0000                     _LATEbits	set	3981
   114  0000                     _LATAbits	set	3977
   115  0000                     _LATBbits	set	3978
   116  0000                     _PORTBbits	set	3969
   117  0000                     _TRISCbits	set	3988
   118  0000                     _TRISBbits	set	3987
   119  0000                     _OSCTUNEbits	set	3995
   120  0000                     _OSCCONbits	set	4051
   121  0000                     _TRISDbits	set	3989
   122  0000                     _PORTAbits	set	3968
   123  0000                     _PORTEbits	set	3972
   124  0000                     _PORTDbits	set	3971
   125  0000                     _PIR2bits	set	4001
   126  0000                     _EECON2	set	4007
   127  0000                     _EEDATA	set	4008
   128  0000                     _EECON1bits	set	4006
   129  0000                     _EEADR	set	4009
   130  0000                     _ADCON2bits	set	4032
   131  0000                     _ADCON1	set	4033
   132  0000                     _ADCON0	set	4034
   133  0000                     _TRISEbits	set	3990
   134  0000                     _TRISAbits	set	3986
   135  0000                     _ADRESL	set	4035
   136  0000                     _ADRESH	set	4036
   137  0000                     _ADCON0bits	set	4034
   138                           
   139                           	psect	smallconst
   140  000600                     __psmallconst:
   141                           	callstack 0
   142  000600  00                 	db	0
   143  000601                     STR_4:
   144  000601  25                 	db	37
   145  000602  64                 	db	100	;'d'
   146  000603  20                 	db	32
   147  000604  20                 	db	32
   148  000605  20                 	db	32
   149  000606  20                 	db	32
   150  000607  20                 	db	32
   151  000608  20                 	db	32
   152  000609  20                 	db	32
   153  00060A  20                 	db	32
   154  00060B  20                 	db	32
   155  00060C  20                 	db	32
   156  00060D  20                 	db	32
   157  00060E  20                 	db	32
   158  00060F  20                 	db	32
   159  000610  20                 	db	32
   160  000611  20                 	db	32
   161  000612  00                 	db	0
   162  000613                     STR_7:
   163  000613  48                 	db	72	;'H'
   164  000614  49                 	db	73	;'I'
   165  000615  5A                 	db	90	;'Z'
   166  000616  20                 	db	32
   167  000617  4C                 	db	76	;'L'
   168  000618  69                 	db	105	;'i'
   169  000619  4D                 	db	77	;'M'
   170  00061A  69                 	db	105	;'i'
   171  00061B  54                 	db	84	;'T'
   172  00061C  69                 	db	105	;'i'
   173  00061D  20                 	db	32
   174  00061E  20                 	db	32
   175  00061F  20                 	db	32
   176  000620  20                 	db	32
   177  000621  20                 	db	32
   178  000622  20                 	db	32
   179  000623  00                 	db	0
   180  000624                     STR_1:
   181  000624  4B                 	db	75	;'K'
   182  000625  41                 	db	65	;'A'
   183  000626  4C                 	db	76	;'L'
   184  000627  41                 	db	65	;'A'
   185  000628  4E                 	db	78	;'N'
   186  000629  20                 	db	32
   187  00062A  5A                 	db	90	;'Z'
   188  00062B  41                 	db	65	;'A'
   189  00062C  4D                 	db	77	;'M'
   190  00062D  41                 	db	65	;'A'
   191  00062E  4E                 	db	78	;'N'
   192  00062F  20                 	db	32
   193  000630  20                 	db	32
   194  000631  20                 	db	32
   195  000632  20                 	db	32
   196  000633  20                 	db	32
   197  000634  00                 	db	0
   198  000635                     STR_9:
   199  000635  5A                 	db	90	;'Z'
   200  000636  41                 	db	65	;'A'
   201  000637  4D                 	db	77	;'M'
   202  000638  41                 	db	65	;'A'
   203  000639  4E                 	db	78	;'N'
   204  00063A  20                 	db	32
   205  00063B  44                 	db	68	;'D'
   206  00063C  4F                 	db	79	;'O'
   207  00063D  4C                 	db	76	;'L'
   208  00063E  44                 	db	68	;'D'
   209  00063F  55                 	db	85	;'U'
   210  000640  20                 	db	32
   211  000641  20                 	db	32
   212  000642  20                 	db	32
   213  000643  20                 	db	32
   214  000644  20                 	db	32
   215  000645  00                 	db	0
   216  000646                     STR_11:
   217  000646  48                 	db	72	;'H'
   218  000647  41                 	db	65	;'A'
   219  000648  52                 	db	82	;'R'
   220  000649  45                 	db	69	;'E'
   221  00064A  4B                 	db	75	;'K'
   222  00064B  45                 	db	69	;'E'
   223  00064C  54                 	db	84	;'T'
   224  00064D  20                 	db	32
   225  00064E  44                 	db	68	;'D'
   226  00064F  55                 	db	85	;'U'
   227  000650  52                 	db	82	;'R'
   228  000651  44                 	db	68	;'D'
   229  000652  55                 	db	85	;'U'
   230  000653  20                 	db	32
   231  000654  20                 	db	32
   232  000655  20                 	db	32
   233  000656  00                 	db	0
   234  000657                     STR_3:
   235  000657  48                 	db	72	;'H'
   236  000658  41                 	db	65	;'A'
   237  000659  52                 	db	82	;'R'
   238  00065A  45                 	db	69	;'E'
   239  00065B  4B                 	db	75	;'K'
   240  00065C  54                 	db	84	;'T'
   241  00065D  20                 	db	32
   242  00065E  5A                 	db	90	;'Z'
   243  00065F  41                 	db	65	;'A'
   244  000660  4D                 	db	77	;'M'
   245  000661  41                 	db	65	;'A'
   246  000662  4E                 	db	78	;'N'
   247  000663  49                 	db	73	;'I'
   248  000664  20                 	db	32
   249  000665  64                 	db	100	;'d'
   250  000666  6B                 	db	107	;'k'
   251  000667  00                 	db	0
   252  000668                     STR_5:
   253  000668  44                 	db	68	;'D'
   254  000669  55                 	db	85	;'U'
   255  00066A  52                 	db	82	;'R'
   256  00066B  4D                 	db	77	;'M'
   257  00066C  41                 	db	65	;'A'
   258  00066D  20                 	db	32
   259  00066E  5A                 	db	90	;'Z'
   260  00066F  41                 	db	65	;'A'
   261  000670  4D                 	db	77	;'M'
   262  000671  41                 	db	65	;'A'
   263  000672  4E                 	db	78	;'N'
   264  000673  49                 	db	73	;'I'
   265  000674  20                 	db	32
   266  000675  20                 	db	32
   267  000676  6D                 	db	109	;'m'
   268  000677  73                 	db	115	;'s'
   269  000678  00                 	db	0
   270  000679                     STR_10:
   271  000679  20                 	db	32
   272  00067A  20                 	db	32
   273  00067B  20                 	db	32
   274  00067C  20                 	db	32
   275  00067D  20                 	db	32
   276  00067E  20                 	db	32
   277  00067F  25                 	db	37
   278  000680  64                 	db	100	;'d'
   279  000681  3A                 	db	58	;':'
   280  000682  25                 	db	37
   281  000683  64                 	db	100	;'d'
   282  000684  20                 	db	32
   283  000685  20                 	db	32
   284  000686  20                 	db	32
   285  000687  20                 	db	32
   286  000688  00                 	db	0
   287  000689                     STR_2:
   288  000689  20                 	db	32
   289  00068A  20                 	db	32
   290  00068B  20                 	db	32
   291  00068C  20                 	db	32
   292  00068D  20                 	db	32
   293  00068E  20                 	db	32
   294  00068F  25                 	db	37
   295  000690  64                 	db	100	;'d'
   296  000691  3A                 	db	58	;':'
   297  000692  25                 	db	37
   298  000693  64                 	db	100	;'d'
   299  000694  20                 	db	32
   300  000695  20                 	db	32
   301  000696  20                 	db	32
   302  000697  00                 	db	0
   303  000698  00                 	db	0	; dummy byte at the end
   304  0000                     
   305                           ; #config settings
   306                           
   307                           	psect	cinit
   308  001C7C                     __pcinit:
   309                           	callstack 0
   310  001C7C                     start_initialization:
   311                           	callstack 0
   312  001C7C                     __initialization:
   313                           	callstack 0
   314                           
   315                           ; Initialize objects allocated to BANK0 (4 bytes)
   316                           ; load TBLPTR registers with __pidataBANK0
   317  001C7C  0E80               	movlw	low __pidataBANK0
   318  001C7E  6EF6               	movwf	tblptrl,c
   319  001C80  0E1E               	movlw	high __pidataBANK0
   320  001C82  6EF7               	movwf	tblptrh,c
   321  001C84  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   322  001C86  6EF8               	movwf	tblptru,c
   323  001C88  EE00  F0F0         	lfsr	0,__pdataBANK0
   324  001C8C  EE10 F004          	lfsr	1,4
   325  001C90                     copy_data0:
   326  001C90  0009               	tblrd		*+
   327  001C92  CFF5 FFEE          	movff	tablat,postinc0
   328  001C96  50E5               	movf	postdec1,w,c
   329  001C98  50E1               	movf	fsr1l,w,c
   330  001C9A  E1FA               	bnz	copy_data0
   331                           
   332                           ; Clear objects allocated to BANK1 (128 bytes)
   333  001C9C  EE01  F000         	lfsr	0,__pbssBANK1
   334  001CA0  0E80               	movlw	128
   335  001CA2                     clear_0:
   336  001CA2  6AEE               	clrf	postinc0,c
   337  001CA4  06E8               	decf	wreg,f,c
   338  001CA6  E1FD               	bnz	clear_0
   339                           
   340                           ; Clear objects allocated to BANK0 (110 bytes)
   341  001CA8  EE00  F060         	lfsr	0,__pbssBANK0
   342  001CAC  0E6E               	movlw	110
   343  001CAE                     clear_1:
   344  001CAE  6AEE               	clrf	postinc0,c
   345  001CB0  06E8               	decf	wreg,f,c
   346  001CB2  E1FD               	bnz	clear_1
   347                           
   348                           ; Clear objects allocated to COMRAM (5 bytes)
   349  001CB4  6A5E               	clrf	(__pbssCOMRAM+4)& (0+255),c
   350  001CB6  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   351  001CB8  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   352  001CBA  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   353  001CBC  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   354  001CBE                     end_of_initialization:
   355                           	callstack 0
   356  001CBE                     __end_of__initialization:
   357                           	callstack 0
   358  001CBE  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   359  001CC0  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   360  001CC2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   361  001CC4  6EF8               	movwf	tblptru,c
   362  001CC6  0100               	movlb	0
   363  001CC8  EF9B  F00B         	goto	_main	;jump to C main() function
   364                           
   365                           	psect	bssCOMRAM
   366  00005A                     __pbssCOMRAM:
   367                           	callstack 0
   368  00005A                     _prec:
   369                           	callstack 0
   370  00005A                     	ds	2
   371  00005C                     _flags:
   372                           	callstack 0
   373  00005C                     	ds	2
   374  00005E                     _button_bounce_controller:
   375                           	callstack 0
   376  00005E                     	ds	1
   377                           
   378                           	psect	bssBANK0
   379  000060                     __pbssBANK0:
   380                           	callstack 0
   381  000060                     _procces_data:
   382                           	callstack 0
   383  000060                     	ds	32
   384  000080                     _controller:
   385                           	callstack 0
   386  000080                     	ds	19
   387  000093                     _adc_raw_data:
   388                           	callstack 0
   389  000093                     	ds	16
   390  0000A3                     _driver_limit:
   391                           	callstack 0
   392  0000A3                     	ds	12
   393  0000AF                     _timer_value:
   394                           	callstack 0
   395  0000AF                     	ds	10
   396  0000B9                     fabsf@F463:
   397                           	callstack 0
   398  0000B9                     	ds	4
   399  0000BD                     _counter:
   400                           	callstack 0
   401  0000BD                     	ds	4
   402  0000C1                     _menu_value:
   403                           	callstack 0
   404  0000C1                     	ds	3
   405  0000C4                     _nout:
   406                           	callstack 0
   407  0000C4                     	ds	2
   408  0000C6                     _width:
   409                           	callstack 0
   410  0000C6                     	ds	2
   411  0000C8                     _menu_flags:
   412                           	callstack 0
   413  0000C8                     	ds	1
   414  0000C9                     _menu_selected:
   415                           	callstack 0
   416  0000C9                     	ds	1
   417  0000CA                     _stopIsClick:
   418                           	callstack 0
   419  0000CA                     	ds	1
   420  0000CB                     _startIsClick:
   421                           	callstack 0
   422  0000CB                     	ds	1
   423  0000CC                     _pauseIsClick:
   424                           	callstack 0
   425  0000CC                     	ds	1
   426  0000CD                     _timer_counter_flag:
   427                           	callstack 0
   428  0000CD                     	ds	1
   429                           
   430                           	psect	dataBANK0
   431  0000F0                     __pdataBANK0:
   432                           	callstack 0
   433  0000F0                     _KP:
   434                           	callstack 0
   435  0000F0                     	ds	4
   436                           
   437                           	psect	bssBANK1
   438  000100                     __pbssBANK1:
   439                           	callstack 0
   440  000100                     _convert_data:
   441                           	callstack 0
   442  000100                     	ds	48
   443  000130                     	ds	16
   444  000140                     	ds	16
   445  000150                     _textCursor2:
   446                           	callstack 0
   447  000150                     	ds	16
   448  000160                     _dbuf:
   449                           	callstack 0
   450  000160                     	ds	32
   451                           
   452                           	psect	cstackBANK0
   453  0000CE                     __pcstackBANK0:
   454                           	callstack 0
   455  0000CE                     ?_sprintf:
   456                           	callstack 0
   457  0000CE                     sprintf@s:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x0
   461  0000CE                     	ds	2
   462  0000D0                     sprintf@fmt:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x2
   466  0000D0                     	ds	8
   467  0000D8                     sprintf@ap:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0xA
   471  0000D8                     	ds	2
   472  0000DA                     sprintf@f:
   473                           	callstack 0
   474                           
   475                           ; 6 bytes @ 0xC
   476  0000DA                     	ds	6
   477  0000E0                     stateMachine@textCursor2:
   478                           	callstack 0
   479                           
   480                           ; 16 bytes @ 0x12
   481  0000E0                     	ds	16
   482                           
   483                           	psect	cstackCOMRAM
   484  000001                     __pcstackCOMRAM:
   485                           	callstack 0
   486  000001                     ?_strlen:
   487                           	callstack 0
   488  000001                     ?___aodiv:
   489                           	callstack 0
   490  000001                     ?___aomod:
   491                           	callstack 0
   492  000001                     eepromRead@address:
   493                           	callstack 0
   494  000001                     eepromWrite@data:
   495                           	callstack 0
   496  000001                     Lcd_Port@a:
   497                           	callstack 0
   498  000001                     fputc@c:
   499                           	callstack 0
   500  000001                     strlen@s:
   501                           	callstack 0
   502  000001                     ___aodiv@dividend:
   503                           	callstack 0
   504  000001                     ___aomod@dividend:
   505                           	callstack 0
   506  000001                     buttonControlFlags@textCursor2:
   507                           	callstack 0
   508                           
   509                           ; 16 bytes @ 0x0
   510  000001                     	ds	1
   511  000002                     ??_system_init:
   512  000002                     ??_Lcd_Cmd:
   513  000002                     eepromWrite@address:
   514                           	callstack 0
   515  000002                     Lcd_Write_Char@temp:
   516                           	callstack 0
   517                           
   518                           ; 1 bytes @ 0x1
   519  000002                     	ds	1
   520  000003                     Lcd_Cmd@a:
   521                           	callstack 0
   522  000003                     Lcd_Write_Char@y:
   523                           	callstack 0
   524  000003                     fputc@fp:
   525                           	callstack 0
   526  000003                     strlen@a:
   527                           	callstack 0
   528                           
   529                           ; 2 bytes @ 0x2
   530  000003                     	ds	1
   531  000004                     ??_lcd_init:
   532  000004                     Lcd_Set_Cursor@b:
   533                           	callstack 0
   534  000004                     Lcd_Write_Char@a:
   535                           	callstack 0
   536                           
   537                           ; 1 bytes @ 0x3
   538  000004                     	ds	1
   539  000005                     ??_fputc:
   540  000005                     Lcd_Set_Cursor@a:
   541                           	callstack 0
   542  000005                     Lcd_Write_String@a:
   543                           	callstack 0
   544                           
   545                           ; 2 bytes @ 0x4
   546  000005                     	ds	1
   547  000006                     Lcd_Set_Cursor@z:
   548                           	callstack 0
   549                           
   550                           ; 1 bytes @ 0x5
   551  000006                     	ds	1
   552  000007                     ??_Lcd_Write_String:
   553  000007                     Lcd_Set_Cursor@y:
   554                           	callstack 0
   555                           
   556                           ; 1 bytes @ 0x6
   557  000007                     	ds	1
   558  000008                     Lcd_Set_Cursor@temp:
   559                           	callstack 0
   560                           
   561                           ; 1 bytes @ 0x7
   562  000008                     	ds	1
   563  000009                     Lcd_Write_String@i:
   564                           	callstack 0
   565  000009                     ___aodiv@divisor:
   566                           	callstack 0
   567  000009                     ___aomod@divisor:
   568                           	callstack 0
   569                           
   570                           ; 8 bytes @ 0x8
   571  000009                     	ds	1
   572  00000A                     fputs@s:
   573                           	callstack 0
   574                           
   575                           ; 2 bytes @ 0x9
   576  00000A                     	ds	2
   577  00000C                     fputs@fp:
   578                           	callstack 0
   579                           
   580                           ; 2 bytes @ 0xB
   581  00000C                     	ds	2
   582  00000E                     fputs@c:
   583                           	callstack 0
   584                           
   585                           ; 1 bytes @ 0xD
   586  00000E                     	ds	1
   587  00000F                     fputs@i:
   588                           	callstack 0
   589                           
   590                           ; 2 bytes @ 0xE
   591  00000F                     	ds	2
   592  000011                     ?_pad:
   593                           	callstack 0
   594  000011                     ___aodiv@counter:
   595                           	callstack 0
   596  000011                     ___aomod@counter:
   597                           	callstack 0
   598  000011                     pad@fp:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x10
   602  000011                     	ds	1
   603  000012                     ___aodiv@sign:
   604                           	callstack 0
   605  000012                     ___aomod@sign:
   606                           	callstack 0
   607                           
   608                           ; 1 bytes @ 0x11
   609  000012                     	ds	1
   610  000013                     ?_abs:
   611                           	callstack 0
   612  000013                     pad@buf:
   613                           	callstack 0
   614  000013                     abs@a:
   615                           	callstack 0
   616  000013                     ___aodiv@quotient:
   617                           	callstack 0
   618                           
   619                           ; 8 bytes @ 0x12
   620  000013                     	ds	2
   621  000015                     ??_abs:
   622  000015                     pad@p:
   623                           	callstack 0
   624                           
   625                           ; 2 bytes @ 0x14
   626  000015                     	ds	2
   627  000017                     ??_pad:
   628                           
   629                           ; 1 bytes @ 0x16
   630  000017                     	ds	1
   631  000018                     pad@i:
   632                           	callstack 0
   633                           
   634                           ; 2 bytes @ 0x17
   635  000018                     	ds	2
   636  00001A                     pad@w:
   637                           	callstack 0
   638                           
   639                           ; 2 bytes @ 0x19
   640  00001A                     	ds	2
   641  00001C                     ?_dtoa:
   642                           	callstack 0
   643  00001C                     dtoa@fp:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x1B
   647  00001C                     	ds	2
   648  00001E                     dtoa@d:
   649                           	callstack 0
   650                           
   651                           ; 8 bytes @ 0x1D
   652  00001E                     	ds	8
   653  000026                     ??_dtoa:
   654                           
   655                           ; 1 bytes @ 0x25
   656  000026                     	ds	8
   657  00002E                     _dtoa$2778:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0x2D
   661  00002E                     	ds	2
   662  000030                     dtoa@p:
   663                           	callstack 0
   664                           
   665                           ; 2 bytes @ 0x2F
   666  000030                     	ds	2
   667  000032                     dtoa@w:
   668                           	callstack 0
   669                           
   670                           ; 2 bytes @ 0x31
   671  000032                     	ds	2
   672  000034                     dtoa@s:
   673                           	callstack 0
   674                           
   675                           ; 2 bytes @ 0x33
   676  000034                     	ds	2
   677  000036                     dtoa@n:
   678                           	callstack 0
   679                           
   680                           ; 8 bytes @ 0x35
   681  000036                     	ds	8
   682  00003E                     dtoa@i:
   683                           	callstack 0
   684                           
   685                           ; 2 bytes @ 0x3D
   686  00003E                     	ds	2
   687  000040                     ?_vfpfcnvrt:
   688                           	callstack 0
   689  000040                     vfpfcnvrt@fp:
   690                           	callstack 0
   691                           
   692                           ; 2 bytes @ 0x3F
   693  000040                     	ds	2
   694  000042                     vfpfcnvrt@fmt:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0x41
   698  000042                     	ds	2
   699  000044                     vfpfcnvrt@ap:
   700                           	callstack 0
   701                           
   702                           ; 2 bytes @ 0x43
   703  000044                     	ds	2
   704  000046                     ??_vfpfcnvrt:
   705                           
   706                           ; 1 bytes @ 0x45
   707  000046                     	ds	2
   708  000048                     vfpfcnvrt@ll:
   709                           	callstack 0
   710                           
   711                           ; 8 bytes @ 0x47
   712  000048                     	ds	8
   713  000050                     ?_vfprintf:
   714                           	callstack 0
   715  000050                     vfprintf@fp:
   716                           	callstack 0
   717                           
   718                           ; 2 bytes @ 0x4F
   719  000050                     	ds	2
   720  000052                     vfprintf@fmt:
   721                           	callstack 0
   722                           
   723                           ; 2 bytes @ 0x51
   724  000052                     	ds	2
   725  000054                     vfprintf@ap:
   726                           	callstack 0
   727                           
   728                           ; 2 bytes @ 0x53
   729  000054                     	ds	2
   730  000056                     vfprintf@cfmt:
   731                           	callstack 0
   732                           
   733                           ; 2 bytes @ 0x55
   734  000056                     	ds	2
   735  000058                     ??_stateMachine:
   736  000058                     
   737                           ; 1 bytes @ 0x57
   738  000058                     	ds	2
   739  00005A                     
   740                           ; 1 bytes @ 0x59
   741 ;;
   742 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   743 ;;
   744 ;; *************** function _main *****************
   745 ;; Defined at:
   746 ;;		line 43 in file "fs_main.c"
   747 ;; Parameters:    Size  Location     Type
   748 ;;		None
   749 ;; Auto vars:     Size  Location     Type
   750 ;;		None
   751 ;; Return value:  Size  Location     Type
   752 ;;                  1    wreg      void 
   753 ;; Registers used:
   754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   755 ;; Tracked objects:
   756 ;;		On entry : 0/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   760 ;;      Params:         0       0       0       0       0       0       0
   761 ;;      Locals:         0       0       0       0       0       0       0
   762 ;;      Temps:          0       0       0       0       0       0       0
   763 ;;      Totals:         0       0       0       0       0       0       0
   764 ;;Total ram usage:        0 bytes
   765 ;; Hardware stack levels required when called:   11
   766 ;; This function calls:
   767 ;;		_Lcd_Clear
   768 ;;		_lcd_init
   769 ;;		_mcu_init
   770 ;;		_menuControl
   771 ;;		_menuInitialize
   772 ;;		_system_init
   773 ;;		_timer_0_init
   774 ;; This function is called by:
   775 ;;		Startup code after reset
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           	psect	text0
   780  001736                     __ptext0:
   781                           	callstack 0
   782  001736                     _main:
   783                           	callstack 20
   784  001736                     
   785                           ;fs_main.c: 45:     mcu_init();
   786  001736  EC25  F00F         	call	_mcu_init	;wreg free
   787  00173A                     
   788                           ;fs_main.c: 46:     menuInitialize();
   789  00173A  ECF5  F00E         	call	_menuInitialize	;wreg free
   790  00173E                     
   791                           ;fs_main.c: 50:     timer_0_init();
   792  00173E  EC30  F00F         	call	_timer_0_init	;wreg free
   793  001742                     
   794                           ;fs_main.c: 51:     lcd_init();
   795  001742  ECC9  F00C         	call	_lcd_init	;wreg free
   796  001746                     
   797                           ;fs_main.c: 52:     system_init();
   798  001746  EC0A  F00B         	call	_system_init	;wreg free
   799  00174A                     
   800                           ;fs_main.c: 53:     Lcd_Clear();
   801  00174A  EC39  F00F         	call	_Lcd_Clear	;wreg free
   802  00174E                     l3319:
   803                           
   804                           ;fs_main.c: 61: {;fs_main.c: 63:     if (timer_counter_flag.one_second_flag == 1)
   805  00174E  0100               	movlb	0	; () banked
   806  001750  A1CD               	btfss	_timer_counter_flag& (0+255),0,b
   807  001752  EFAD  F00B         	goto	u3071
   808  001756  EFAF  F00B         	goto	u3070
   809  00175A                     u3071:
   810  00175A  EFFD  F00B         	goto	l3345
   811  00175E                     u3070:
   812  00175E                     
   813                           ; BSR set to: 0
   814                           ;fs_main.c: 64:     {;fs_main.c: 65:         timer_counter_flag.one_second_flag = 0;
   815  00175E  91CD               	bcf	_timer_counter_flag& (0+255),0,b
   816  001760                     
   817                           ; BSR set to: 0
   818                           ;fs_main.c: 67:         if ( (startIsClick == 1) && (pauseIsClick == 0) && (stopIsClick 
      +                          == 0) && (menu_selected == MAIN_MENU) )
   819  001760  05CB               	decf	_startIsClick& (0+255),w,b
   820  001762  A4D8               	btfss	status,2,c
   821  001764  EFB6  F00B         	goto	u3081
   822  001768  EFB8  F00B         	goto	u3080
   823  00176C                     u3081:
   824  00176C  EFFD  F00B         	goto	l3345
   825  001770                     u3080:
   826  001770                     
   827                           ; BSR set to: 0
   828  001770  51CC               	movf	_pauseIsClick& (0+255),w,b
   829  001772  A4D8               	btfss	status,2,c
   830  001774  EFBE  F00B         	goto	u3091
   831  001778  EFC0  F00B         	goto	u3090
   832  00177C                     u3091:
   833  00177C  EFFD  F00B         	goto	l3345
   834  001780                     u3090:
   835  001780                     
   836                           ; BSR set to: 0
   837  001780  51CA               	movf	_stopIsClick& (0+255),w,b
   838  001782  A4D8               	btfss	status,2,c
   839  001784  EFC6  F00B         	goto	u3101
   840  001788  EFC8  F00B         	goto	u3100
   841  00178C                     u3101:
   842  00178C  EFFD  F00B         	goto	l3345
   843  001790                     u3100:
   844  001790                     
   845                           ; BSR set to: 0
   846  001790  51C9               	movf	_menu_selected& (0+255),w,b
   847  001792  A4D8               	btfss	status,2,c
   848  001794  EFCE  F00B         	goto	u3111
   849  001798  EFD0  F00B         	goto	u3110
   850  00179C                     u3111:
   851  00179C  EFFD  F00B         	goto	l3345
   852  0017A0                     u3110:
   853  0017A0                     
   854                           ; BSR set to: 0
   855                           ;fs_main.c: 68:         {;fs_main.c: 69:             timer_value.second++;
   856  0017A0  4BAF               	infsnz	_timer_value& (0+255),f,b
   857  0017A2  2BB0               	incf	(_timer_value+1)& (0+255),f,b
   858  0017A4                     
   859                           ; BSR set to: 0
   860                           ;fs_main.c: 70:             timer_value.remainingSecond = 60 - timer_value.second;
   861  0017A4  51AF               	movf	_timer_value& (0+255),w,b
   862  0017A6  083C               	sublw	60
   863  0017A8  6FB3               	movwf	(_timer_value+4)& (0+255),b
   864  0017AA  51B0               	movf	(_timer_value+1)& (0+255),w,b
   865  0017AC  A0D8               	btfss	status,0,c
   866  0017AE  2AE8               	incf	wreg,f,c
   867  0017B0  0800               	sublw	0
   868  0017B2  6FB4               	movwf	(_timer_value+5)& (0+255),b
   869  0017B4                     
   870                           ; BSR set to: 0
   871                           ;fs_main.c: 72:             if (timer_value.remainingSecond == 59 )
   872  0017B4  0E3B               	movlw	59
   873  0017B6  19B3               	xorwf	(_timer_value+4)& (0+255),w,b
   874  0017B8  11B4               	iorwf	(_timer_value+5)& (0+255),w,b
   875  0017BA  A4D8               	btfss	status,2,c
   876  0017BC  EFE2  F00B         	goto	u3121
   877  0017C0  EFE4  F00B         	goto	u3120
   878  0017C4                     u3121:
   879  0017C4  EFEE  F00B         	goto	l3341
   880  0017C8                     u3120:
   881  0017C8                     
   882                           ; BSR set to: 0
   883                           ;fs_main.c: 73:             {;fs_main.c: 74:                 timer_value.minute++;
   884  0017C8  4BB1               	infsnz	(_timer_value+2)& (0+255),f,b
   885  0017CA  2BB2               	incf	(_timer_value+3)& (0+255),f,b
   886  0017CC                     
   887                           ; BSR set to: 0
   888                           ;fs_main.c: 75:                 timer_value.remainingMinute = menu_value.driver_time - t
      +                          imer_value.minute;
   889  0017CC  51B1               	movf	(_timer_value+2)& (0+255),w,b
   890  0017CE  5DC1               	subwf	_menu_value& (0+255),w,b
   891  0017D0  6FB5               	movwf	(_timer_value+6)& (0+255),b
   892  0017D2  51B2               	movf	(_timer_value+3)& (0+255),w,b
   893  0017D4  A0D8               	btfss	status,0,c
   894  0017D6  29B2               	incf	(_timer_value+3)& (0+255),w,b
   895  0017D8  6BB6               	clrf	(_timer_value+7)& (0+255),b
   896  0017DA  5FB6               	subwf	(_timer_value+7)& (0+255),f,b
   897  0017DC                     l3341:
   898                           
   899                           ; BSR set to: 0
   900                           ;fs_main.c: 78:             if (timer_value.second > 59)
   901  0017DC  51B0               	movf	(_timer_value+1)& (0+255),w,b
   902  0017DE  E109               	bnz	u3130
   903  0017E0  0E3C               	movlw	60
   904  0017E2  5DAF               	subwf	_timer_value& (0+255),w,b
   905  0017E4  A0D8               	btfss	status,0,c
   906  0017E6  EFF7  F00B         	goto	u3131
   907  0017EA  EFF9  F00B         	goto	u3130
   908  0017EE                     u3131:
   909  0017EE  EFFD  F00B         	goto	l3345
   910  0017F2                     u3130:
   911  0017F2                     
   912                           ; BSR set to: 0
   913                           ;fs_main.c: 79:             {;fs_main.c: 80:                 timer_value.second = 0;
   914  0017F2  0E00               	movlw	0
   915  0017F4  6FB0               	movwf	(_timer_value+1)& (0+255),b
   916  0017F6  0E00               	movlw	0
   917  0017F8  6FAF               	movwf	_timer_value& (0+255),b
   918  0017FA                     l3345:
   919                           
   920                           ; BSR set to: 0
   921                           ;fs_main.c: 85:     menuControl();
   922  0017FA  ECB7  F00D         	call	_menuControl	;wreg free
   923  0017FE  EFA7  F00B         	goto	l3319
   924  001802  EF33  F000         	goto	start
   925  001806                     __end_of_main:
   926                           	callstack 0
   927                           
   928 ;; *************** function _timer_0_init *****************
   929 ;; Defined at:
   930 ;;		line 67 in file "fs_timer.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;		None
   933 ;; Auto vars:     Size  Location     Type
   934 ;;		None
   935 ;; Return value:  Size  Location     Type
   936 ;;                  1    wreg      void 
   937 ;; Registers used:
   938 ;;		wreg, status,2
   939 ;; Tracked objects:
   940 ;;		On entry : 0/0
   941 ;;		On exit  : 0/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   944 ;;      Params:         0       0       0       0       0       0       0
   945 ;;      Locals:         0       0       0       0       0       0       0
   946 ;;      Temps:          0       0       0       0       0       0       0
   947 ;;      Totals:         0       0       0       0       0       0       0
   948 ;;Total ram usage:        0 bytes
   949 ;; Hardware stack levels used:    1
   950 ;; Hardware stack levels required when called:    1
   951 ;; This function calls:
   952 ;;		Nothing
   953 ;; This function is called by:
   954 ;;		_main
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           	psect	text1
   959  001E60                     __ptext1:
   960                           	callstack 0
   961  001E60                     _timer_0_init:
   962                           	callstack 29
   963  001E60                     
   964                           ;fs_timer.c: 69:   T0CON = 0x81;
   965  001E60  0E81               	movlw	129
   966  001E62  6ED5               	movwf	213,c	;volatile
   967                           
   968                           ;fs_timer.c: 70:   TMR0H = 0x63;
   969  001E64  0E63               	movlw	99
   970  001E66  6ED7               	movwf	215,c	;volatile
   971                           
   972                           ;fs_timer.c: 71:   TMR0L = 0xC0;
   973  001E68  0EC0               	movlw	192
   974  001E6A  6ED6               	movwf	214,c	;volatile
   975  001E6C                     
   976                           ;fs_timer.c: 72:   INTCONbits.GIE = 1;
   977  001E6C  8EF2               	bsf	242,7,c	;volatile
   978  001E6E                     
   979                           ;fs_timer.c: 73:   INTCONbits.TMR0IE = 1;
   980  001E6E  8AF2               	bsf	242,5,c	;volatile
   981  001E70  0012               	return		;funcret
   982  001E72                     __end_of_timer_0_init:
   983                           	callstack 0
   984                           
   985 ;; *************** function _system_init *****************
   986 ;; Defined at:
   987 ;;		line 83 in file "fs_mcu.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;		None
   990 ;; Auto vars:     Size  Location     Type
   991 ;;		None
   992 ;; Return value:  Size  Location     Type
   993 ;;                  1    wreg      void 
   994 ;; Registers used:
   995 ;;		wreg, status,2, cstack
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1001 ;;      Params:         0       0       0       0       0       0       0
  1002 ;;      Locals:         0       0       0       0       0       0       0
  1003 ;;      Temps:          2       0       0       0       0       0       0
  1004 ;;      Totals:         2       0       0       0       0       0       0
  1005 ;;Total ram usage:        2 bytes
  1006 ;; Hardware stack levels used:    1
  1007 ;; Hardware stack levels required when called:    2
  1008 ;; This function calls:
  1009 ;;		_eepromRead
  1010 ;; This function is called by:
  1011 ;;		_main
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           	psect	text2
  1016  001614                     __ptext2:
  1017                           	callstack 0
  1018  001614                     _system_init:
  1019                           	callstack 28
  1020  001614                     
  1021                           ;fs_mcu.c: 85:     driver_limit.pay = 0;
  1022  001614  0E00               	movlw	0
  1023  001616  0100               	movlb	0	; () banked
  1024  001618  6FA3               	movwf	_driver_limit& (0+255),b
  1025  00161A  0E00               	movlw	0
  1026  00161C  6FA4               	movwf	(_driver_limit+1)& (0+255),b
  1027  00161E  0E00               	movlw	0
  1028  001620  6FA5               	movwf	(_driver_limit+2)& (0+255),b
  1029  001622  0E00               	movlw	0
  1030  001624  6FA6               	movwf	(_driver_limit+3)& (0+255),b
  1031                           
  1032                           ;fs_mcu.c: 86:     driver_limit.payda = 0;
  1033  001626  0E00               	movlw	0
  1034  001628  6FA7               	movwf	(_driver_limit+4)& (0+255),b
  1035  00162A  0E00               	movlw	0
  1036  00162C  6FA8               	movwf	(_driver_limit+5)& (0+255),b
  1037  00162E  0E00               	movlw	0
  1038  001630  6FA9               	movwf	(_driver_limit+6)& (0+255),b
  1039  001632  0E00               	movlw	0
  1040  001634  6FAA               	movwf	(_driver_limit+7)& (0+255),b
  1041                           
  1042                           ;fs_mcu.c: 87:     driver_limit.ortalama = 0;
  1043  001636  0E00               	movlw	0
  1044  001638  6FAB               	movwf	(_driver_limit+8)& (0+255),b
  1045  00163A  0E00               	movlw	0
  1046  00163C  6FAC               	movwf	(_driver_limit+9)& (0+255),b
  1047  00163E  0E00               	movlw	0
  1048  001640  6FAD               	movwf	(_driver_limit+10)& (0+255),b
  1049  001642  0E00               	movlw	0
  1050  001644  6FAE               	movwf	(_driver_limit+11)& (0+255),b
  1051                           
  1052                           ;fs_mcu.c: 88:     convert_data.convert_channel_0 = 0;
  1053  001646  0E00               	movlw	0
  1054  001648  0101               	movlb	1	; () banked
  1055  00164A  6F00               	movwf	_convert_data& (0+255),b
  1056  00164C  0E00               	movlw	0
  1057  00164E  6F01               	movwf	(_convert_data+1)& (0+255),b
  1058  001650  0E00               	movlw	0
  1059  001652  6F02               	movwf	(_convert_data+2)& (0+255),b
  1060  001654  0E00               	movlw	0
  1061  001656  6F03               	movwf	(_convert_data+3)& (0+255),b
  1062                           
  1063                           ;fs_mcu.c: 89:     convert_data.convert_channel_1 = 0;
  1064  001658  0E00               	movlw	0
  1065  00165A  6F04               	movwf	(_convert_data+4)& (0+255),b
  1066  00165C  0E00               	movlw	0
  1067  00165E  6F05               	movwf	(_convert_data+5)& (0+255),b
  1068  001660  0E00               	movlw	0
  1069  001662  6F06               	movwf	(_convert_data+6)& (0+255),b
  1070  001664  0E00               	movlw	0
  1071  001666  6F07               	movwf	(_convert_data+7)& (0+255),b
  1072                           
  1073                           ;fs_mcu.c: 90:     convert_data.convert_channel_2 = 0;
  1074  001668  0E00               	movlw	0
  1075  00166A  6F08               	movwf	(_convert_data+8)& (0+255),b
  1076  00166C  0E00               	movlw	0
  1077  00166E  6F09               	movwf	(_convert_data+9)& (0+255),b
  1078  001670  0E00               	movlw	0
  1079  001672  6F0A               	movwf	(_convert_data+10)& (0+255),b
  1080  001674  0E00               	movlw	0
  1081  001676  6F0B               	movwf	(_convert_data+11)& (0+255),b
  1082                           
  1083                           ;fs_mcu.c: 91:     convert_data.convert_channel_3 = 0;
  1084  001678  0E00               	movlw	0
  1085  00167A  6F0C               	movwf	(_convert_data+12)& (0+255),b
  1086  00167C  0E00               	movlw	0
  1087  00167E  6F0D               	movwf	(_convert_data+13)& (0+255),b
  1088  001680  0E00               	movlw	0
  1089  001682  6F0E               	movwf	(_convert_data+14)& (0+255),b
  1090  001684  0E00               	movlw	0
  1091  001686  6F0F               	movwf	(_convert_data+15)& (0+255),b
  1092                           
  1093                           ;fs_mcu.c: 92:     convert_data.convert_channel_4 = 0;
  1094  001688  0E00               	movlw	0
  1095  00168A  6F10               	movwf	(_convert_data+16)& (0+255),b
  1096  00168C  0E00               	movlw	0
  1097  00168E  6F11               	movwf	(_convert_data+17)& (0+255),b
  1098  001690  0E00               	movlw	0
  1099  001692  6F12               	movwf	(_convert_data+18)& (0+255),b
  1100  001694  0E00               	movlw	0
  1101  001696  6F13               	movwf	(_convert_data+19)& (0+255),b
  1102                           
  1103                           ;fs_mcu.c: 93:     convert_data.convert_channel_5 = 0;
  1104  001698  0E00               	movlw	0
  1105  00169A  6F14               	movwf	(_convert_data+20)& (0+255),b
  1106  00169C  0E00               	movlw	0
  1107  00169E  6F15               	movwf	(_convert_data+21)& (0+255),b
  1108  0016A0  0E00               	movlw	0
  1109  0016A2  6F16               	movwf	(_convert_data+22)& (0+255),b
  1110  0016A4  0E00               	movlw	0
  1111  0016A6  6F17               	movwf	(_convert_data+23)& (0+255),b
  1112                           
  1113                           ;fs_mcu.c: 94:     convert_data.convert_channel_6 = 0;
  1114  0016A8  0E00               	movlw	0
  1115  0016AA  6F18               	movwf	(_convert_data+24)& (0+255),b
  1116  0016AC  0E00               	movlw	0
  1117  0016AE  6F19               	movwf	(_convert_data+25)& (0+255),b
  1118  0016B0  0E00               	movlw	0
  1119  0016B2  6F1A               	movwf	(_convert_data+26)& (0+255),b
  1120  0016B4  0E00               	movlw	0
  1121  0016B6  6F1B               	movwf	(_convert_data+27)& (0+255),b
  1122                           
  1123                           ;fs_mcu.c: 95:     convert_data.convert_channel_7 = 0;
  1124  0016B8  0E00               	movlw	0
  1125  0016BA  6F1C               	movwf	(_convert_data+28)& (0+255),b
  1126  0016BC  0E00               	movlw	0
  1127  0016BE  6F1D               	movwf	(_convert_data+29)& (0+255),b
  1128  0016C0  0E00               	movlw	0
  1129  0016C2  6F1E               	movwf	(_convert_data+30)& (0+255),b
  1130  0016C4  0E00               	movlw	0
  1131  0016C6  6F1F               	movwf	(_convert_data+31)& (0+255),b
  1132                           
  1133                           ;fs_mcu.c: 96:     controller.leftMotorSpeed = 0;
  1134  0016C8  0E00               	movlw	0
  1135  0016CA  0100               	movlb	0	; () banked
  1136  0016CC  6F87               	movwf	(_controller+7)& (0+255),b
  1137  0016CE  0E00               	movlw	0
  1138  0016D0  6F86               	movwf	(_controller+6)& (0+255),b
  1139                           
  1140                           ;fs_mcu.c: 97:     controller.rightMotorSpeed = 0;
  1141  0016D2  0E00               	movlw	0
  1142  0016D4  6F89               	movwf	(_controller+9)& (0+255),b
  1143  0016D6  0E00               	movlw	0
  1144  0016D8  6F88               	movwf	(_controller+8)& (0+255),b
  1145                           
  1146                           ;fs_mcu.c: 98:     timer_value.timer_0_counter = 0;
  1147  0016DA  0E00               	movlw	0
  1148  0016DC  6FB8               	movwf	(_timer_value+9)& (0+255),b
  1149                           
  1150                           ;fs_mcu.c: 99:     controller.error = 0;
  1151  0016DE  0E00               	movlw	0
  1152  0016E0  6F81               	movwf	(_controller+1)& (0+255),b
  1153  0016E2  0E00               	movlw	0
  1154  0016E4  6F80               	movwf	_controller& (0+255),b
  1155  0016E6                     
  1156                           ; BSR set to: 0
  1157                           ;fs_mcu.c: 101:     button_bounce_controller.menu = 0;
  1158  0016E6  905E               	bcf	_button_bounce_controller^0,0,c
  1159  0016E8                     
  1160                           ; BSR set to: 0
  1161                           ;fs_mcu.c: 102:     button_bounce_controller.pause = 0;
  1162  0016E8  965E               	bcf	_button_bounce_controller^0,3,c
  1163  0016EA                     
  1164                           ; BSR set to: 0
  1165                           ;fs_mcu.c: 103:     button_bounce_controller.start = 0;
  1166  0016EA  925E               	bcf	_button_bounce_controller^0,1,c
  1167  0016EC                     
  1168                           ; BSR set to: 0
  1169                           ;fs_mcu.c: 104:     button_bounce_controller.stop = 0;
  1170  0016EC  945E               	bcf	_button_bounce_controller^0,2,c
  1171  0016EE                     
  1172                           ; BSR set to: 0
  1173                           ;fs_mcu.c: 105:     menu_value.driver_time = (uint8_t)eepromRead(0x00);
  1174  0016EE  0E00               	movlw	0
  1175  0016F0  EC07  F00F         	call	_eepromRead
  1176  0016F4  0100               	movlb	0	; () banked
  1177  0016F6  6FC1               	movwf	_menu_value& (0+255),b
  1178  0016F8                     
  1179                           ; BSR set to: 0
  1180                           ;fs_mcu.c: 106:     menu_value.stop_time = (uint8_t)eepromRead(0x01);
  1181  0016F8  0E01               	movlw	1
  1182  0016FA  EC07  F00F         	call	_eepromRead
  1183  0016FE  0100               	movlb	0	; () banked
  1184  001700  6FC2               	movwf	(_menu_value+1)& (0+255),b
  1185  001702                     
  1186                           ; BSR set to: 0
  1187                           ;fs_mcu.c: 107:     menu_value.speed_limit = (uint8_t)eepromRead(0x02);
  1188  001702  0E02               	movlw	2
  1189  001704  EC07  F00F         	call	_eepromRead
  1190  001708  0100               	movlb	0	; () banked
  1191  00170A  6FC3               	movwf	(_menu_value+2)& (0+255),b
  1192  00170C                     
  1193                           ; BSR set to: 0
  1194                           ;fs_mcu.c: 109:     _delay((unsigned long)((700)*(64000000UL/4000.0)));
  1195  00170C  0E39               	movlw	57
  1196  00170E  6E03               	movwf	(??_system_init+1)^0,c
  1197  001710  0ED2               	movlw	210
  1198  001712  6E02               	movwf	??_system_init^0,c
  1199  001714  0E4C               	movlw	76
  1200  001716                     u3887:
  1201  001716  2EE8               	decfsz	wreg,f,c
  1202  001718  D7FE               	bra	u3887
  1203  00171A  2E02               	decfsz	??_system_init^0,f,c
  1204  00171C  D7FC               	bra	u3887
  1205  00171E  2E03               	decfsz	(??_system_init+1)^0,f,c
  1206  001720  D7FA               	bra	u3887
  1207  001722  D000               	nop2	
  1208  001724                     
  1209                           ;fs_mcu.c: 110:     timer_value.remainingMinute = menu_value.driver_time;
  1210  001724  C0C1  F0B5         	movff	_menu_value,_timer_value+6
  1211  001728  0100               	movlb	0	; () banked
  1212  00172A  6BB6               	clrf	(_timer_value+7)& (0+255),b
  1213  00172C                     
  1214                           ; BSR set to: 0
  1215                           ;fs_mcu.c: 111:     timer_value.remainingSecond = 0;
  1216  00172C  0E00               	movlw	0
  1217  00172E  6FB4               	movwf	(_timer_value+5)& (0+255),b
  1218  001730  0E00               	movlw	0
  1219  001732  6FB3               	movwf	(_timer_value+4)& (0+255),b
  1220  001734                     
  1221                           ; BSR set to: 0
  1222  001734  0012               	return		;funcret
  1223  001736                     __end_of_system_init:
  1224                           	callstack 0
  1225                           
  1226 ;; *************** function _eepromRead *****************
  1227 ;; Defined at:
  1228 ;;		line 34 in file "fs_eeprom.c"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;  address         1    wreg     unsigned char 
  1231 ;; Auto vars:     Size  Location     Type
  1232 ;;  address         1    0[COMRAM] unsigned char 
  1233 ;; Return value:  Size  Location     Type
  1234 ;;                  1    wreg      unsigned char 
  1235 ;; Registers used:
  1236 ;;		wreg, status,2
  1237 ;; Tracked objects:
  1238 ;;		On entry : 0/0
  1239 ;;		On exit  : 0/0
  1240 ;;		Unchanged: 0/0
  1241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1242 ;;      Params:         0       0       0       0       0       0       0
  1243 ;;      Locals:         1       0       0       0       0       0       0
  1244 ;;      Temps:          0       0       0       0       0       0       0
  1245 ;;      Totals:         1       0       0       0       0       0       0
  1246 ;;Total ram usage:        1 bytes
  1247 ;; Hardware stack levels used:    1
  1248 ;; Hardware stack levels required when called:    1
  1249 ;; This function calls:
  1250 ;;		Nothing
  1251 ;; This function is called by:
  1252 ;;		_system_init
  1253 ;; This function uses a non-reentrant model
  1254 ;;
  1255                           
  1256                           	psect	text3
  1257  001E0E                     __ptext3:
  1258                           	callstack 0
  1259  001E0E                     _eepromRead:
  1260                           	callstack 28
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;incstack = 0
  1264                           ;eepromRead@address stored from wreg
  1265  001E0E  6E01               	movwf	eepromRead@address^0,c
  1266  001E10                     
  1267                           ;fs_eeprom.c: 34: uint8_t eepromRead(uint8_t address);fs_eeprom.c: 35: {;fs_eeprom.c: 39
      +                          :     EEADR = (uint8_t)address;
  1268  001E10  C001  FFA9         	movff	eepromRead@address,4009	;volatile
  1269  001E14                     
  1270                           ;fs_eeprom.c: 41:     EECON1bits.EEPGD = 0;
  1271  001E14  9EA6               	bcf	166,7,c	;volsfr
  1272  001E16                     
  1273                           ;fs_eeprom.c: 42:     EECON1bits.CFGS = 0;
  1274  001E16  9CA6               	bcf	166,6,c	;volsfr
  1275  001E18                     
  1276                           ;fs_eeprom.c: 43:     EECON1bits.RD = 1;
  1277  001E18  80A6               	bsf	166,0,c	;volsfr
  1278  001E1A                     l70:
  1279  001E1A  B0A6               	btfsc	166,0,c	;volsfr
  1280  001E1C  EF12  F00F         	goto	u1971
  1281  001E20  EF14  F00F         	goto	u1970
  1282  001E24                     u1971:
  1283  001E24  EF0D  F00F         	goto	l70
  1284  001E28                     u1970:
  1285  001E28                     
  1286                           ;fs_eeprom.c: 49:     return EEDATA;
  1287  001E28  50A8               	movf	168,w,c	;volatile
  1288  001E2A  0012               	return		;funcret
  1289  001E2C                     __end_of_eepromRead:
  1290                           	callstack 0
  1291                           
  1292 ;; *************** function _menuInitialize *****************
  1293 ;; Defined at:
  1294 ;;		line 38 in file "fs_menu_controller.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;		None
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;		None
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  1    wreg      void 
  1301 ;; Registers used:
  1302 ;;		None
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1308 ;;      Params:         0       0       0       0       0       0       0
  1309 ;;      Locals:         0       0       0       0       0       0       0
  1310 ;;      Temps:          0       0       0       0       0       0       0
  1311 ;;      Totals:         0       0       0       0       0       0       0
  1312 ;;Total ram usage:        0 bytes
  1313 ;; Hardware stack levels used:    1
  1314 ;; Hardware stack levels required when called:    1
  1315 ;; This function calls:
  1316 ;;		Nothing
  1317 ;; This function is called by:
  1318 ;;		_main
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text4
  1323  001DEA                     __ptext4:
  1324                           	callstack 0
  1325  001DEA                     _menuInitialize:
  1326                           	callstack 29
  1327  001DEA                     
  1328                           ;fs_menu_controller.c: 40:     ANSELBbits.ANSB5 = 0;
  1329  001DEA  010F               	movlb	15	; () banked
  1330  001DEC  9B39               	bcf	57,5,b	;volatile
  1331                           
  1332                           ;fs_menu_controller.c: 41:     TRISBbits.RB5 = 1;
  1333  001DEE  8A93               	bsf	147,5,c	;volatile
  1334                           
  1335                           ;fs_menu_controller.c: 43:     ANSELBbits.ANSB4 = 0;
  1336  001DF0  9939               	bcf	57,4,b	;volatile
  1337                           
  1338                           ;fs_menu_controller.c: 44:     TRISBbits.RB4 = 1;
  1339  001DF2  8893               	bsf	147,4,c	;volatile
  1340                           
  1341                           ;fs_menu_controller.c: 46:     ANSELBbits.ANSB3 = 0;
  1342  001DF4  9739               	bcf	57,3,b	;volatile
  1343                           
  1344                           ;fs_menu_controller.c: 47:     TRISBbits.RB3 = 1;
  1345  001DF6  8693               	bsf	147,3,c	;volatile
  1346                           
  1347                           ;fs_menu_controller.c: 49:     ANSELAbits.ANSA0 = 0;
  1348  001DF8  9138               	bcf	56,0,b	;volatile
  1349                           
  1350                           ;fs_menu_controller.c: 50:     TRISAbits.RA0 = 1;
  1351  001DFA  8092               	bsf	146,0,c	;volatile
  1352                           
  1353                           ;fs_menu_controller.c: 52:     ANSELAbits.ANSA5 = 0;
  1354  001DFC  9B38               	bcf	56,5,b	;volatile
  1355                           
  1356                           ;fs_menu_controller.c: 53:     TRISAbits.RA5 = 1;
  1357  001DFE  8A92               	bsf	146,5,c	;volatile
  1358                           
  1359                           ;fs_menu_controller.c: 55:     ANSELBbits.ANSB2 = 0;
  1360  001E00  9539               	bcf	57,2,b	;volatile
  1361                           
  1362                           ;fs_menu_controller.c: 56:     TRISBbits.RB2 = 1;
  1363  001E02  8493               	bsf	147,2,c	;volatile
  1364                           
  1365                           ;fs_menu_controller.c: 58:     ANSELEbits.ANSE2 = 0;
  1366  001E04  953C               	bcf	60,2,b	;volatile
  1367                           
  1368                           ;fs_menu_controller.c: 59:     TRISEbits.RE2 = 0;
  1369  001E06  9496               	bcf	150,2,c	;volatile
  1370                           
  1371                           ;fs_menu_controller.c: 61:     TRISAbits.RA4 = 0;
  1372  001E08  9892               	bcf	146,4,c	;volatile
  1373                           
  1374                           ;fs_menu_controller.c: 62:     TRISBbits.RB6 = 0;
  1375  001E0A  9C93               	bcf	147,6,c	;volatile
  1376  001E0C                     
  1377                           ; BSR set to: 15
  1378  001E0C  0012               	return		;funcret
  1379  001E0E                     __end_of_menuInitialize:
  1380                           	callstack 0
  1381                           
  1382 ;; *************** function _menuControl *****************
  1383 ;; Defined at:
  1384 ;;		line 155 in file "fs_menu_controller.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;		None
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;		None
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1398 ;;      Params:         0       0       0       0       0       0       0
  1399 ;;      Locals:         0       0       0       0       0       0       0
  1400 ;;      Temps:          0       0       0       0       0       0       0
  1401 ;;      Totals:         0       0       0       0       0       0       0
  1402 ;;Total ram usage:        0 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:   10
  1405 ;; This function calls:
  1406 ;;		_buttonControlFlags
  1407 ;;		_stateMachine
  1408 ;; This function is called by:
  1409 ;;		_main
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text5
  1414  001B6E                     __ptext5:
  1415                           	callstack 0
  1416  001B6E                     _menuControl:
  1417                           	callstack 20
  1418  001B6E                     
  1419                           ;fs_menu_controller.c: 157:     buttonControlFlags();
  1420  001B6E  ECC1  F008         	call	_buttonControlFlags	;wreg free
  1421  001B72                     
  1422                           ;fs_menu_controller.c: 158:     stateMachine();
  1423  001B72  EC4D  F003         	call	_stateMachine	;wreg free
  1424  001B76                     
  1425                           ;fs_menu_controller.c: 160:     if (menu_flags.menu_start_flag == 1)
  1426  001B76  0100               	movlb	0	; () banked
  1427  001B78  A3C8               	btfss	_menu_flags& (0+255),1,b
  1428  001B7A  EFC1  F00D         	goto	u2631
  1429  001B7E  EFC3  F00D         	goto	u2630
  1430  001B82                     u2631:
  1431  001B82  EFCA  F00D         	goto	l3009
  1432  001B86                     u2630:
  1433  001B86                     
  1434                           ; BSR set to: 0
  1435                           ;fs_menu_controller.c: 161:     {;fs_menu_controller.c: 162:         menu_flags.menu_sta
      +                          rt_flag = 0;
  1436  001B86  93C8               	bcf	_menu_flags& (0+255),1,b
  1437  001B88                     
  1438                           ; BSR set to: 0
  1439                           ;fs_menu_controller.c: 163:         startIsClick = 1;
  1440  001B88  0E01               	movlw	1
  1441  001B8A  6FCB               	movwf	_startIsClick& (0+255),b
  1442                           
  1443                           ;fs_menu_controller.c: 164:         pauseIsClick = 0;
  1444  001B8C  0E00               	movlw	0
  1445  001B8E  6FCC               	movwf	_pauseIsClick& (0+255),b
  1446                           
  1447                           ;fs_menu_controller.c: 165:         stopIsClick = 0;
  1448  001B90  0E00               	movlw	0
  1449  001B92  6FCA               	movwf	_stopIsClick& (0+255),b
  1450  001B94                     l3009:
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;fs_menu_controller.c: 169:     if (menu_flags.menu_pause_flag == 1)
  1454  001B94  A7C8               	btfss	_menu_flags& (0+255),3,b
  1455  001B96  EFCF  F00D         	goto	u2641
  1456  001B9A  EFD1  F00D         	goto	u2640
  1457  001B9E                     u2641:
  1458  001B9E  EFD8  F00D         	goto	l3015
  1459  001BA2                     u2640:
  1460  001BA2                     
  1461                           ; BSR set to: 0
  1462                           ;fs_menu_controller.c: 170:     {;fs_menu_controller.c: 171:         menu_flags.menu_pau
      +                          se_flag = 0;
  1463  001BA2  97C8               	bcf	_menu_flags& (0+255),3,b
  1464  001BA4                     
  1465                           ; BSR set to: 0
  1466                           ;fs_menu_controller.c: 172:         pauseIsClick = 1;
  1467  001BA4  0E01               	movlw	1
  1468  001BA6  6FCC               	movwf	_pauseIsClick& (0+255),b
  1469                           
  1470                           ;fs_menu_controller.c: 173:         startIsClick = 0;
  1471  001BA8  0E00               	movlw	0
  1472  001BAA  6FCB               	movwf	_startIsClick& (0+255),b
  1473                           
  1474                           ;fs_menu_controller.c: 174:         stopIsClick = 0;
  1475  001BAC  0E00               	movlw	0
  1476  001BAE  6FCA               	movwf	_stopIsClick& (0+255),b
  1477  001BB0                     l3015:
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;fs_menu_controller.c: 177:     if (menu_flags.menu_stop_flag == 1)
  1481  001BB0  A5C8               	btfss	_menu_flags& (0+255),2,b
  1482  001BB2  EFDD  F00D         	goto	u2651
  1483  001BB6  EFDF  F00D         	goto	u2650
  1484  001BBA                     u2651:
  1485  001BBA  EFE6  F00D         	goto	l338
  1486  001BBE                     u2650:
  1487  001BBE                     
  1488                           ; BSR set to: 0
  1489                           ;fs_menu_controller.c: 178:     {;fs_menu_controller.c: 179:         menu_flags.menu_sto
      +                          p_flag = 0;
  1490  001BBE  95C8               	bcf	_menu_flags& (0+255),2,b
  1491  001BC0                     
  1492                           ; BSR set to: 0
  1493                           ;fs_menu_controller.c: 180:         pauseIsClick = 0;
  1494  001BC0  0E00               	movlw	0
  1495  001BC2  6FCC               	movwf	_pauseIsClick& (0+255),b
  1496                           
  1497                           ;fs_menu_controller.c: 181:         startIsClick = 0;
  1498  001BC4  0E00               	movlw	0
  1499  001BC6  6FCB               	movwf	_startIsClick& (0+255),b
  1500                           
  1501                           ;fs_menu_controller.c: 182:         stopIsClick = 1;
  1502  001BC8  0E01               	movlw	1
  1503  001BCA  6FCA               	movwf	_stopIsClick& (0+255),b
  1504  001BCC                     l338:
  1505                           
  1506                           ; BSR set to: 0
  1507  001BCC  0012               	return		;funcret
  1508  001BCE                     __end_of_menuControl:
  1509                           	callstack 0
  1510                           
  1511 ;; *************** function _stateMachine *****************
  1512 ;; Defined at:
  1513 ;;		line 193 in file "fs_menu_controller.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;		None
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  textCursor2    16   18[BANK0 ] unsigned char [16]
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  1    wreg      void 
  1520 ;; Registers used:
  1521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1527 ;;      Params:         0       0       0       0       0       0       0
  1528 ;;      Locals:         0      16       0       0       0       0       0
  1529 ;;      Temps:          2       0       0       0       0       0       0
  1530 ;;      Totals:         2      16       0       0       0       0       0
  1531 ;;Total ram usage:       18 bytes
  1532 ;; Hardware stack levels used:    1
  1533 ;; Hardware stack levels required when called:    9
  1534 ;; This function calls:
  1535 ;;		_Lcd_Set_Cursor
  1536 ;;		_Lcd_Write_String
  1537 ;;		_eepromWrite
  1538 ;;		_sprintf
  1539 ;; This function is called by:
  1540 ;;		_menuControl
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text6
  1545  00069A                     __ptext6:
  1546                           	callstack 0
  1547  00069A                     _stateMachine:
  1548                           	callstack 20
  1549  00069A                     
  1550                           ;fs_menu_controller.c: 195:     char textCursor2[16] = {0};
  1551  00069A  EE20  F0E0         	lfsr	2,stateMachine@textCursor2
  1552  00069E  0E0F               	movlw	15
  1553  0006A0                     u2231:
  1554  0006A0  6ADE               	clrf	postinc2,c
  1555  0006A2  06E8               	decf	wreg,f,c
  1556  0006A4  E2FD               	bc	u2231
  1557                           
  1558                           ;fs_menu_controller.c: 197:     switch (menu_selected)
  1559  0006A6  EF49  F006         	goto	l2911
  1560  0006AA                     l344:
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;fs_menu_controller.c: 201:             LATBbits.LATB6 = 0;
  1564  0006AA  9C8A               	bcf	138,6,c	;volatile
  1565                           
  1566                           ;fs_menu_controller.c: 202:             LATAbits.LATA4 = 1;
  1567  0006AC  8889               	bsf	137,4,c	;volatile
  1568                           
  1569                           ;fs_menu_controller.c: 203:             LATEbits.LATE2 = 0;
  1570  0006AE  948D               	bcf	141,2,c	;volatile
  1571  0006B0                     
  1572                           ; BSR set to: 0
  1573                           ;fs_menu_controller.c: 204:             Lcd_Set_Cursor(1,1);
  1574  0006B0  0E01               	movlw	1
  1575  0006B2  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1576  0006B4  0E01               	movlw	1
  1577  0006B6  EC53  F00D         	call	_Lcd_Set_Cursor
  1578  0006BA                     
  1579                           ;fs_menu_controller.c: 205:             Lcd_Write_String("KALAN ZAMAN     ");
  1580  0006BA  0E24               	movlw	low STR_1
  1581  0006BC  6E05               	movwf	Lcd_Write_String@a^0,c
  1582  0006BE  0E06               	movlw	high STR_1
  1583  0006C0  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1584  0006C2  EC14  F00D         	call	_Lcd_Write_String	;wreg free
  1585  0006C6                     
  1586                           ;fs_menu_controller.c: 206:             Lcd_Set_Cursor(2,1);
  1587  0006C6  0E01               	movlw	1
  1588  0006C8  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1589  0006CA  0E02               	movlw	2
  1590  0006CC  EC53  F00D         	call	_Lcd_Set_Cursor
  1591  0006D0                     
  1592                           ;fs_menu_controller.c: 207:             sprintf(textCursor2,"      %d:%d   ",timer_value
      +                          .remainingMinute,timer_value.remainingSecond);
  1593  0006D0  0EE0               	movlw	low stateMachine@textCursor2
  1594  0006D2  0100               	movlb	0	; () banked
  1595  0006D4  6FCE               	movwf	sprintf@s& (0+255),b
  1596  0006D6  0E00               	movlw	high stateMachine@textCursor2
  1597  0006D8  6FCF               	movwf	(sprintf@s+1)& (0+255),b
  1598  0006DA  0E89               	movlw	low STR_2
  1599  0006DC  6FD0               	movwf	sprintf@fmt& (0+255),b
  1600  0006DE  0E06               	movlw	high STR_2
  1601  0006E0  6FD1               	movwf	(sprintf@fmt+1)& (0+255),b
  1602  0006E2  C0B5  F0D2         	movff	_timer_value+6,?_sprintf+4
  1603  0006E6  C0B6  F0D3         	movff	_timer_value+7,?_sprintf+5
  1604  0006EA  C0B3  F0D4         	movff	_timer_value+4,?_sprintf+6
  1605  0006EE  C0B4  F0D5         	movff	_timer_value+5,?_sprintf+7
  1606  0006F2  EC15  F00E         	call	_sprintf	;wreg free
  1607  0006F6                     
  1608                           ;fs_menu_controller.c: 208:             Lcd_Write_String(textCursor2);
  1609  0006F6  0EE0               	movlw	low stateMachine@textCursor2
  1610  0006F8  6E05               	movwf	Lcd_Write_String@a^0,c
  1611  0006FA  0E00               	movlw	high stateMachine@textCursor2
  1612  0006FC  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1613  0006FE  EC14  F00D         	call	_Lcd_Write_String	;wreg free
  1614  000702                     
  1615                           ;fs_menu_controller.c: 210:             if ( timer_value.menu_login_delay == 100)
  1616  000702  0E64               	movlw	100
  1617  000704  0100               	movlb	0	; () banked
  1618  000706  19B7               	xorwf	(_timer_value+8)& (0+255),w,b
  1619  000708  A4D8               	btfss	status,2,c
  1620  00070A  EF89  F003         	goto	u2241
  1621  00070E  EF8B  F003         	goto	u2240
  1622  000712                     u2241:
  1623  000712  EF8F  F003         	goto	l2691
  1624  000716                     u2240:
  1625  000716                     
  1626                           ; BSR set to: 0
  1627                           ;fs_menu_controller.c: 211:             {;fs_menu_controller.c: 212:                 tim
      +                          er_value.menu_login_delay = 0;
  1628  000716  0E00               	movlw	0
  1629  000718  6FB7               	movwf	(_timer_value+8)& (0+255),b
  1630                           
  1631                           ;fs_menu_controller.c: 213:                 menu_selected = DRIVER_TIME_SETTING;
  1632  00071A  0E01               	movlw	1
  1633  00071C  6FC9               	movwf	_menu_selected& (0+255),b
  1634  00071E                     l2691:
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;fs_menu_controller.c: 216:             if ((timer_value.remainingMinute <= 0) && (timer
      +                          _value.remainingSecond == 0) )
  1638  00071E  BFB6               	btfsc	(_timer_value+7)& (0+255),7,b
  1639  000720  EF9C  F003         	goto	u2250
  1640  000724  51B6               	movf	(_timer_value+7)& (0+255),w,b
  1641  000726  E106               	bnz	u2251
  1642  000728  05B5               	decf	(_timer_value+6)& (0+255),w,b
  1643  00072A  B0D8               	btfsc	status,0,c
  1644  00072C  EF9A  F003         	goto	u2251
  1645  000730  EF9C  F003         	goto	u2250
  1646  000734                     u2251:
  1647  000734  EFAB  F003         	goto	l346
  1648  000738                     u2250:
  1649  000738                     
  1650                           ; BSR set to: 0
  1651  000738  51B3               	movf	(_timer_value+4)& (0+255),w,b
  1652  00073A  11B4               	iorwf	(_timer_value+5)& (0+255),w,b
  1653  00073C  A4D8               	btfss	status,2,c
  1654  00073E  EFA3  F003         	goto	u2261
  1655  000742  EFA5  F003         	goto	u2260
  1656  000746                     u2261:
  1657  000746  EFAB  F003         	goto	l346
  1658  00074A                     u2260:
  1659  00074A                     
  1660                           ; BSR set to: 0
  1661                           ;fs_menu_controller.c: 217:             {;fs_menu_controller.c: 218:                    
      +                           menu_selected = STOP_MENU;
  1662  00074A  0E04               	movlw	4
  1663  00074C  6FC9               	movwf	_menu_selected& (0+255),b
  1664                           
  1665                           ;fs_menu_controller.c: 219:                     timer_value.minute = 0;
  1666  00074E  0E00               	movlw	0
  1667  000750  6FB2               	movwf	(_timer_value+3)& (0+255),b
  1668  000752  0E00               	movlw	0
  1669  000754  6FB1               	movwf	(_timer_value+2)& (0+255),b
  1670  000756                     l346:
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;fs_menu_controller.c: 222:             if ( (startIsClick == 0) && (pauseIsClick == 1) 
      +                          && (stopIsClick == 0) && (menu_selected == MAIN_MENU))
  1674  000756  51CB               	movf	_startIsClick& (0+255),w,b
  1675  000758  A4D8               	btfss	status,2,c
  1676  00075A  EFB1  F003         	goto	u2271
  1677  00075E  EFB3  F003         	goto	u2270
  1678  000762                     u2271:
  1679  000762  EFCD  F003         	goto	l347
  1680  000766                     u2270:
  1681  000766                     
  1682                           ; BSR set to: 0
  1683  000766  05CC               	decf	_pauseIsClick& (0+255),w,b
  1684  000768  A4D8               	btfss	status,2,c
  1685  00076A  EFB9  F003         	goto	u2281
  1686  00076E  EFBB  F003         	goto	u2280
  1687  000772                     u2281:
  1688  000772  EFCD  F003         	goto	l347
  1689  000776                     u2280:
  1690  000776                     
  1691                           ; BSR set to: 0
  1692  000776  51CA               	movf	_stopIsClick& (0+255),w,b
  1693  000778  A4D8               	btfss	status,2,c
  1694  00077A  EFC1  F003         	goto	u2291
  1695  00077E  EFC3  F003         	goto	u2290
  1696  000782                     u2291:
  1697  000782  EFCD  F003         	goto	l347
  1698  000786                     u2290:
  1699  000786                     
  1700                           ; BSR set to: 0
  1701  000786  51C9               	movf	_menu_selected& (0+255),w,b
  1702  000788  A4D8               	btfss	status,2,c
  1703  00078A  EFC9  F003         	goto	u2301
  1704  00078E  EFCB  F003         	goto	u2300
  1705  000792                     u2301:
  1706  000792  EFCD  F003         	goto	l347
  1707  000796                     u2300:
  1708  000796                     
  1709                           ; BSR set to: 0
  1710                           ;fs_menu_controller.c: 223:             {;fs_menu_controller.c: 224:                 men
      +                          u_selected = PAUSE_MENU;
  1711  000796  0E06               	movlw	6
  1712  000798  6FC9               	movwf	_menu_selected& (0+255),b
  1713  00079A                     l347:
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;fs_menu_controller.c: 227:             if ( (startIsClick == 0) && (pauseIsClick == 0) 
      +                          && (stopIsClick == 1) && (menu_selected == MAIN_MENU) )
  1717  00079A  51CB               	movf	_startIsClick& (0+255),w,b
  1718  00079C  A4D8               	btfss	status,2,c
  1719  00079E  EFD3  F003         	goto	u2311
  1720  0007A2  EFD5  F003         	goto	u2310
  1721  0007A6                     u2311:
  1722  0007A6  EF77  F006         	goto	l374
  1723  0007AA                     u2310:
  1724  0007AA                     
  1725                           ; BSR set to: 0
  1726  0007AA  51CC               	movf	_pauseIsClick& (0+255),w,b
  1727  0007AC  A4D8               	btfss	status,2,c
  1728  0007AE  EFDB  F003         	goto	u2321
  1729  0007B2  EFDD  F003         	goto	u2320
  1730  0007B6                     u2321:
  1731  0007B6  EF77  F006         	goto	l374
  1732  0007BA                     u2320:
  1733  0007BA                     
  1734                           ; BSR set to: 0
  1735  0007BA  05CA               	decf	_stopIsClick& (0+255),w,b
  1736  0007BC  A4D8               	btfss	status,2,c
  1737  0007BE  EFE3  F003         	goto	u2331
  1738  0007C2  EFE5  F003         	goto	u2330
  1739  0007C6                     u2331:
  1740  0007C6  EF77  F006         	goto	l374
  1741  0007CA                     u2330:
  1742  0007CA                     
  1743                           ; BSR set to: 0
  1744  0007CA  51C9               	movf	_menu_selected& (0+255),w,b
  1745  0007CC  A4D8               	btfss	status,2,c
  1746  0007CE  EFEB  F003         	goto	u2341
  1747  0007D2  EFED  F003         	goto	u2340
  1748  0007D6                     u2341:
  1749  0007D6  EF77  F006         	goto	l374
  1750  0007DA                     u2340:
  1751  0007DA                     
  1752                           ; BSR set to: 0
  1753                           ;fs_menu_controller.c: 228:             {;fs_menu_controller.c: 229:                  ti
      +                          mer_value.remainingMinute = menu_value.driver_time;
  1754  0007DA  C0C1  F0B5         	movff	_menu_value,_timer_value+6
  1755  0007DE  6BB6               	clrf	(_timer_value+7)& (0+255),b
  1756  0007E0                     
  1757                           ; BSR set to: 0
  1758                           ;fs_menu_controller.c: 230:                  timer_value.remainingSecond = 0;
  1759  0007E0  0E00               	movlw	0
  1760  0007E2  6FB4               	movwf	(_timer_value+5)& (0+255),b
  1761  0007E4  0E00               	movlw	0
  1762  0007E6  6FB3               	movwf	(_timer_value+4)& (0+255),b
  1763                           
  1764                           ;fs_menu_controller.c: 231:                  timer_value.second = 0;
  1765  0007E8  0E00               	movlw	0
  1766  0007EA  6FB0               	movwf	(_timer_value+1)& (0+255),b
  1767  0007EC  0E00               	movlw	0
  1768  0007EE  6FAF               	movwf	_timer_value& (0+255),b
  1769                           
  1770                           ;fs_menu_controller.c: 232:                  timer_value.minute = 0;
  1771  0007F0  0E00               	movlw	0
  1772  0007F2  6FB2               	movwf	(_timer_value+3)& (0+255),b
  1773  0007F4  0E00               	movlw	0
  1774  0007F6  6FB1               	movwf	(_timer_value+2)& (0+255),b
  1775  0007F8  EF77  F006         	goto	l374
  1776  0007FC                     l350:
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;fs_menu_controller.c: 240:             LATBbits.LATB6 = 0;
  1780  0007FC  9C8A               	bcf	138,6,c	;volatile
  1781                           
  1782                           ;fs_menu_controller.c: 241:             LATAbits.LATA4 = 0;
  1783  0007FE  9889               	bcf	137,4,c	;volatile
  1784                           
  1785                           ;fs_menu_controller.c: 242:             LATEbits.LATE2 = 1;
  1786  000800  848D               	bsf	141,2,c	;volatile
  1787                           
  1788                           ;fs_menu_controller.c: 244:             if (menu_flags.menu_input_flag == 1)
  1789  000802  A1C8               	btfss	_menu_flags& (0+255),0,b
  1790  000804  EF06  F004         	goto	u2351
  1791  000808  EF08  F004         	goto	u2350
  1792  00080C                     u2351:
  1793  00080C  EF0B  F004         	goto	l2719
  1794  000810                     u2350:
  1795  000810                     
  1796                           ; BSR set to: 0
  1797                           ;fs_menu_controller.c: 245:             {;fs_menu_controller.c: 246:                 men
      +                          u_flags.menu_input_flag = 0;
  1798  000810  91C8               	bcf	_menu_flags& (0+255),0,b
  1799  000812                     
  1800                           ; BSR set to: 0
  1801                           ;fs_menu_controller.c: 247:                 menu_selected = STOP_TIME_SETTING;
  1802  000812  0E02               	movlw	2
  1803  000814  6FC9               	movwf	_menu_selected& (0+255),b
  1804  000816                     l2719:
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;fs_menu_controller.c: 250:             if ((menu_flags.menu_increase_flag == 1) && (men
      +                          u_value.driver_time < 30))
  1808  000816  A9C8               	btfss	_menu_flags& (0+255),4,b
  1809  000818  EF10  F004         	goto	u2361
  1810  00081C  EF12  F004         	goto	u2360
  1811  000820                     u2361:
  1812  000820  EF31  F004         	goto	l2737
  1813  000824                     u2360:
  1814  000824                     
  1815                           ; BSR set to: 0
  1816  000824  0E1E               	movlw	30
  1817  000826  61C1               	cpfslt	_menu_value& (0+255),b
  1818  000828  EF18  F004         	goto	u2371
  1819  00082C  EF1A  F004         	goto	u2370
  1820  000830                     u2371:
  1821  000830  EF31  F004         	goto	l2737
  1822  000834                     u2370:
  1823  000834                     
  1824                           ; BSR set to: 0
  1825                           ;fs_menu_controller.c: 251:             {;fs_menu_controller.c: 252:                 men
      +                          u_flags.menu_increase_flag = 0;
  1826  000834  99C8               	bcf	_menu_flags& (0+255),4,b
  1827  000836                     
  1828                           ; BSR set to: 0
  1829                           ;fs_menu_controller.c: 253:                 menu_value.driver_time++;
  1830  000836  2BC1               	incf	_menu_value& (0+255),f,b
  1831  000838                     
  1832                           ; BSR set to: 0
  1833                           ;fs_menu_controller.c: 254:                 eepromWrite(0x00,(uint8_t)menu_value.driver_
      +                          time);
  1834  000838  C0C1  F001         	movff	_menu_value,eepromWrite@data
  1835  00083C  0E00               	movlw	0
  1836  00083E  ECDE  F00E         	call	_eepromWrite
  1837  000842                     
  1838                           ;fs_menu_controller.c: 255:                 timer_value.minute =0 ;
  1839  000842  0E00               	movlw	0
  1840  000844  0100               	movlb	0	; () banked
  1841  000846  6FB2               	movwf	(_timer_value+3)& (0+255),b
  1842  000848  0E00               	movlw	0
  1843  00084A  6FB1               	movwf	(_timer_value+2)& (0+255),b
  1844  00084C                     
  1845                           ; BSR set to: 0
  1846                           ;fs_menu_controller.c: 256:                 timer_value.second = 0;
  1847  00084C  0E00               	movlw	0
  1848  00084E  6FB0               	movwf	(_timer_value+1)& (0+255),b
  1849  000850  0E00               	movlw	0
  1850  000852  6FAF               	movwf	_timer_value& (0+255),b
  1851  000854                     
  1852                           ; BSR set to: 0
  1853                           ;fs_menu_controller.c: 257:                 timer_value.remainingSecond = 0;
  1854  000854  0E00               	movlw	0
  1855  000856  6FB4               	movwf	(_timer_value+5)& (0+255),b
  1856  000858  0E00               	movlw	0
  1857  00085A  6FB3               	movwf	(_timer_value+4)& (0+255),b
  1858  00085C                     
  1859                           ; BSR set to: 0
  1860                           ;fs_menu_controller.c: 258:                 timer_value.remainingMinute = menu_value.dri
      +                          ver_time;
  1861  00085C  C0C1  F0B5         	movff	_menu_value,_timer_value+6
  1862  000860  6BB6               	clrf	(_timer_value+7)& (0+255),b
  1863  000862                     l2737:
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;fs_menu_controller.c: 261:             if ((menu_flags.menu_decrease_flag == 1) && (men
      +                          u_value.driver_time > 0))
  1867  000862  ABC8               	btfss	_menu_flags& (0+255),5,b
  1868  000864  EF36  F004         	goto	u2381
  1869  000868  EF38  F004         	goto	u2380
  1870  00086C                     u2381:
  1871  00086C  EF57  F004         	goto	l2755
  1872  000870                     u2380:
  1873  000870                     
  1874                           ; BSR set to: 0
  1875  000870  51C1               	movf	_menu_value& (0+255),w,b
  1876  000872  B4D8               	btfsc	status,2,c
  1877  000874  EF3E  F004         	goto	u2391
  1878  000878  EF40  F004         	goto	u2390
  1879  00087C                     u2391:
  1880  00087C  EF57  F004         	goto	l2755
  1881  000880                     u2390:
  1882  000880                     
  1883                           ; BSR set to: 0
  1884                           ;fs_menu_controller.c: 262:             {;fs_menu_controller.c: 263:                  me
      +                          nu_flags.menu_decrease_flag = 0;
  1885  000880  9BC8               	bcf	_menu_flags& (0+255),5,b
  1886  000882                     
  1887                           ; BSR set to: 0
  1888                           ;fs_menu_controller.c: 264:                  menu_value.driver_time--;
  1889  000882  07C1               	decf	_menu_value& (0+255),f,b
  1890  000884                     
  1891                           ; BSR set to: 0
  1892                           ;fs_menu_controller.c: 265:                  eepromWrite(0x00,(uint8_t)menu_value.driver
      +                          _time);
  1893  000884  C0C1  F001         	movff	_menu_value,eepromWrite@data
  1894  000888  0E00               	movlw	0
  1895  00088A  ECDE  F00E         	call	_eepromWrite
  1896  00088E                     
  1897                           ;fs_menu_controller.c: 266:                  timer_value.minute =0 ;
  1898  00088E  0E00               	movlw	0
  1899  000890  0100               	movlb	0	; () banked
  1900  000892  6FB2               	movwf	(_timer_value+3)& (0+255),b
  1901  000894  0E00               	movlw	0
  1902  000896  6FB1               	movwf	(_timer_value+2)& (0+255),b
  1903  000898                     
  1904                           ; BSR set to: 0
  1905                           ;fs_menu_controller.c: 267:                  timer_value.second = 0;
  1906  000898  0E00               	movlw	0
  1907  00089A  6FB0               	movwf	(_timer_value+1)& (0+255),b
  1908  00089C  0E00               	movlw	0
  1909  00089E  6FAF               	movwf	_timer_value& (0+255),b
  1910  0008A0                     
  1911                           ; BSR set to: 0
  1912                           ;fs_menu_controller.c: 268:                  timer_value.remainingSecond = 0;
  1913  0008A0  0E00               	movlw	0
  1914  0008A2  6FB4               	movwf	(_timer_value+5)& (0+255),b
  1915  0008A4  0E00               	movlw	0
  1916  0008A6  6FB3               	movwf	(_timer_value+4)& (0+255),b
  1917  0008A8                     
  1918                           ; BSR set to: 0
  1919                           ;fs_menu_controller.c: 269:                  timer_value.remainingMinute = menu_value.dr
      +                          iver_time;
  1920  0008A8  C0C1  F0B5         	movff	_menu_value,_timer_value+6
  1921  0008AC  6BB6               	clrf	(_timer_value+7)& (0+255),b
  1922  0008AE                     l2755:
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;fs_menu_controller.c: 273:             Lcd_Set_Cursor(1,1);
  1926  0008AE  0E01               	movlw	1
  1927  0008B0  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1928  0008B2  0E01               	movlw	1
  1929  0008B4  EC53  F00D         	call	_Lcd_Set_Cursor
  1930  0008B8                     
  1931                           ;fs_menu_controller.c: 274:             Lcd_Write_String("HAREKT ZAMANI dk");
  1932  0008B8  0E57               	movlw	low STR_3
  1933  0008BA  6E05               	movwf	Lcd_Write_String@a^0,c
  1934  0008BC  0E06               	movlw	high STR_3
  1935  0008BE  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1936  0008C0  EC14  F00D         	call	_Lcd_Write_String	;wreg free
  1937  0008C4                     
  1938                           ;fs_menu_controller.c: 275:             Lcd_Set_Cursor(2,1);
  1939  0008C4  0E01               	movlw	1
  1940  0008C6  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1941  0008C8  0E02               	movlw	2
  1942  0008CA  EC53  F00D         	call	_Lcd_Set_Cursor
  1943  0008CE                     
  1944                           ;fs_menu_controller.c: 276:             sprintf(textCursor2,"%d               ",menu_val
      +                          ue.driver_time);
  1945  0008CE  0EE0               	movlw	low stateMachine@textCursor2
  1946  0008D0  0100               	movlb	0	; () banked
  1947  0008D2  6FCE               	movwf	sprintf@s& (0+255),b
  1948  0008D4  0E00               	movlw	high stateMachine@textCursor2
  1949  0008D6  6FCF               	movwf	(sprintf@s+1)& (0+255),b
  1950  0008D8  0E01               	movlw	low STR_4
  1951  0008DA  6FD0               	movwf	sprintf@fmt& (0+255),b
  1952  0008DC  0E06               	movlw	high STR_4
  1953  0008DE  6FD1               	movwf	(sprintf@fmt+1)& (0+255),b
  1954  0008E0  C0C1  F0D2         	movff	_menu_value,?_sprintf+4
  1955  0008E4  6BD3               	clrf	(?_sprintf+5)& (0+255),b
  1956  0008E6  EC15  F00E         	call	_sprintf	;wreg free
  1957  0008EA                     
  1958                           ;fs_menu_controller.c: 277:             Lcd_Write_String(textCursor2);
  1959  0008EA  0EE0               	movlw	low stateMachine@textCursor2
  1960  0008EC  6E05               	movwf	Lcd_Write_String@a^0,c
  1961  0008EE  0E00               	movlw	high stateMachine@textCursor2
  1962  0008F0  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1963  0008F2  EC14  F00D         	call	_Lcd_Write_String	;wreg free
  1964  0008F6                     
  1965                           ;fs_menu_controller.c: 279:             if(timer_value.menu_login_delay == 100)
  1966  0008F6  0E64               	movlw	100
  1967  0008F8  0100               	movlb	0	; () banked
  1968  0008FA  19B7               	xorwf	(_timer_value+8)& (0+255),w,b
  1969  0008FC  A4D8               	btfss	status,2,c
  1970  0008FE  EF83  F004         	goto	u2401
  1971  000902  EF85  F004         	goto	u2400
  1972  000906                     u2401:
  1973  000906  EF77  F006         	goto	l374
  1974  00090A                     u2400:
  1975  00090A                     l2767:
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;fs_menu_controller.c: 280:             {;fs_menu_controller.c: 281:                 tim
      +                          er_value.menu_login_delay = 0;
  1979  00090A  0E00               	movlw	0
  1980  00090C  6FB7               	movwf	(_timer_value+8)& (0+255),b
  1981                           
  1982                           ;fs_menu_controller.c: 282:                 menu_selected = PAUSE_MENU;
  1983  00090E  0E06               	movlw	6
  1984  000910  6FC9               	movwf	_menu_selected& (0+255),b
  1985  000912  EF77  F006         	goto	l374
  1986  000916                     l355:
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;fs_menu_controller.c: 289:             LATBbits.LATB6 = 0;
  1990  000916  9C8A               	bcf	138,6,c	;volatile
  1991                           
  1992                           ;fs_menu_controller.c: 290:             LATAbits.LATA4 = 0;
  1993  000918  9889               	bcf	137,4,c	;volatile
  1994                           
  1995                           ;fs_menu_controller.c: 291:             LATEbits.LATE2 = 1;
  1996  00091A  848D               	bsf	141,2,c	;volatile
  1997                           
  1998                           ;fs_menu_controller.c: 293:             if (menu_flags.menu_input_flag == 1)
  1999  00091C  A1C8               	btfss	_menu_flags& (0+255),0,b
  2000  00091E  EF93  F004         	goto	u2411
  2001  000922  EF95  F004         	goto	u2410
  2002  000926                     u2411:
  2003  000926  EF98  F004         	goto	l2773
  2004  00092A                     u2410:
  2005  00092A                     
  2006                           ; BSR set to: 0
  2007                           ;fs_menu_controller.c: 294:             {;fs_menu_controller.c: 295:                 men
      +                          u_flags.menu_input_flag = 0;
  2008  00092A  91C8               	bcf	_menu_flags& (0+255),0,b
  2009  00092C                     
  2010                           ; BSR set to: 0
  2011                           ;fs_menu_controller.c: 296:                 menu_selected = SPEED_LIMIT_SETTING;
  2012  00092C  0E03               	movlw	3
  2013  00092E  6FC9               	movwf	_menu_selected& (0+255),b
  2014  000930                     l2773:
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;fs_menu_controller.c: 299:             if ((menu_flags.menu_increase_flag == 1) && (men
      +                          u_value.stop_time < 100))
  2018  000930  A9C8               	btfss	_menu_flags& (0+255),4,b
  2019  000932  EF9D  F004         	goto	u2421
  2020  000936  EF9F  F004         	goto	u2420
  2021  00093A                     u2421:
  2022  00093A  EFAE  F004         	goto	l2783
  2023  00093E                     u2420:
  2024  00093E                     
  2025                           ; BSR set to: 0
  2026  00093E  0E64               	movlw	100
  2027  000940  61C2               	cpfslt	(_menu_value+1)& (0+255),b
  2028  000942  EFA5  F004         	goto	u2431
  2029  000946  EFA7  F004         	goto	u2430
  2030  00094A                     u2431:
  2031  00094A  EFAE  F004         	goto	l2783
  2032  00094E                     u2430:
  2033  00094E                     
  2034                           ; BSR set to: 0
  2035                           ;fs_menu_controller.c: 300:             {;fs_menu_controller.c: 301:                 men
      +                          u_flags.menu_increase_flag = 0;
  2036  00094E  99C8               	bcf	_menu_flags& (0+255),4,b
  2037  000950                     
  2038                           ; BSR set to: 0
  2039                           ;fs_menu_controller.c: 302:                 menu_value.stop_time += 1;
  2040  000950  2BC2               	incf	(_menu_value+1)& (0+255),f,b
  2041  000952                     
  2042                           ; BSR set to: 0
  2043                           ;fs_menu_controller.c: 303:                 eepromWrite(0x01,(uint8_t)menu_value.stop_ti
      +                          me);
  2044  000952  C0C2  F001         	movff	_menu_value+1,eepromWrite@data
  2045  000956  0E01               	movlw	1
  2046  000958  ECDE  F00E         	call	_eepromWrite
  2047  00095C                     l2783:
  2048                           
  2049                           ;fs_menu_controller.c: 306:             if ((menu_flags.menu_decrease_flag == 1) && (men
      +                          u_value.stop_time > 0))
  2050  00095C  0100               	movlb	0	; () banked
  2051  00095E  ABC8               	btfss	_menu_flags& (0+255),5,b
  2052  000960  EFB4  F004         	goto	u2441
  2053  000964  EFB6  F004         	goto	u2440
  2054  000968                     u2441:
  2055  000968  EFC5  F004         	goto	l2793
  2056  00096C                     u2440:
  2057  00096C                     
  2058                           ; BSR set to: 0
  2059  00096C  51C2               	movf	(_menu_value+1)& (0+255),w,b
  2060  00096E  B4D8               	btfsc	status,2,c
  2061  000970  EFBC  F004         	goto	u2451
  2062  000974  EFBE  F004         	goto	u2450
  2063  000978                     u2451:
  2064  000978  EFC5  F004         	goto	l2793
  2065  00097C                     u2450:
  2066  00097C                     
  2067                           ; BSR set to: 0
  2068                           ;fs_menu_controller.c: 307:             {;fs_menu_controller.c: 308:                  me
      +                          nu_flags.menu_decrease_flag = 0;
  2069  00097C  9BC8               	bcf	_menu_flags& (0+255),5,b
  2070  00097E                     
  2071                           ; BSR set to: 0
  2072                           ;fs_menu_controller.c: 309:                  menu_value.stop_time -= 1;
  2073  00097E  07C2               	decf	(_menu_value+1)& (0+255),f,b
  2074  000980                     
  2075                           ; BSR set to: 0
  2076                           ;fs_menu_controller.c: 310:                  eepromWrite(0x01,(uint8_t)menu_value.stop_t
      +                          ime);
  2077  000980  C0C2  F001         	movff	_menu_value+1,eepromWrite@data
  2078  000984  0E01               	movlw	1
  2079  000986  ECDE  F00E         	call	_eepromWrite
  2080  00098A                     l2793:
  2081                           
  2082                           ;fs_menu_controller.c: 312:             Lcd_Set_Cursor(1,1);
  2083  00098A  0E01               	movlw	1
  2084  00098C  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2085  00098E  0E01               	movlw	1
  2086  000990  EC53  F00D         	call	_Lcd_Set_Cursor
  2087  000994                     
  2088                           ;fs_menu_controller.c: 313:             Lcd_Write_String("DURMA ZAMANI  ms");
  2089  000994  0E68               	movlw	low STR_5
  2090  000996  6E05               	movwf	Lcd_Write_String@a^0,c
  2091  000998  0E06               	movlw	high STR_5
  2092  00099A  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2093  00099C  EC14  F00D         	call	_Lcd_Write_String	;wreg free
  2094  0009A0                     
  2095                           ;fs_menu_controller.c: 314:             Lcd_Set_Cursor(2,1);
  2096  0009A0  0E01               	movlw	1
  2097  0009A2  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2098  0009A4  0E02               	movlw	2
  2099  0009A6  EC53  F00D         	call	_Lcd_Set_Cursor
  2100  0009AA                     
  2101                           ;fs_menu_controller.c: 315:             sprintf(textCursor2,"%d               ",menu_val
      +                          ue.stop_time);
  2102  0009AA  0EE0               	movlw	low stateMachine@textCursor2
  2103  0009AC  0100               	movlb	0	; () banked
  2104  0009AE  6FCE               	movwf	sprintf@s& (0+255),b
  2105  0009B0  0E00               	movlw	high stateMachine@textCursor2
  2106  0009B2  6FCF               	movwf	(sprintf@s+1)& (0+255),b
  2107  0009B4  0E01               	movlw	low STR_4
  2108  0009B6  6FD0               	movwf	sprintf@fmt& (0+255),b
  2109  0009B8  0E06               	movlw	high STR_4
  2110  0009BA  6FD1               	movwf	(sprintf@fmt+1)& (0+255),b
  2111  0009BC  C0C2  F0D2         	movff	_menu_value+1,?_sprintf+4
  2112  0009C0  6BD3               	clrf	(?_sprintf+5)& (0+255),b
  2113  0009C2  EC15  F00E         	call	_sprintf	;wreg free
  2114  0009C6                     
  2115                           ;fs_menu_controller.c: 316:             Lcd_Write_String(textCursor2);
  2116  0009C6  0EE0               	movlw	low stateMachine@textCursor2
  2117  0009C8  6E05               	movwf	Lcd_Write_String@a^0,c
  2118  0009CA  0E00               	movlw	high stateMachine@textCursor2
  2119  0009CC  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2120  0009CE  EC14  F00D         	call	_Lcd_Write_String	;wreg free
  2121  0009D2                     
  2122                           ;fs_menu_controller.c: 318:             if(timer_value.menu_login_delay == 100)
  2123  0009D2  0E64               	movlw	100
  2124  0009D4  0100               	movlb	0	; () banked
  2125  0009D6  19B7               	xorwf	(_timer_value+8)& (0+255),w,b
  2126  0009D8  A4D8               	btfss	status,2,c
  2127  0009DA  EFF1  F004         	goto	u2461
  2128  0009DE  EFF3  F004         	goto	u2460
  2129  0009E2                     u2461:
  2130  0009E2  EF77  F006         	goto	l374
  2131  0009E6                     u2460:
  2132  0009E6  EF85  F004         	goto	l2767
  2133  0009EA                     l360:
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;fs_menu_controller.c: 327:             LATBbits.LATB6 = 0;
  2137  0009EA  9C8A               	bcf	138,6,c	;volatile
  2138                           
  2139                           ;fs_menu_controller.c: 328:             LATAbits.LATA4 = 0;
  2140  0009EC  9889               	bcf	137,4,c	;volatile
  2141                           
  2142                           ;fs_menu_controller.c: 329:             LATEbits.LATE2 = 1;
  2143  0009EE  848D               	bsf	141,2,c	;volatile
  2144                           
  2145                           ;fs_menu_controller.c: 331:             if (menu_flags.menu_input_flag == 1)
  2146  0009F0  A1C8               	btfss	_menu_flags& (0+255),0,b
  2147  0009F2  EFFD  F004         	goto	u2471
  2148  0009F6  EFFF  F004         	goto	u2470
  2149  0009FA                     u2471:
  2150  0009FA  EF02  F005         	goto	l2811
  2151  0009FE                     u2470:
  2152  0009FE                     
  2153                           ; BSR set to: 0
  2154                           ;fs_menu_controller.c: 332:             {;fs_menu_controller.c: 333:                 men
      +                          u_flags.menu_input_flag = 0;
  2155  0009FE  91C8               	bcf	_menu_flags& (0+255),0,b
  2156  000A00                     
  2157                           ; BSR set to: 0
  2158                           ;fs_menu_controller.c: 334:                 menu_selected = DRIVER_TIME_SETTING;
  2159  000A00  0E01               	movlw	1
  2160  000A02  6FC9               	movwf	_menu_selected& (0+255),b
  2161  000A04                     l2811:
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;fs_menu_controller.c: 337:             if ((menu_flags.menu_increase_flag == 1) && (men
      +                          u_value.speed_limit < 5))
  2165  000A04  A9C8               	btfss	_menu_flags& (0+255),4,b
  2166  000A06  EF07  F005         	goto	u2481
  2167  000A0A  EF09  F005         	goto	u2480
  2168  000A0E                     u2481:
  2169  000A0E  EF18  F005         	goto	l2821
  2170  000A12                     u2480:
  2171  000A12                     
  2172                           ; BSR set to: 0
  2173  000A12  0E05               	movlw	5
  2174  000A14  61C3               	cpfslt	(_menu_value+2)& (0+255),b
  2175  000A16  EF0F  F005         	goto	u2491
  2176  000A1A  EF11  F005         	goto	u2490
  2177  000A1E                     u2491:
  2178  000A1E  EF18  F005         	goto	l2821
  2179  000A22                     u2490:
  2180  000A22                     
  2181                           ; BSR set to: 0
  2182                           ;fs_menu_controller.c: 338:             {;fs_menu_controller.c: 339:                 men
      +                          u_flags.menu_increase_flag = 0;
  2183  000A22  99C8               	bcf	_menu_flags& (0+255),4,b
  2184  000A24                     
  2185                           ; BSR set to: 0
  2186                           ;fs_menu_controller.c: 340:                 menu_value.speed_limit += 1;
  2187  000A24  2BC3               	incf	(_menu_value+2)& (0+255),f,b
  2188  000A26                     
  2189                           ; BSR set to: 0
  2190                           ;fs_menu_controller.c: 341:                 eepromWrite(0x02,menu_value.speed_limit);
  2191  000A26  C0C3  F001         	movff	_menu_value+2,eepromWrite@data
  2192  000A2A  0E02               	movlw	2
  2193  000A2C  ECDE  F00E         	call	_eepromWrite
  2194  000A30                     l2821:
  2195                           
  2196                           ;fs_menu_controller.c: 344:             if ((menu_flags.menu_decrease_flag == 1) && (men
      +                          u_value.speed_limit > 0))
  2197  000A30  0100               	movlb	0	; () banked
  2198  000A32  ABC8               	btfss	_menu_flags& (0+255),5,b
  2199  000A34  EF1E  F005         	goto	u2501
  2200  000A38  EF20  F005         	goto	u2500
  2201  000A3C                     u2501:
  2202  000A3C  EF2F  F005         	goto	l2831
  2203  000A40                     u2500:
  2204  000A40                     
  2205                           ; BSR set to: 0
  2206  000A40  51C3               	movf	(_menu_value+2)& (0+255),w,b
  2207  000A42  B4D8               	btfsc	status,2,c
  2208  000A44  EF26  F005         	goto	u2511
  2209  000A48  EF28  F005         	goto	u2510
  2210  000A4C                     u2511:
  2211  000A4C  EF2F  F005         	goto	l2831
  2212  000A50                     u2510:
  2213  000A50                     
  2214                           ; BSR set to: 0
  2215                           ;fs_menu_controller.c: 345:             {;fs_menu_controller.c: 346:                  me
      +                          nu_flags.menu_decrease_flag = 0;
  2216  000A50  9BC8               	bcf	_menu_flags& (0+255),5,b
  2217  000A52                     
  2218                           ; BSR set to: 0
  2219                           ;fs_menu_controller.c: 347:                  menu_value.speed_limit -= 1;
  2220  000A52  07C3               	decf	(_menu_value+2)& (0+255),f,b
  2221  000A54                     
  2222                           ; BSR set to: 0
  2223                           ;fs_menu_controller.c: 348:                  eepromWrite(0x02,menu_value.speed_limit);
  2224  000A54  C0C3  F001         	movff	_menu_value+2,eepromWrite@data
  2225  000A58  0E02               	movlw	2
  2226  000A5A  ECDE  F00E         	call	_eepromWrite
  2227  000A5E                     l2831:
  2228                           
  2229                           ;fs_menu_controller.c: 350:             Lcd_Set_Cursor(1,1);
  2230  000A5E  0E01               	movlw	1
  2231  000A60  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2232  000A62  0E01               	movlw	1
  2233  000A64  EC53  F00D         	call	_Lcd_Set_Cursor
  2234  000A68                     
  2235                           ;fs_menu_controller.c: 351:             Lcd_Write_String("HIZ LiMiTi      ");
  2236  000A68  0E13               	movlw	low STR_7
  2237  000A6A  6E05               	movwf	Lcd_Write_String@a^0,c
  2238  000A6C  0E06               	movlw	high STR_7
  2239  000A6E  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2240  000A70  EC14  F00D         	call	_Lcd_Write_String	;wreg free
  2241  000A74                     
  2242                           ;fs_menu_controller.c: 352:             Lcd_Set_Cursor(2,1);
  2243  000A74  0E01               	movlw	1
  2244  000A76  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2245  000A78  0E02               	movlw	2
  2246  000A7A  EC53  F00D         	call	_Lcd_Set_Cursor
  2247  000A7E                     
  2248                           ;fs_menu_controller.c: 353:             sprintf(textCursor2,"%d               ",menu_val
      +                          ue.speed_limit);
  2249  000A7E  0EE0               	movlw	low stateMachine@textCursor2
  2250  000A80  0100               	movlb	0	; () banked
  2251  000A82  6FCE               	movwf	sprintf@s& (0+255),b
  2252  000A84  0E00               	movlw	high stateMachine@textCursor2
  2253  000A86  6FCF               	movwf	(sprintf@s+1)& (0+255),b
  2254  000A88  0E01               	movlw	low STR_4
  2255  000A8A  6FD0               	movwf	sprintf@fmt& (0+255),b
  2256  000A8C  0E06               	movlw	high STR_4
  2257  000A8E  6FD1               	movwf	(sprintf@fmt+1)& (0+255),b
  2258  000A90  C0C3  F0D2         	movff	_menu_value+2,?_sprintf+4
  2259  000A94  6BD3               	clrf	(?_sprintf+5)& (0+255),b
  2260  000A96  EC15  F00E         	call	_sprintf	;wreg free
  2261  000A9A                     
  2262                           ;fs_menu_controller.c: 354:             Lcd_Write_String(textCursor2);
  2263  000A9A  0EE0               	movlw	low stateMachine@textCursor2
  2264  000A9C  6E05               	movwf	Lcd_Write_String@a^0,c
  2265  000A9E  0E00               	movlw	high stateMachine@textCursor2
  2266  000AA0  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2267  000AA2  EC14  F00D         	call	_Lcd_Write_String	;wreg free
  2268  000AA6                     
  2269                           ;fs_menu_controller.c: 356:             if(timer_value.menu_login_delay == 100)
  2270  000AA6  0E64               	movlw	100
  2271  000AA8  0100               	movlb	0	; () banked
  2272  000AAA  19B7               	xorwf	(_timer_value+8)& (0+255),w,b
  2273  000AAC  A4D8               	btfss	status,2,c
  2274  000AAE  EF5B  F005         	goto	u2521
  2275  000AB2  EF5D  F005         	goto	u2520
  2276  000AB6                     u2521:
  2277  000AB6  EF77  F006         	goto	l374
  2278  000ABA                     u2520:
  2279  000ABA  EF85  F004         	goto	l2767
  2280  000ABE                     l2845:
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;fs_menu_controller.c: 364:             startIsClick = 0;
  2284  000ABE  0E00               	movlw	0
  2285  000AC0  6FCB               	movwf	_startIsClick& (0+255),b
  2286                           
  2287                           ;fs_menu_controller.c: 365:             pauseIsClick = 0;
  2288  000AC2  0E00               	movlw	0
  2289  000AC4  6FCC               	movwf	_pauseIsClick& (0+255),b
  2290                           
  2291                           ;fs_menu_controller.c: 366:             stopIsClick = 1;
  2292  000AC6  0E01               	movlw	1
  2293  000AC8  6FCA               	movwf	_stopIsClick& (0+255),b
  2294  000ACA                     
  2295                           ; BSR set to: 0
  2296                           ;fs_menu_controller.c: 368:             Lcd_Set_Cursor(1,1);
  2297  000ACA  0E01               	movlw	1
  2298  000ACC  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2299  000ACE  0E01               	movlw	1
  2300  000AD0  EC53  F00D         	call	_Lcd_Set_Cursor
  2301  000AD4                     
  2302                           ;fs_menu_controller.c: 369:             Lcd_Write_String("ZAMAN DOLDU     ");
  2303  000AD4  0E35               	movlw	low STR_9
  2304  000AD6  6E05               	movwf	Lcd_Write_String@a^0,c
  2305  000AD8  0E06               	movlw	high STR_9
  2306  000ADA  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2307  000ADC  EC14  F00D         	call	_Lcd_Write_String	;wreg free
  2308  000AE0                     
  2309                           ;fs_menu_controller.c: 370:             LATBbits.LATB6 = 1;
  2310  000AE0  8C8A               	bsf	138,6,c	;volatile
  2311  000AE2                     
  2312                           ;fs_menu_controller.c: 371:             LATEbits.LATE2 = 0;
  2313  000AE2  948D               	bcf	141,2,c	;volatile
  2314  000AE4                     
  2315                           ;fs_menu_controller.c: 372:             LATAbits.LATA4 = 0;
  2316  000AE4  9889               	bcf	137,4,c	;volatile
  2317  000AE6                     
  2318                           ;fs_menu_controller.c: 373:             timer_value.remainingSecond = 0;
  2319  000AE6  0E00               	movlw	0
  2320  000AE8  0100               	movlb	0	; () banked
  2321  000AEA  6FB4               	movwf	(_timer_value+5)& (0+255),b
  2322  000AEC  0E00               	movlw	0
  2323  000AEE  6FB3               	movwf	(_timer_value+4)& (0+255),b
  2324  000AF0                     
  2325                           ; BSR set to: 0
  2326                           ;fs_menu_controller.c: 374:             timer_value.remainingMinute = 0;
  2327  000AF0  0E00               	movlw	0
  2328  000AF2  6FB6               	movwf	(_timer_value+7)& (0+255),b
  2329  000AF4  0E00               	movlw	0
  2330  000AF6  6FB5               	movwf	(_timer_value+6)& (0+255),b
  2331  000AF8                     
  2332                           ; BSR set to: 0
  2333                           ;fs_menu_controller.c: 375:              Lcd_Set_Cursor(2,1);
  2334  000AF8  0E01               	movlw	1
  2335  000AFA  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2336  000AFC  0E02               	movlw	2
  2337  000AFE  EC53  F00D         	call	_Lcd_Set_Cursor
  2338  000B02                     
  2339                           ;fs_menu_controller.c: 376:             sprintf(textCursor2,"      %d:%d    ",timer_valu
      +                          e.remainingMinute,timer_value.remainingSecond);
  2340  000B02  0EE0               	movlw	low stateMachine@textCursor2
  2341  000B04  0100               	movlb	0	; () banked
  2342  000B06  6FCE               	movwf	sprintf@s& (0+255),b
  2343  000B08  0E00               	movlw	high stateMachine@textCursor2
  2344  000B0A  6FCF               	movwf	(sprintf@s+1)& (0+255),b
  2345  000B0C  0E79               	movlw	low STR_10
  2346  000B0E  6FD0               	movwf	sprintf@fmt& (0+255),b
  2347  000B10  0E06               	movlw	high STR_10
  2348  000B12  6FD1               	movwf	(sprintf@fmt+1)& (0+255),b
  2349  000B14  C0B5  F0D2         	movff	_timer_value+6,?_sprintf+4
  2350  000B18  C0B6  F0D3         	movff	_timer_value+7,?_sprintf+5
  2351  000B1C  C0B3  F0D4         	movff	_timer_value+4,?_sprintf+6
  2352  000B20  C0B4  F0D5         	movff	_timer_value+5,?_sprintf+7
  2353  000B24  EC15  F00E         	call	_sprintf	;wreg free
  2354  000B28                     
  2355                           ;fs_menu_controller.c: 377:             Lcd_Write_String(textCursor2);
  2356  000B28  0EE0               	movlw	low stateMachine@textCursor2
  2357  000B2A  6E05               	movwf	Lcd_Write_String@a^0,c
  2358  000B2C  0E00               	movlw	high stateMachine@textCursor2
  2359  000B2E  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2360  000B30  EC14  F00D         	call	_Lcd_Write_String	;wreg free
  2361  000B34                     
  2362                           ;fs_menu_controller.c: 379:         if (menu_flags.menu_start_flag == 1)
  2363  000B34  0100               	movlb	0	; () banked
  2364  000B36  A3C8               	btfss	_menu_flags& (0+255),1,b
  2365  000B38  EFA0  F005         	goto	u2531
  2366  000B3C  EFA2  F005         	goto	u2530
  2367  000B40                     u2531:
  2368  000B40  EFB3  F005         	goto	l2873
  2369  000B44                     u2530:
  2370  000B44                     
  2371                           ; BSR set to: 0
  2372                           ;fs_menu_controller.c: 380:         {;fs_menu_controller.c: 381:             menu_flags.
      +                          menu_start_flag = 0;
  2373  000B44  93C8               	bcf	_menu_flags& (0+255),1,b
  2374  000B46                     
  2375                           ; BSR set to: 0
  2376                           ;fs_menu_controller.c: 382:             menu_selected = START_MENU;
  2377  000B46  0E05               	movlw	5
  2378  000B48  6FC9               	movwf	_menu_selected& (0+255),b
  2379                           
  2380                           ;fs_menu_controller.c: 384:             startIsClick = 1;
  2381  000B4A  0E01               	movlw	1
  2382  000B4C  6FCB               	movwf	_startIsClick& (0+255),b
  2383                           
  2384                           ;fs_menu_controller.c: 385:             pauseIsClick = 0;
  2385  000B4E  0E00               	movlw	0
  2386  000B50  6FCC               	movwf	_pauseIsClick& (0+255),b
  2387                           
  2388                           ;fs_menu_controller.c: 386:             stopIsClick = 0;
  2389  000B52  0E00               	movlw	0
  2390  000B54  6FCA               	movwf	_stopIsClick& (0+255),b
  2391                           
  2392                           ;fs_menu_controller.c: 387:             timer_value.second = 0;
  2393  000B56  0E00               	movlw	0
  2394  000B58  6FB0               	movwf	(_timer_value+1)& (0+255),b
  2395  000B5A  0E00               	movlw	0
  2396  000B5C  6FAF               	movwf	_timer_value& (0+255),b
  2397                           
  2398                           ;fs_menu_controller.c: 388:             timer_value.minute = 0;
  2399  000B5E  0E00               	movlw	0
  2400  000B60  6FB2               	movwf	(_timer_value+3)& (0+255),b
  2401  000B62  0E00               	movlw	0
  2402  000B64  6FB1               	movwf	(_timer_value+2)& (0+255),b
  2403  000B66                     l2873:
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;fs_menu_controller.c: 391:         if ( timer_value.menu_login_delay == 100)
  2407  000B66  0E64               	movlw	100
  2408  000B68  19B7               	xorwf	(_timer_value+8)& (0+255),w,b
  2409  000B6A  A4D8               	btfss	status,2,c
  2410  000B6C  EFBA  F005         	goto	u2541
  2411  000B70  EFBC  F005         	goto	u2540
  2412  000B74                     u2541:
  2413  000B74  EF77  F006         	goto	l374
  2414  000B78                     u2540:
  2415  000B78                     l2875:
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;fs_menu_controller.c: 392:         {;fs_menu_controller.c: 393:             timer_value
      +                          .menu_login_delay = 0;
  2419  000B78  0E00               	movlw	0
  2420  000B7A  6FB7               	movwf	(_timer_value+8)& (0+255),b
  2421                           
  2422                           ;fs_menu_controller.c: 394:             menu_selected = DRIVER_TIME_SETTING;
  2423  000B7C  0E01               	movlw	1
  2424  000B7E  6FC9               	movwf	_menu_selected& (0+255),b
  2425  000B80  EF77  F006         	goto	l374
  2426  000B84                     l368:
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;fs_menu_controller.c: 400:             timer_value.remainingMinute = menu_value.driver_
      +                          time;
  2430  000B84  C0C1  F0B5         	movff	_menu_value,_timer_value+6
  2431  000B88  6BB6               	clrf	(_timer_value+7)& (0+255),b
  2432  000B8A                     
  2433                           ; BSR set to: 0
  2434                           ;fs_menu_controller.c: 401:             timer_value.remainingSecond = 0;
  2435  000B8A  0E00               	movlw	0
  2436  000B8C  6FB4               	movwf	(_timer_value+5)& (0+255),b
  2437  000B8E  0E00               	movlw	0
  2438  000B90  6FB3               	movwf	(_timer_value+4)& (0+255),b
  2439                           
  2440                           ;fs_menu_controller.c: 402:             startIsClick = 1;
  2441  000B92  0E01               	movlw	1
  2442  000B94  6FCB               	movwf	_startIsClick& (0+255),b
  2443                           
  2444                           ;fs_menu_controller.c: 403:             stopIsClick = 0;
  2445  000B96  0E00               	movlw	0
  2446  000B98  6FCA               	movwf	_stopIsClick& (0+255),b
  2447                           
  2448                           ;fs_menu_controller.c: 404:             menu_selected = MAIN_MENU;
  2449  000B9A  0E00               	movlw	0
  2450  000B9C  6FC9               	movwf	_menu_selected& (0+255),b
  2451                           
  2452                           ;fs_menu_controller.c: 405:         break;
  2453  000B9E  EF77  F006         	goto	l374
  2454  000BA2                     l369:
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;fs_menu_controller.c: 409:             LATBbits.LATB6 = 1;
  2458  000BA2  8C8A               	bsf	138,6,c	;volatile
  2459                           
  2460                           ;fs_menu_controller.c: 410:             LATAbits.LATA4 = 1;
  2461  000BA4  8889               	bsf	137,4,c	;volatile
  2462                           
  2463                           ;fs_menu_controller.c: 411:             LATEbits.LATE2 = 1;
  2464  000BA6  848D               	bsf	141,2,c	;volatile
  2465  000BA8                     
  2466                           ; BSR set to: 0
  2467                           ;fs_menu_controller.c: 415:             Lcd_Set_Cursor(1,1);
  2468  000BA8  0E01               	movlw	1
  2469  000BAA  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2470  000BAC  0E01               	movlw	1
  2471  000BAE  EC53  F00D         	call	_Lcd_Set_Cursor
  2472  000BB2                     
  2473                           ;fs_menu_controller.c: 416:             Lcd_Write_String("HAREKET DURDU   ");
  2474  000BB2  0E46               	movlw	low STR_11
  2475  000BB4  6E05               	movwf	Lcd_Write_String@a^0,c
  2476  000BB6  0E06               	movlw	high STR_11
  2477  000BB8  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2478  000BBA  EC14  F00D         	call	_Lcd_Write_String	;wreg free
  2479  000BBE                     
  2480                           ;fs_menu_controller.c: 417:             Lcd_Set_Cursor(2,1);
  2481  000BBE  0E01               	movlw	1
  2482  000BC0  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  2483  000BC2  0E02               	movlw	2
  2484  000BC4  EC53  F00D         	call	_Lcd_Set_Cursor
  2485  000BC8                     
  2486                           ;fs_menu_controller.c: 418:             sprintf(textCursor2,"      %d:%d    ",timer_valu
      +                          e.remainingMinute,timer_value.remainingSecond);
  2487  000BC8  0EE0               	movlw	low stateMachine@textCursor2
  2488  000BCA  0100               	movlb	0	; () banked
  2489  000BCC  6FCE               	movwf	sprintf@s& (0+255),b
  2490  000BCE  0E00               	movlw	high stateMachine@textCursor2
  2491  000BD0  6FCF               	movwf	(sprintf@s+1)& (0+255),b
  2492  000BD2  0E79               	movlw	low STR_10
  2493  000BD4  6FD0               	movwf	sprintf@fmt& (0+255),b
  2494  000BD6  0E06               	movlw	high STR_10
  2495  000BD8  6FD1               	movwf	(sprintf@fmt+1)& (0+255),b
  2496  000BDA  C0B5  F0D2         	movff	_timer_value+6,?_sprintf+4
  2497  000BDE  C0B6  F0D3         	movff	_timer_value+7,?_sprintf+5
  2498  000BE2  C0B3  F0D4         	movff	_timer_value+4,?_sprintf+6
  2499  000BE6  C0B4  F0D5         	movff	_timer_value+5,?_sprintf+7
  2500  000BEA  EC15  F00E         	call	_sprintf	;wreg free
  2501  000BEE                     
  2502                           ;fs_menu_controller.c: 419:             Lcd_Write_String(textCursor2);
  2503  000BEE  0EE0               	movlw	low stateMachine@textCursor2
  2504  000BF0  6E05               	movwf	Lcd_Write_String@a^0,c
  2505  000BF2  0E00               	movlw	high stateMachine@textCursor2
  2506  000BF4  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  2507  000BF6  EC14  F00D         	call	_Lcd_Write_String	;wreg free
  2508  000BFA                     
  2509                           ;fs_menu_controller.c: 421:             if (menu_flags.menu_start_flag == 1)
  2510  000BFA  0100               	movlb	0	; () banked
  2511  000BFC  A3C8               	btfss	_menu_flags& (0+255),1,b
  2512  000BFE  EF03  F006         	goto	u2551
  2513  000C02  EF05  F006         	goto	u2550
  2514  000C06                     u2551:
  2515  000C06  EF0E  F006         	goto	l370
  2516  000C0A                     u2550:
  2517  000C0A                     
  2518                           ; BSR set to: 0
  2519                           ;fs_menu_controller.c: 422:             {;fs_menu_controller.c: 423:                 men
      +                          u_flags.menu_start_flag = 0;
  2520  000C0A  93C8               	bcf	_menu_flags& (0+255),1,b
  2521  000C0C                     
  2522                           ; BSR set to: 0
  2523                           ;fs_menu_controller.c: 424:                 menu_selected = MAIN_MENU;
  2524  000C0C  0E00               	movlw	0
  2525  000C0E  6FC9               	movwf	_menu_selected& (0+255),b
  2526                           
  2527                           ;fs_menu_controller.c: 426:                 startIsClick = 1;
  2528  000C10  0E01               	movlw	1
  2529  000C12  6FCB               	movwf	_startIsClick& (0+255),b
  2530                           
  2531                           ;fs_menu_controller.c: 427:                 pauseIsClick = 0;
  2532  000C14  0E00               	movlw	0
  2533  000C16  6FCC               	movwf	_pauseIsClick& (0+255),b
  2534                           
  2535                           ;fs_menu_controller.c: 428:                 stopIsClick = 0;
  2536  000C18  0E00               	movlw	0
  2537  000C1A  6FCA               	movwf	_stopIsClick& (0+255),b
  2538  000C1C                     l370:
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;fs_menu_controller.c: 431:             if ( (startIsClick == 0) && (pauseIsClick == 0) 
      +                          && (stopIsClick == 1) && (menu_selected == PAUSE_MENU))
  2542  000C1C  51CB               	movf	_startIsClick& (0+255),w,b
  2543  000C1E  A4D8               	btfss	status,2,c
  2544  000C20  EF14  F006         	goto	u2561
  2545  000C24  EF16  F006         	goto	u2560
  2546  000C28                     u2561:
  2547  000C28  EF3E  F006         	goto	l2905
  2548  000C2C                     u2560:
  2549  000C2C                     
  2550                           ; BSR set to: 0
  2551  000C2C  51CC               	movf	_pauseIsClick& (0+255),w,b
  2552  000C2E  A4D8               	btfss	status,2,c
  2553  000C30  EF1C  F006         	goto	u2571
  2554  000C34  EF1E  F006         	goto	u2570
  2555  000C38                     u2571:
  2556  000C38  EF3E  F006         	goto	l2905
  2557  000C3C                     u2570:
  2558  000C3C                     
  2559                           ; BSR set to: 0
  2560  000C3C  05CA               	decf	_stopIsClick& (0+255),w,b
  2561  000C3E  A4D8               	btfss	status,2,c
  2562  000C40  EF24  F006         	goto	u2581
  2563  000C44  EF26  F006         	goto	u2580
  2564  000C48                     u2581:
  2565  000C48  EF3E  F006         	goto	l2905
  2566  000C4C                     u2580:
  2567  000C4C                     
  2568                           ; BSR set to: 0
  2569  000C4C  0E06               	movlw	6
  2570  000C4E  19C9               	xorwf	_menu_selected& (0+255),w,b
  2571  000C50  A4D8               	btfss	status,2,c
  2572  000C52  EF2D  F006         	goto	u2591
  2573  000C56  EF2F  F006         	goto	u2590
  2574  000C5A                     u2591:
  2575  000C5A  EF3E  F006         	goto	l2905
  2576  000C5E                     u2590:
  2577  000C5E                     
  2578                           ; BSR set to: 0
  2579                           ;fs_menu_controller.c: 432:             {;fs_menu_controller.c: 433:                  ti
      +                          mer_value.remainingMinute = menu_value.driver_time;
  2580  000C5E  C0C1  F0B5         	movff	_menu_value,_timer_value+6
  2581  000C62  6BB6               	clrf	(_timer_value+7)& (0+255),b
  2582  000C64                     
  2583                           ; BSR set to: 0
  2584                           ;fs_menu_controller.c: 434:                  timer_value.remainingSecond = 0;
  2585  000C64  0E00               	movlw	0
  2586  000C66  6FB4               	movwf	(_timer_value+5)& (0+255),b
  2587  000C68  0E00               	movlw	0
  2588  000C6A  6FB3               	movwf	(_timer_value+4)& (0+255),b
  2589                           
  2590                           ;fs_menu_controller.c: 435:                  timer_value.second = 0;
  2591  000C6C  0E00               	movlw	0
  2592  000C6E  6FB0               	movwf	(_timer_value+1)& (0+255),b
  2593  000C70  0E00               	movlw	0
  2594  000C72  6FAF               	movwf	_timer_value& (0+255),b
  2595                           
  2596                           ;fs_menu_controller.c: 436:                  timer_value.minute = 0;
  2597  000C74  0E00               	movlw	0
  2598  000C76  6FB2               	movwf	(_timer_value+3)& (0+255),b
  2599  000C78  0E00               	movlw	0
  2600  000C7A  6FB1               	movwf	(_timer_value+2)& (0+255),b
  2601  000C7C                     l2905:
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;fs_menu_controller.c: 440:             if ( timer_value.menu_login_delay == 100)
  2605  000C7C  0E64               	movlw	100
  2606  000C7E  19B7               	xorwf	(_timer_value+8)& (0+255),w,b
  2607  000C80  A4D8               	btfss	status,2,c
  2608  000C82  EF45  F006         	goto	u2601
  2609  000C86  EF47  F006         	goto	u2600
  2610  000C8A                     u2601:
  2611  000C8A  EF77  F006         	goto	l374
  2612  000C8E                     u2600:
  2613  000C8E  EFBC  F005         	goto	l2875
  2614  000C92                     l2911:
  2615  000C92  0100               	movlb	0	; () banked
  2616  000C94  51C9               	movf	_menu_selected& (0+255),w,b
  2617  000C96  6E58               	movwf	??_stateMachine^0,c
  2618  000C98  6A59               	clrf	(??_stateMachine+1)^0,c
  2619                           
  2620                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2621                           ; Switch size 1, requested type "simple"
  2622                           ; Number of cases is 1, Range of values is 0 to 0
  2623                           ; switch strategies available:
  2624                           ; Name         Instructions Cycles
  2625                           ; simple_byte            4     3 (average)
  2626                           ;	Chosen strategy is simple_byte
  2627  000C9A  5059               	movf	(??_stateMachine+1)^0,w,c
  2628  000C9C  0A00               	xorlw	0	; case 0
  2629  000C9E  B4D8               	btfsc	status,2,c
  2630  000CA0  EF54  F006         	goto	l3841
  2631  000CA4  EF77  F006         	goto	l374
  2632  000CA8                     l3841:
  2633                           
  2634                           ; BSR set to: 0
  2635                           ; Switch size 1, requested type "simple"
  2636                           ; Number of cases is 8, Range of values is 0 to 7
  2637                           ; switch strategies available:
  2638                           ; Name         Instructions Cycles
  2639                           ; simple_byte           25    13 (average)
  2640                           ;	Chosen strategy is simple_byte
  2641  000CA8  5058               	movf	??_stateMachine^0,w,c
  2642  000CAA  0A00               	xorlw	0	; case 0
  2643  000CAC  B4D8               	btfsc	status,2,c
  2644  000CAE  EF55  F003         	goto	l344
  2645  000CB2  0A01               	xorlw	1	; case 1
  2646  000CB4  B4D8               	btfsc	status,2,c
  2647  000CB6  EFFE  F003         	goto	l350
  2648  000CBA  0A03               	xorlw	3	; case 2
  2649  000CBC  B4D8               	btfsc	status,2,c
  2650  000CBE  EF8B  F004         	goto	l355
  2651  000CC2  0A01               	xorlw	1	; case 3
  2652  000CC4  B4D8               	btfsc	status,2,c
  2653  000CC6  EFF5  F004         	goto	l360
  2654  000CCA  0A07               	xorlw	7	; case 4
  2655  000CCC  B4D8               	btfsc	status,2,c
  2656  000CCE  EF5F  F005         	goto	l2845
  2657  000CD2  0A01               	xorlw	1	; case 5
  2658  000CD4  B4D8               	btfsc	status,2,c
  2659  000CD6  EFC2  F005         	goto	l368
  2660  000CDA  0A03               	xorlw	3	; case 6
  2661  000CDC  B4D8               	btfsc	status,2,c
  2662  000CDE  EFD1  F005         	goto	l369
  2663  000CE2  0A01               	xorlw	1	; case 7
  2664  000CE4  B4D8               	btfsc	status,2,c
  2665  000CE6  EF77  F006         	goto	l374
  2666  000CEA  EF77  F006         	goto	l374
  2667  000CEE                     l374:
  2668                           
  2669                           ; BSR set to: 0
  2670  000CEE  0012               	return		;funcret
  2671  000CF0                     __end_of_stateMachine:
  2672                           	callstack 0
  2673                           
  2674 ;; *************** function _sprintf *****************
  2675 ;; Defined at:
  2676 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\nf_sprintf.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;  s               2    0[BANK0 ] PTR unsigned char 
  2679 ;;		 -> stateMachine@textCursor2(16), 
  2680 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2681 ;;		 -> STR_12(16), STR_10(16), STR_8(18), STR_6(18), 
  2682 ;;		 -> STR_4(18), STR_2(15), 
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;  f               6   12[BANK0 ] struct _IO_FILE
  2685 ;;  ap              2   10[BANK0 ] PTR void [1]
  2686 ;;		 -> ?_sprintf(2), 
  2687 ;;  ret             2    0        int 
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  2    0[BANK0 ] int 
  2690 ;; Registers used:
  2691 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2692 ;; Tracked objects:
  2693 ;;		On entry : 0/0
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2697 ;;      Params:         0       8       0       0       0       0       0
  2698 ;;      Locals:         0      10       0       0       0       0       0
  2699 ;;      Temps:          0       0       0       0       0       0       0
  2700 ;;      Totals:         0      18       0       0       0       0       0
  2701 ;;Total ram usage:       18 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; Hardware stack levels required when called:    8
  2704 ;; This function calls:
  2705 ;;		_vfprintf
  2706 ;; This function is called by:
  2707 ;;		_stateMachine
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           	psect	text7
  2712  001C2A                     __ptext7:
  2713                           	callstack 0
  2714  001C2A                     _sprintf:
  2715                           	callstack 20
  2716  001C2A  0ED2               	movlw	low (?_sprintf+4)
  2717  001C2C  0100               	movlb	0	; () banked
  2718  001C2E  6FD8               	movwf	sprintf@ap& (0+255),b
  2719  001C30  0E00               	movlw	high (?_sprintf+4)
  2720  001C32  6FD9               	movwf	(sprintf@ap+1)& (0+255),b
  2721  001C34  C0CE  F0DA         	movff	sprintf@s,sprintf@f
  2722  001C38  C0CF  F0DB         	movff	sprintf@s+1,sprintf@f+1
  2723  001C3C                     
  2724                           ; BSR set to: 0
  2725  001C3C  0E00               	movlw	0
  2726  001C3E  6FDD               	movwf	(sprintf@f+3)& (0+255),b
  2727  001C40  0E00               	movlw	0
  2728  001C42  6FDC               	movwf	(sprintf@f+2)& (0+255),b
  2729  001C44                     
  2730                           ; BSR set to: 0
  2731  001C44  0E00               	movlw	0
  2732  001C46  6FDF               	movwf	(sprintf@f+5)& (0+255),b
  2733  001C48  0E00               	movlw	0
  2734  001C4A  6FDE               	movwf	(sprintf@f+4)& (0+255),b
  2735  001C4C                     
  2736                           ; BSR set to: 0
  2737  001C4C  0EDA               	movlw	low sprintf@f
  2738  001C4E  6E50               	movwf	vfprintf@fp^0,c
  2739  001C50  0E00               	movlw	high sprintf@f
  2740  001C52  6E51               	movwf	(vfprintf@fp+1)^0,c
  2741  001C54  C0D0  F052         	movff	sprintf@fmt,vfprintf@fmt
  2742  001C58  C0D1  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2743  001C5C  0ED8               	movlw	low sprintf@ap
  2744  001C5E  6E54               	movwf	vfprintf@ap^0,c
  2745  001C60  0E00               	movlw	high sprintf@ap
  2746  001C62  6E55               	movwf	(vfprintf@ap+1)^0,c
  2747  001C64  EC86  F00D         	call	_vfprintf	;wreg free
  2748  001C68  0100               	movlb	0	; () banked
  2749  001C6A  51DC               	movf	(sprintf@f+2)& (0+255),w,b
  2750  001C6C  25CE               	addwf	sprintf@s& (0+255),w,b
  2751  001C6E  6ED9               	movwf	fsr2l,c
  2752  001C70  51DD               	movf	(sprintf@f+3)& (0+255),w,b
  2753  001C72  21CF               	addwfc	(sprintf@s+1)& (0+255),w,b
  2754  001C74  6EDA               	movwf	fsr2h,c
  2755  001C76  0E00               	movlw	0
  2756  001C78  6EDF               	movwf	indf2,c
  2757  001C7A                     
  2758                           ; BSR set to: 0
  2759  001C7A  0012               	return		;funcret
  2760  001C7C                     __end_of_sprintf:
  2761                           	callstack 0
  2762                           
  2763 ;; *************** function _vfprintf *****************
  2764 ;; Defined at:
  2765 ;;		line 1368 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
  2768 ;;		 -> sprintf@f(6), 
  2769 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
  2770 ;;		 -> STR_12(16), STR_10(16), STR_8(18), STR_6(18), 
  2771 ;;		 -> STR_4(18), STR_2(15), 
  2772 ;;  ap              2   83[COMRAM] PTR PTR void 
  2773 ;;		 -> sprintf@ap(2), 
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
  2776 ;;		 -> STR_12(16), STR_10(16), STR_8(18), STR_6(18), 
  2777 ;;		 -> STR_4(18), STR_2(15), 
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  2   79[COMRAM] int 
  2780 ;; Registers used:
  2781 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2787 ;;      Params:         6       0       0       0       0       0       0
  2788 ;;      Locals:         2       0       0       0       0       0       0
  2789 ;;      Temps:          0       0       0       0       0       0       0
  2790 ;;      Totals:         8       0       0       0       0       0       0
  2791 ;;Total ram usage:        8 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:    7
  2794 ;; This function calls:
  2795 ;;		_vfpfcnvrt
  2796 ;; This function is called by:
  2797 ;;		_sprintf
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           	psect	text8
  2802  001B0C                     __ptext8:
  2803                           	callstack 0
  2804  001B0C                     _vfprintf:
  2805                           	callstack 20
  2806  001B0C                     
  2807                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1368: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.20\pic\source
      +                          s\c99\common\doprnt.c: 1369: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\comm
      +                          on\doprnt.c: 1371:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\
      +                          common\doprnt.c: 1373:     cfmt = (char *)fmt;
  2808  001B0C  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
  2809  001B10  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2810  001B14                     
  2811                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1374:     nout = 
      +                          0;
  2812  001B14  0E00               	movlw	0
  2813  001B16  0100               	movlb	0	; () banked
  2814  001B18  6FC5               	movwf	(_nout+1)& (0+255),b
  2815  001B1A  0E00               	movlw	0
  2816  001B1C  6FC4               	movwf	_nout& (0+255),b
  2817                           
  2818                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1375:     while (
      +                          *cfmt) {
  2819  001B1E  EFA4  F00D         	goto	l2561
  2820  001B22                     l2559:
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1376:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  2824  001B22  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
  2825  001B26  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2826  001B2A  0E56               	movlw	low vfprintf@cfmt
  2827  001B2C  6E42               	movwf	vfpfcnvrt@fmt^0,c
  2828  001B2E  0E00               	movlw	high vfprintf@cfmt
  2829  001B30  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2830  001B32  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
  2831  001B36  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2832  001B3A  ECE7  F007         	call	_vfpfcnvrt	;wreg free
  2833  001B3E  5040               	movf	?_vfpfcnvrt^0,w,c
  2834  001B40  0100               	movlb	0	; () banked
  2835  001B42  27C4               	addwf	_nout& (0+255),f,b
  2836  001B44  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
  2837  001B46  23C5               	addwfc	(_nout+1)& (0+255),f,b
  2838  001B48                     l2561:
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1375:     while (
      +                          *cfmt) {
  2842  001B48  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
  2843  001B4C  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2844  001B50                     	if	0	;tblptru may be non-zero
  2845  001B50                     	endif
  2846  001B50                     	if	0	;tblptru may be non-zero
  2847  001B50                     	endif
  2848  001B50  0008               	tblrd		*
  2849  001B52  50F5               	movf	tablat,w,c
  2850  001B54  0900               	iorlw	0
  2851  001B56  A4D8               	btfss	status,2,c
  2852  001B58  EFB0  F00D         	goto	u1901
  2853  001B5C  EFB2  F00D         	goto	u1900
  2854  001B60                     u1901:
  2855  001B60  EF91  F00D         	goto	l2559
  2856  001B64                     u1900:
  2857  001B64                     
  2858                           ; BSR set to: 0
  2859                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1378:     return 
      +                          nout;
  2860  001B64  C0C4  F050         	movff	_nout,?_vfprintf
  2861  001B68  C0C5  F051         	movff	_nout+1,?_vfprintf+1
  2862  001B6C                     
  2863                           ; BSR set to: 0
  2864  001B6C  0012               	return		;funcret
  2865  001B6E                     __end_of_vfprintf:
  2866                           	callstack 0
  2867                           
  2868 ;; *************** function _vfpfcnvrt *****************
  2869 ;; Defined at:
  2870 ;;		line 670 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c"
  2871 ;; Parameters:    Size  Location     Type
  2872 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  2873 ;;		 -> sprintf@f(6), 
  2874 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  2875 ;;		 -> vfprintf@cfmt(2), 
  2876 ;;  ap              2   67[COMRAM] PTR PTR void 
  2877 ;;		 -> sprintf@ap(2), 
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;  ll              8   71[COMRAM] long long 
  2880 ;;  llu             8    0        unsigned long long 
  2881 ;;  f               4    0        unsigned long long 
  2882 ;;  vp              3    0        PTR void 
  2883 ;;  ct              3    0        unsigned char [3]
  2884 ;;  cp              3    0        PTR unsigned char 
  2885 ;;  i               2    0        int 
  2886 ;;  done            2    0        int 
  2887 ;;  c               1    0        unsigned char 
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  2   63[COMRAM] int 
  2890 ;; Registers used:
  2891 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2897 ;;      Params:         6       0       0       0       0       0       0
  2898 ;;      Locals:         8       0       0       0       0       0       0
  2899 ;;      Temps:          2       0       0       0       0       0       0
  2900 ;;      Totals:        16       0       0       0       0       0       0
  2901 ;;Total ram usage:       16 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    6
  2904 ;; This function calls:
  2905 ;;		_dtoa
  2906 ;;		_fputc
  2907 ;; This function is called by:
  2908 ;;		_vfprintf
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           	psect	text9
  2913  000FCE                     __ptext9:
  2914                           	callstack 0
  2915  000FCE                     _vfpfcnvrt:
  2916                           	callstack 20
  2917  000FCE                     
  2918                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 670: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.20\pic\sou
      +                          rces\c99\common\doprnt.c: 671: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\co
      +                          mmon\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.20\pic\sou
      +                          rces\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files\Microchip\xc8\v2.20\pic
      +                          \sources\c99\common\doprnt.c: 674:     long long ll;;C:\Program Files\Microchip\xc8\v2.2
      +                          0\pic\sources\c99\common\doprnt.c: 675:     unsigned long long llu;
  2919  000FCE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2920  000FD2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2921  000FD6  CFDE FFF6          	movff	postinc2,tblptrl
  2922  000FDA  CFDD FFF7          	movff	postdec2,tblptrh
  2923  000FDE                     	if	0	;tblptru may be non-zero
  2924  000FDE                     	endif
  2925  000FDE                     	if	0	;tblptru may be non-zero
  2926  000FDE                     	endif
  2927  000FDE  0008               	tblrd		*
  2928  000FE0  50F5               	movf	tablat,w,c
  2929  000FE2  0A25               	xorlw	37
  2930  000FE4  A4D8               	btfss	status,2,c
  2931  000FE6  EFF7  F007         	goto	u1861
  2932  000FEA  EFF9  F007         	goto	u1860
  2933  000FEE                     u1861:
  2934  000FEE  EFA5  F008         	goto	l2517
  2935  000FF2                     u1860:
  2936  000FF2                     
  2937                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 681:         ++*f
      +                          mt;
  2938  000FF2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2939  000FF6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2940  000FFA  2ADE               	incf	postinc2,f,c
  2941  000FFC  0E00               	movlw	0
  2942  000FFE  22DD               	addwfc	postdec2,f,c
  2943  001000                     
  2944                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 683:         flag
      +                          s = width = 0;
  2945  001000  0E00               	movlw	0
  2946  001002  0100               	movlb	0	; () banked
  2947  001004  6FC7               	movwf	(_width+1)& (0+255),b
  2948  001006  0E00               	movlw	0
  2949  001008  6FC6               	movwf	_width& (0+255),b
  2950  00100A  C0C6  F05C         	movff	_width,_flags
  2951  00100E  C0C7  F05D         	movff	_width+1,_flags+1
  2952  001012                     
  2953                           ; BSR set to: 0
  2954                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 684:         prec
      +                           = -1;
  2955  001012  685A               	setf	_prec^0,c
  2956  001014  685B               	setf	(_prec+1)^0,c
  2957  001016                     
  2958                           ; BSR set to: 0
  2959                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 825:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  2960  001016  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2961  00101A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2962  00101E  CFDE FFF6          	movff	postinc2,tblptrl
  2963  001022  CFDD FFF7          	movff	postdec2,tblptrh
  2964  001026                     	if	0	;tblptru may be non-zero
  2965  001026                     	endif
  2966  001026                     	if	0	;tblptru may be non-zero
  2967  001026                     	endif
  2968  001026  0008               	tblrd		*
  2969  001028  50F5               	movf	tablat,w,c
  2970  00102A  0A64               	xorlw	100
  2971  00102C  B4D8               	btfsc	status,2,c
  2972  00102E  EF1B  F008         	goto	u1871
  2973  001032  EF1D  F008         	goto	u1870
  2974  001036                     u1871:
  2975  001036  EF2F  F008         	goto	l2495
  2976  00103A                     u1870:
  2977  00103A                     
  2978                           ; BSR set to: 0
  2979  00103A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2980  00103E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2981  001042  CFDE FFF6          	movff	postinc2,tblptrl
  2982  001046  CFDD FFF7          	movff	postdec2,tblptrh
  2983  00104A                     	if	0	;tblptru may be non-zero
  2984  00104A                     	endif
  2985  00104A                     	if	0	;tblptru may be non-zero
  2986  00104A                     	endif
  2987  00104A  0008               	tblrd		*
  2988  00104C  50F5               	movf	tablat,w,c
  2989  00104E  0A69               	xorlw	105
  2990  001050  A4D8               	btfss	status,2,c
  2991  001052  EF2D  F008         	goto	u1881
  2992  001056  EF2F  F008         	goto	u1880
  2993  00105A                     u1881:
  2994  00105A  EF6F  F008         	goto	l2501
  2995  00105E                     u1880:
  2996  00105E                     l2495:
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 827:             
      +                          ++*fmt;
  3000  00105E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3001  001062  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3002  001066  2ADE               	incf	postinc2,f,c
  3003  001068  0E00               	movlw	0
  3004  00106A  22DD               	addwfc	postdec2,f,c
  3005                           
  3006                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 828:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  3007  00106C  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3008  001070  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3009  001074  CFDF F046          	movff	indf2,??_vfpfcnvrt
  3010  001078  0E02               	movlw	2
  3011  00107A  26DE               	addwf	postinc2,f,c
  3012  00107C  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  3013  001080  0E00               	movlw	0
  3014  001082  22DD               	addwfc	postdec2,f,c
  3015  001084  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  3016  001088  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3017  00108C  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  3018  001090  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  3019  001094  0E00               	movlw	0
  3020  001096  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  3021  001098  0EFF               	movlw	-1
  3022  00109A  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
  3023  00109C  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  3024  00109E  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  3025  0010A0  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  3026  0010A2  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  3027  0010A4  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  3028  0010A6                     
  3029                           ; BSR set to: 0
  3030                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 830:             
      +                          return dtoa(fp, ll);
  3031  0010A6  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  3032  0010AA  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  3033  0010AE  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  3034  0010B2  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  3035  0010B6  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  3036  0010BA  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  3037  0010BE  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  3038  0010C2  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  3039  0010C6  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  3040  0010CA  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  3041  0010CE  EC78  F006         	call	_dtoa	;wreg free
  3042  0010D2  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  3043  0010D6  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  3044  0010DA  EFC0  F008         	goto	l1218
  3045  0010DE                     l2501:
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1350:         if 
      +                          ((*fmt)[0] == '%') {
  3049  0010DE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3050  0010E2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3051  0010E6  CFDE FFF6          	movff	postinc2,tblptrl
  3052  0010EA  CFDD FFF7          	movff	postdec2,tblptrh
  3053  0010EE                     	if	0	;tblptru may be non-zero
  3054  0010EE                     	endif
  3055  0010EE                     	if	0	;tblptru may be non-zero
  3056  0010EE                     	endif
  3057  0010EE  0008               	tblrd		*
  3058  0010F0  50F5               	movf	tablat,w,c
  3059  0010F2  0A25               	xorlw	37
  3060  0010F4  A4D8               	btfss	status,2,c
  3061  0010F6  EF7F  F008         	goto	u1891
  3062  0010FA  EF81  F008         	goto	u1890
  3063  0010FE                     u1891:
  3064  0010FE  EF98  F008         	goto	l2511
  3065  001102                     u1890:
  3066  001102                     
  3067                           ; BSR set to: 0
  3068                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1351:            
      +                           ++*fmt;
  3069  001102  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3070  001106  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3071  00110A  2ADE               	incf	postinc2,f,c
  3072  00110C  0E00               	movlw	0
  3073  00110E  22DD               	addwfc	postdec2,f,c
  3074  001110                     
  3075                           ; BSR set to: 0
  3076                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1352:            
      +                           fputc((int)'%', fp);
  3077  001110  0E00               	movlw	0
  3078  001112  6E02               	movwf	(fputc@c+1)^0,c
  3079  001114  0E25               	movlw	37
  3080  001116  6E01               	movwf	fputc@c^0,c
  3081  001118  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3082  00111C  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3083  001120  EC03  F00C         	call	_fputc	;wreg free
  3084  001124                     l2507:
  3085                           
  3086                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1353:            
      +                           return 1;
  3087  001124  0E00               	movlw	0
  3088  001126  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  3089  001128  0E01               	movlw	1
  3090  00112A  6E40               	movwf	?_vfpfcnvrt^0,c
  3091  00112C  EFC0  F008         	goto	l1218
  3092  001130                     l2511:
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1357:         ++*
      +                          fmt;
  3096  001130  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3097  001134  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3098  001138  2ADE               	incf	postinc2,f,c
  3099  00113A  0E00               	movlw	0
  3100  00113C  22DD               	addwfc	postdec2,f,c
  3101  00113E                     
  3102                           ; BSR set to: 0
  3103                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1358:         ret
      +                          urn 0;
  3104  00113E  0E00               	movlw	0
  3105  001140  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  3106  001142  0E00               	movlw	0
  3107  001144  6E40               	movwf	?_vfpfcnvrt^0,c
  3108  001146  EFC0  F008         	goto	l1218
  3109  00114A                     l2517:
  3110                           
  3111                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1362:     fputc((
      +                          int)(*fmt)[0], fp);
  3112  00114A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3113  00114E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3114  001152  CFDE FFF6          	movff	postinc2,tblptrl
  3115  001156  CFDD FFF7          	movff	postdec2,tblptrh
  3116  00115A                     	if	0	;tblptru may be non-zero
  3117  00115A                     	endif
  3118  00115A                     	if	0	;tblptru may be non-zero
  3119  00115A                     	endif
  3120  00115A  0008               	tblrd		*
  3121  00115C  50F5               	movf	tablat,w,c
  3122  00115E  6E01               	movwf	fputc@c^0,c
  3123  001160  6A02               	clrf	(fputc@c+1)^0,c
  3124  001162  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3125  001166  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3126  00116A  EC03  F00C         	call	_fputc	;wreg free
  3127  00116E                     
  3128                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1363:     ++*fmt;
  3129  00116E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3130  001172  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3131  001176  2ADE               	incf	postinc2,f,c
  3132  001178  0E00               	movlw	0
  3133  00117A  22DD               	addwfc	postdec2,f,c
  3134  00117C  EF92  F008         	goto	l2507
  3135  001180                     l1218:
  3136  001180  0012               	return		;funcret
  3137  001182                     __end_of_vfpfcnvrt:
  3138                           	callstack 0
  3139                           
  3140 ;; *************** function _dtoa *****************
  3141 ;; Defined at:
  3142 ;;		line 274 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  3145 ;;		 -> sprintf@f(6), 
  3146 ;;  d               8   29[COMRAM] long long 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;  n               8   53[COMRAM] long long 
  3149 ;;  i               2   61[COMRAM] int 
  3150 ;;  s               2   51[COMRAM] int 
  3151 ;;  w               2   49[COMRAM] int 
  3152 ;;  p               2   47[COMRAM] int 
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  2   27[COMRAM] int 
  3155 ;; Registers used:
  3156 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3162 ;;      Params:        10       0       0       0       0       0       0
  3163 ;;      Locals:        18       0       0       0       0       0       0
  3164 ;;      Temps:          8       0       0       0       0       0       0
  3165 ;;      Totals:        36       0       0       0       0       0       0
  3166 ;;Total ram usage:       36 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    5
  3169 ;; This function calls:
  3170 ;;		___aodiv
  3171 ;;		___aomod
  3172 ;;		_abs
  3173 ;;		_pad
  3174 ;; This function is called by:
  3175 ;;		_vfpfcnvrt
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text10
  3180  000CF0                     __ptext10:
  3181                           	callstack 0
  3182  000CF0                     _dtoa:
  3183                           	callstack 20
  3184  000CF0                     
  3185                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 274: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\d
      +                          oprnt.c: 275: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 27
      +                          6:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprn
      +                          t.c: 277:     long long n;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\d
      +                          oprnt.c: 280:     n = d;
  3186  000CF0  C01E  F036         	movff	dtoa@d,dtoa@n
  3187  000CF4  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  3188  000CF8  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  3189  000CFC  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  3190  000D00  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  3191  000D04  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  3192  000D08  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  3193  000D0C  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  3194  000D10                     
  3195                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 281:     s = n < 
      +                          0 ? 1 : 0;
  3196  000D10  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  3197  000D12  EF8D  F006         	goto	u1671
  3198  000D16  EF90  F006         	goto	u1670
  3199  000D1A                     u1671:
  3200  000D1A  0E01               	movlw	1
  3201  000D1C  EF91  F006         	goto	u1680
  3202  000D20                     u1670:
  3203  000D20  0E00               	movlw	0
  3204  000D22                     u1680:
  3205  000D22  6E34               	movwf	dtoa@s^0,c
  3206  000D24  6A35               	clrf	(dtoa@s+1)^0,c
  3207                           
  3208                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 282:     if (s) {
  3209  000D26  5034               	movf	dtoa@s^0,w,c
  3210  000D28  1035               	iorwf	(dtoa@s+1)^0,w,c
  3211  000D2A  B4D8               	btfsc	status,2,c
  3212  000D2C  EF9A  F006         	goto	u1691
  3213  000D30  EF9C  F006         	goto	u1690
  3214  000D34                     u1691:
  3215  000D34  EFAC  F006         	goto	l2411
  3216  000D38                     u1690:
  3217  000D38                     
  3218                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 283:         n = 
      +                          -n;
  3219  000D38  1E3D               	comf	(dtoa@n+7)^0,f,c
  3220  000D3A  1E3C               	comf	(dtoa@n+6)^0,f,c
  3221  000D3C  1E3B               	comf	(dtoa@n+5)^0,f,c
  3222  000D3E  1E3A               	comf	(dtoa@n+4)^0,f,c
  3223  000D40  1E39               	comf	(dtoa@n+3)^0,f,c
  3224  000D42  1E38               	comf	(dtoa@n+2)^0,f,c
  3225  000D44  1E37               	comf	(dtoa@n+1)^0,f,c
  3226  000D46  6C36               	negf	dtoa@n^0,c
  3227  000D48  0E00               	movlw	0
  3228  000D4A  2237               	addwfc	(dtoa@n+1)^0,f,c
  3229  000D4C  2238               	addwfc	(dtoa@n+2)^0,f,c
  3230  000D4E  2239               	addwfc	(dtoa@n+3)^0,f,c
  3231  000D50  223A               	addwfc	(dtoa@n+4)^0,f,c
  3232  000D52  223B               	addwfc	(dtoa@n+5)^0,f,c
  3233  000D54  223C               	addwfc	(dtoa@n+6)^0,f,c
  3234  000D56  223D               	addwfc	(dtoa@n+7)^0,f,c
  3235  000D58                     l2411:
  3236                           
  3237                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 287:     if (!(pr
      +                          ec < 0)) {
  3238  000D58  BE5B               	btfsc	(_prec+1)^0,7,c
  3239  000D5A  EFB1  F006         	goto	u1701
  3240  000D5E  EFB3  F006         	goto	u1700
  3241  000D62                     u1701:
  3242  000D62  EFB4  F006         	goto	l2415
  3243  000D66                     u1700:
  3244  000D66                     
  3245                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 288:         flag
      +                          s &= ~(1 << 1);
  3246  000D66  925C               	bcf	_flags^0,1,c
  3247  000D68                     l2415:
  3248                           
  3249                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 290:     p = (0 <
      +                           prec) ? prec : 1;
  3250  000D68  BE5B               	btfsc	(_prec+1)^0,7,c
  3251  000D6A  EFC1  F006         	goto	u1710
  3252  000D6E  505B               	movf	(_prec+1)^0,w,c
  3253  000D70  E106               	bnz	u1711
  3254  000D72  045A               	decf	_prec^0,w,c
  3255  000D74  B0D8               	btfsc	status,0,c
  3256  000D76  EFBF  F006         	goto	u1711
  3257  000D7A  EFC1  F006         	goto	u1710
  3258  000D7E                     u1711:
  3259  000D7E  EFC7  F006         	goto	l1191
  3260  000D82                     u1710:
  3261  000D82  0E00               	movlw	0
  3262  000D84  6E31               	movwf	(dtoa@p+1)^0,c
  3263  000D86  0E01               	movlw	1
  3264  000D88  6E30               	movwf	dtoa@p^0,c
  3265  000D8A  EFCB  F006         	goto	l1193
  3266  000D8E                     l1191:
  3267  000D8E  C05A  F030         	movff	_prec,dtoa@p
  3268  000D92  C05B  F031         	movff	_prec+1,dtoa@p+1
  3269  000D96                     l1193:
  3270                           
  3271                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 291:     w = widt
      +                          h;
  3272  000D96  C0C6  F032         	movff	_width,dtoa@w
  3273  000D9A  C0C7  F033         	movff	_width+1,dtoa@w+1
  3274  000D9E                     
  3275                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 292:     if (s ||
      +                           (flags & (1 << 2))) {
  3276  000D9E  5034               	movf	dtoa@s^0,w,c
  3277  000DA0  1035               	iorwf	(dtoa@s+1)^0,w,c
  3278  000DA2  A4D8               	btfss	status,2,c
  3279  000DA4  EFD6  F006         	goto	u1721
  3280  000DA8  EFD8  F006         	goto	u1720
  3281  000DAC                     u1721:
  3282  000DAC  EFDF  F006         	goto	l2423
  3283  000DB0                     u1720:
  3284  000DB0  A45C               	btfss	_flags^0,2,c
  3285  000DB2  EFDD  F006         	goto	u1731
  3286  000DB6  EFDF  F006         	goto	u1730
  3287  000DBA                     u1731:
  3288  000DBA  EFE2  F006         	goto	l2425
  3289  000DBE                     u1730:
  3290  000DBE                     l2423:
  3291                           
  3292                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 293:         --w;
  3293  000DBE  0632               	decf	dtoa@w^0,f,c
  3294  000DC0  A0D8               	btfss	status,0,c
  3295  000DC2  0633               	decf	(dtoa@w+1)^0,f,c
  3296  000DC4                     l2425:
  3297                           
  3298                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 297:     i = size
      +                          of(dbuf) - 1;
  3299  000DC4  0E00               	movlw	0
  3300  000DC6  6E3F               	movwf	(dtoa@i+1)^0,c
  3301  000DC8  0E1F               	movlw	31
  3302  000DCA  6E3E               	movwf	dtoa@i^0,c
  3303  000DCC                     
  3304                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 298:     dbuf[i] 
      +                          = '\0';
  3305  000DCC  0E00               	movlw	0
  3306  000DCE  0101               	movlb	1	; () banked
  3307  000DD0  6F7F               	movwf	(_dbuf+31)& (0+255),b
  3308                           
  3309                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 299:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3310  000DD2  EF67  F007         	goto	l2439
  3311  000DD6                     l2429:
  3312                           
  3313                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 300:         --i;
  3314  000DD6  063E               	decf	dtoa@i^0,f,c
  3315  000DD8  A0D8               	btfss	status,0,c
  3316  000DDA  063F               	decf	(dtoa@i+1)^0,f,c
  3317  000DDC                     
  3318                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 301:         dbuf
      +                          [i] = '0' + abs(n % 10);
  3319  000DDC  0E60               	movlw	low _dbuf
  3320  000DDE  243E               	addwf	dtoa@i^0,w,c
  3321  000DE0  6ED9               	movwf	fsr2l,c
  3322  000DE2  0E01               	movlw	high _dbuf
  3323  000DE4  203F               	addwfc	(dtoa@i+1)^0,w,c
  3324  000DE6  6EDA               	movwf	fsr2h,c
  3325  000DE8  C036  F001         	movff	dtoa@n,___aomod@dividend
  3326  000DEC  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  3327  000DF0  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  3328  000DF4  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  3329  000DF8  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  3330  000DFC  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  3331  000E00  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  3332  000E04  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  3333  000E08  0E0A               	movlw	10
  3334  000E0A  6E09               	movwf	___aomod@divisor^0,c
  3335  000E0C  0E00               	movlw	0
  3336  000E0E  6E0A               	movwf	(___aomod@divisor+1)^0,c
  3337  000E10  0E00               	movlw	0
  3338  000E12  6E0B               	movwf	(___aomod@divisor+2)^0,c
  3339  000E14  0E00               	movlw	0
  3340  000E16  6E0C               	movwf	(___aomod@divisor+3)^0,c
  3341  000E18  0E00               	movlw	0
  3342  000E1A  6E0D               	movwf	(___aomod@divisor+4)^0,c
  3343  000E1C  0E00               	movlw	0
  3344  000E1E  6E0E               	movwf	(___aomod@divisor+5)^0,c
  3345  000E20  0E00               	movlw	0
  3346  000E22  6E0F               	movwf	(___aomod@divisor+6)^0,c
  3347  000E24  0E00               	movlw	0
  3348  000E26  6E10               	movwf	(___aomod@divisor+7)^0,c
  3349  000E28  EC58  F00A         	call	___aomod	;wreg free
  3350  000E2C  C001  F026         	movff	?___aomod,??_dtoa
  3351  000E30  C002  F027         	movff	?___aomod+1,??_dtoa+1
  3352  000E34  C003  F028         	movff	?___aomod+2,??_dtoa+2
  3353  000E38  C004  F029         	movff	?___aomod+3,??_dtoa+3
  3354  000E3C  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  3355  000E40  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  3356  000E44  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  3357  000E48  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  3358  000E4C  C026  F013         	movff	??_dtoa,abs@a
  3359  000E50  C028  F014         	movff	??_dtoa+2,abs@a+1
  3360  000E54  EC88  F00E         	call	_abs	;wreg free
  3361  000E58  5013               	movf	?_abs^0,w,c
  3362  000E5A  0F30               	addlw	48
  3363  000E5C  6EDF               	movwf	indf2,c
  3364  000E5E                     
  3365                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 302:         --p;
  3366  000E5E  0630               	decf	dtoa@p^0,f,c
  3367  000E60  A0D8               	btfss	status,0,c
  3368  000E62  0631               	decf	(dtoa@p+1)^0,f,c
  3369  000E64                     
  3370                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 303:         --w;
  3371  000E64  0632               	decf	dtoa@w^0,f,c
  3372  000E66  A0D8               	btfss	status,0,c
  3373  000E68  0633               	decf	(dtoa@w+1)^0,f,c
  3374  000E6A                     
  3375                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 304:         n = 
      +                          n / 10;
  3376  000E6A  C036  F001         	movff	dtoa@n,___aodiv@dividend
  3377  000E6E  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  3378  000E72  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  3379  000E76  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  3380  000E7A  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  3381  000E7E  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  3382  000E82  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  3383  000E86  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  3384  000E8A  0E0A               	movlw	10
  3385  000E8C  6E09               	movwf	___aodiv@divisor^0,c
  3386  000E8E  0E00               	movlw	0
  3387  000E90  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  3388  000E92  0E00               	movlw	0
  3389  000E94  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  3390  000E96  0E00               	movlw	0
  3391  000E98  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  3392  000E9A  0E00               	movlw	0
  3393  000E9C  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  3394  000E9E  0E00               	movlw	0
  3395  000EA0  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  3396  000EA2  0E00               	movlw	0
  3397  000EA4  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  3398  000EA6  0E00               	movlw	0
  3399  000EA8  6E10               	movwf	(___aodiv@divisor+7)^0,c
  3400  000EAA  EC94  F009         	call	___aodiv	;wreg free
  3401  000EAE  C001  F036         	movff	?___aodiv,dtoa@n
  3402  000EB2  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  3403  000EB6  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  3404  000EBA  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  3405  000EBE  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  3406  000EC2  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  3407  000EC6  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  3408  000ECA  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  3409  000ECE                     l2439:
  3410                           
  3411                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 299:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3412  000ECE  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  3413  000ED0  EF72  F007         	goto	u1741
  3414  000ED4  503F               	movf	(dtoa@i+1)^0,w,c
  3415  000ED6  E108               	bnz	u1740
  3416  000ED8  043E               	decf	dtoa@i^0,w,c
  3417  000EDA  A0D8               	btfss	status,0,c
  3418  000EDC  EF72  F007         	goto	u1741
  3419  000EE0  EF74  F007         	goto	u1740
  3420  000EE4                     u1741:
  3421  000EE4  EFA4  F007         	goto	l2449
  3422  000EE8                     u1740:
  3423  000EE8  5036               	movf	dtoa@n^0,w,c
  3424  000EEA  1037               	iorwf	(dtoa@n+1)^0,w,c
  3425  000EEC  1038               	iorwf	(dtoa@n+2)^0,w,c
  3426  000EEE  1039               	iorwf	(dtoa@n+3)^0,w,c
  3427  000EF0  103A               	iorwf	(dtoa@n+4)^0,w,c
  3428  000EF2  103B               	iorwf	(dtoa@n+5)^0,w,c
  3429  000EF4  103C               	iorwf	(dtoa@n+6)^0,w,c
  3430  000EF6  103D               	iorwf	(dtoa@n+7)^0,w,c
  3431  000EF8  A4D8               	btfss	status,2,c
  3432  000EFA  EF81  F007         	goto	u1751
  3433  000EFE  EF83  F007         	goto	u1750
  3434  000F02                     u1751:
  3435  000F02  EFEB  F006         	goto	l2429
  3436  000F06                     u1750:
  3437  000F06  BE31               	btfsc	(dtoa@p+1)^0,7,c
  3438  000F08  EF90  F007         	goto	u1760
  3439  000F0C  5031               	movf	(dtoa@p+1)^0,w,c
  3440  000F0E  E106               	bnz	u1761
  3441  000F10  0430               	decf	dtoa@p^0,w,c
  3442  000F12  B0D8               	btfsc	status,0,c
  3443  000F14  EF8E  F007         	goto	u1761
  3444  000F18  EF90  F007         	goto	u1760
  3445  000F1C                     u1761:
  3446  000F1C  EFEB  F006         	goto	l2429
  3447  000F20                     u1760:
  3448  000F20  BE33               	btfsc	(dtoa@w+1)^0,7,c
  3449  000F22  EF9B  F007         	goto	u1771
  3450  000F26  5033               	movf	(dtoa@w+1)^0,w,c
  3451  000F28  E108               	bnz	u1770
  3452  000F2A  0432               	decf	dtoa@w^0,w,c
  3453  000F2C  A0D8               	btfss	status,0,c
  3454  000F2E  EF9B  F007         	goto	u1771
  3455  000F32  EF9D  F007         	goto	u1770
  3456  000F36                     u1771:
  3457  000F36  EFA4  F007         	goto	l2449
  3458  000F3A                     u1770:
  3459  000F3A  B25C               	btfsc	_flags^0,1,c
  3460  000F3C  EFA2  F007         	goto	u1781
  3461  000F40  EFA4  F007         	goto	u1780
  3462  000F44                     u1781:
  3463  000F44  EFEB  F006         	goto	l2429
  3464  000F48                     u1780:
  3465  000F48                     l2449:
  3466                           
  3467                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 308:     if (s ||
      +                           (flags & (1 << 2))) {
  3468  000F48  5034               	movf	dtoa@s^0,w,c
  3469  000F4A  1035               	iorwf	(dtoa@s+1)^0,w,c
  3470  000F4C  A4D8               	btfss	status,2,c
  3471  000F4E  EFAB  F007         	goto	u1791
  3472  000F52  EFAD  F007         	goto	u1790
  3473  000F56                     u1791:
  3474  000F56  EFB4  F007         	goto	l2453
  3475  000F5A                     u1790:
  3476  000F5A  A45C               	btfss	_flags^0,2,c
  3477  000F5C  EFB2  F007         	goto	u1801
  3478  000F60  EFB4  F007         	goto	u1800
  3479  000F64                     u1801:
  3480  000F64  EFD2  F007         	goto	l2463
  3481  000F68                     u1800:
  3482  000F68                     l2453:
  3483                           
  3484                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 309:         --i;
  3485  000F68  063E               	decf	dtoa@i^0,f,c
  3486  000F6A  A0D8               	btfss	status,0,c
  3487  000F6C  063F               	decf	(dtoa@i+1)^0,f,c
  3488  000F6E                     
  3489                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 310:         dbuf
      +                          [i] = s ? '-' : '+';
  3490  000F6E  5034               	movf	dtoa@s^0,w,c
  3491  000F70  1035               	iorwf	(dtoa@s+1)^0,w,c
  3492  000F72  A4D8               	btfss	status,2,c
  3493  000F74  EFBE  F007         	goto	u1811
  3494  000F78  EFC0  F007         	goto	u1810
  3495  000F7C                     u1811:
  3496  000F7C  EFC6  F007         	goto	l2459
  3497  000F80                     u1810:
  3498  000F80  0E00               	movlw	0
  3499  000F82  6E2F               	movwf	(_dtoa$2778+1)^0,c
  3500  000F84  0E2B               	movlw	43
  3501  000F86  6E2E               	movwf	_dtoa$2778^0,c
  3502  000F88  EFCA  F007         	goto	l2461
  3503  000F8C                     l2459:
  3504  000F8C  0E00               	movlw	0
  3505  000F8E  6E2F               	movwf	(_dtoa$2778+1)^0,c
  3506  000F90  0E2D               	movlw	45
  3507  000F92  6E2E               	movwf	_dtoa$2778^0,c
  3508  000F94                     l2461:
  3509  000F94  0E60               	movlw	low _dbuf
  3510  000F96  243E               	addwf	dtoa@i^0,w,c
  3511  000F98  6ED9               	movwf	fsr2l,c
  3512  000F9A  0E01               	movlw	high _dbuf
  3513  000F9C  203F               	addwfc	(dtoa@i+1)^0,w,c
  3514  000F9E  6EDA               	movwf	fsr2h,c
  3515  000FA0  C02E  FFDF         	movff	_dtoa$2778,indf2
  3516  000FA4                     l2463:
  3517                           
  3518                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 314:     return p
      +                          ad(fp, &dbuf[i], w);
  3519  000FA4  C01C  F011         	movff	dtoa@fp,pad@fp
  3520  000FA8  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  3521  000FAC  0E60               	movlw	low _dbuf
  3522  000FAE  243E               	addwf	dtoa@i^0,w,c
  3523  000FB0  6E13               	movwf	pad@buf^0,c
  3524  000FB2  0E01               	movlw	high _dbuf
  3525  000FB4  203F               	addwfc	(dtoa@i+1)^0,w,c
  3526  000FB6  6E14               	movwf	(pad@buf+1)^0,c
  3527  000FB8  C032  F015         	movff	dtoa@w,pad@p
  3528  000FBC  C033  F016         	movff	dtoa@w+1,pad@p+1
  3529  000FC0  EC68  F00C         	call	_pad	;wreg free
  3530  000FC4  C011  F01C         	movff	?_pad,?_dtoa
  3531  000FC8  C012  F01D         	movff	?_pad+1,?_dtoa+1
  3532  000FCC  0012               	return		;funcret
  3533  000FCE                     __end_of_dtoa:
  3534                           	callstack 0
  3535                           
  3536 ;; *************** function _pad *****************
  3537 ;; Defined at:
  3538 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  3541 ;;		 -> sprintf@f(6), 
  3542 ;;  buf             2   18[COMRAM] PTR unsigned char 
  3543 ;;		 -> dbuf(32), 
  3544 ;;  p               2   20[COMRAM] int 
  3545 ;; Auto vars:     Size  Location     Type
  3546 ;;  w               2   25[COMRAM] int 
  3547 ;;  i               2   23[COMRAM] int 
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  2   16[COMRAM] int 
  3550 ;; Registers used:
  3551 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3557 ;;      Params:         6       0       0       0       0       0       0
  3558 ;;      Locals:         4       0       0       0       0       0       0
  3559 ;;      Temps:          1       0       0       0       0       0       0
  3560 ;;      Totals:        11       0       0       0       0       0       0
  3561 ;;Total ram usage:       11 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    4
  3564 ;; This function calls:
  3565 ;;		_fputc
  3566 ;;		_fputs
  3567 ;;		_strlen
  3568 ;; This function is called by:
  3569 ;;		_dtoa
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text11
  3574  0018D0                     __ptext11:
  3575                           	callstack 0
  3576  0018D0                     _pad:
  3577                           	callstack 20
  3578  0018D0                     
  3579                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  3580  0018D0  A05C               	btfss	_flags^0,0,c
  3581  0018D2  EF6D  F00C         	goto	u1621
  3582  0018D6  EF6F  F00C         	goto	u1620
  3583  0018DA                     u1621:
  3584  0018DA  EF79  F00C         	goto	l2383
  3585  0018DE                     u1620:
  3586  0018DE                     
  3587                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  3588  0018DE  C013  F00A         	movff	pad@buf,fputs@s
  3589  0018E2  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3590  0018E6  C011  F00C         	movff	pad@fp,fputs@fp
  3591  0018EA  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3592  0018EE  EC66  F00E         	call	_fputs	;wreg free
  3593  0018F2                     l2383:
  3594                           
  3595                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  3596  0018F2  BE16               	btfsc	(pad@p+1)^0,7,c
  3597  0018F4  EF7E  F00C         	goto	u1631
  3598  0018F8  EF80  F00C         	goto	u1630
  3599  0018FC                     u1631:
  3600  0018FC  EF86  F00C         	goto	l2387
  3601  001900                     u1630:
  3602  001900  C015  F01A         	movff	pad@p,pad@w
  3603  001904  C016  F01B         	movff	pad@p+1,pad@w+1
  3604  001908  EF8A  F00C         	goto	l1180
  3605  00190C                     l2387:
  3606  00190C  0E00               	movlw	0
  3607  00190E  6E1B               	movwf	(pad@w+1)^0,c
  3608  001910  0E00               	movlw	0
  3609  001912  6E1A               	movwf	pad@w^0,c
  3610  001914                     l1180:
  3611                           
  3612                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  3613  001914  0E00               	movlw	0
  3614  001916  6E19               	movwf	(pad@i+1)^0,c
  3615  001918  0E00               	movlw	0
  3616  00191A  6E18               	movwf	pad@i^0,c
  3617                           
  3618                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  3619  00191C  EF9C  F00C         	goto	l2393
  3620  001920                     l2389:
  3621                           
  3622                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  3623  001920  0E00               	movlw	0
  3624  001922  6E02               	movwf	(fputc@c+1)^0,c
  3625  001924  0E20               	movlw	32
  3626  001926  6E01               	movwf	fputc@c^0,c
  3627  001928  C011  F003         	movff	pad@fp,fputc@fp
  3628  00192C  C012  F004         	movff	pad@fp+1,fputc@fp+1
  3629  001930  EC03  F00C         	call	_fputc	;wreg free
  3630  001934                     
  3631                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 86:         ++i;
  3632  001934  4A18               	infsnz	pad@i^0,f,c
  3633  001936  2A19               	incf	(pad@i+1)^0,f,c
  3634  001938                     l2393:
  3635                           
  3636                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  3637  001938  501A               	movf	pad@w^0,w,c
  3638  00193A  5C18               	subwf	pad@i^0,w,c
  3639  00193C  5019               	movf	(pad@i+1)^0,w,c
  3640  00193E  0A80               	xorlw	128
  3641  001940  6E17               	movwf	??_pad^0,c
  3642  001942  501B               	movf	(pad@w+1)^0,w,c
  3643  001944  0A80               	xorlw	128
  3644  001946  5817               	subwfb	??_pad^0,w,c
  3645  001948  A0D8               	btfss	status,0,c
  3646  00194A  EFA9  F00C         	goto	u1641
  3647  00194E  EFAB  F00C         	goto	u1640
  3648  001952                     u1641:
  3649  001952  EF90  F00C         	goto	l2389
  3650  001956                     u1640:
  3651  001956                     
  3652                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  3653  001956  B05C               	btfsc	_flags^0,0,c
  3654  001958  EFB0  F00C         	goto	u1651
  3655  00195C  EFB2  F00C         	goto	u1650
  3656  001960                     u1651:
  3657  001960  EFBC  F00C         	goto	l2397
  3658  001964                     u1650:
  3659  001964                     
  3660                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  3661  001964  C013  F00A         	movff	pad@buf,fputs@s
  3662  001968  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3663  00196C  C011  F00C         	movff	pad@fp,fputs@fp
  3664  001970  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3665  001974  EC66  F00E         	call	_fputs	;wreg free
  3666  001978                     l2397:
  3667                           
  3668                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 94:     return st
      +                          rlen(buf) + w;
  3669  001978  C013  F001         	movff	pad@buf,strlen@s
  3670  00197C  C014  F002         	movff	pad@buf+1,strlen@s+1
  3671  001980  ECA8  F00E         	call	_strlen	;wreg free
  3672  001984  501A               	movf	pad@w^0,w,c
  3673  001986  2401               	addwf	?_strlen^0,w,c
  3674  001988  6E11               	movwf	?_pad^0,c
  3675  00198A  501B               	movf	(pad@w+1)^0,w,c
  3676  00198C  2002               	addwfc	(?_strlen+1)^0,w,c
  3677  00198E  6E12               	movwf	(?_pad+1)^0,c
  3678  001990  0012               	return		;funcret
  3679  001992                     __end_of_pad:
  3680                           	callstack 0
  3681                           
  3682 ;; *************** function _strlen *****************
  3683 ;; Defined at:
  3684 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\strlen.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;  s               2    0[COMRAM] PTR const unsigned char 
  3687 ;;		 -> dbuf(32), 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;  a               2    2[COMRAM] PTR const unsigned char 
  3690 ;;		 -> dbuf(32), 
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  2    0[COMRAM] unsigned int 
  3693 ;; Registers used:
  3694 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3700 ;;      Params:         2       0       0       0       0       0       0
  3701 ;;      Locals:         2       0       0       0       0       0       0
  3702 ;;      Temps:          0       0       0       0       0       0       0
  3703 ;;      Totals:         4       0       0       0       0       0       0
  3704 ;;Total ram usage:        4 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; Hardware stack levels required when called:    1
  3707 ;; This function calls:
  3708 ;;		Nothing
  3709 ;; This function is called by:
  3710 ;;		_pad
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text12
  3715  001D50                     __ptext12:
  3716                           	callstack 0
  3717  001D50                     _strlen:
  3718                           	callstack 22
  3719  001D50  C001  F003         	movff	strlen@s,strlen@a
  3720  001D54  C002  F004         	movff	strlen@s+1,strlen@a+1
  3721  001D58  EFB0  F00E         	goto	l2293
  3722  001D5C                     l2291:
  3723  001D5C  4A01               	infsnz	strlen@s^0,f,c
  3724  001D5E  2A02               	incf	(strlen@s+1)^0,f,c
  3725  001D60                     l2293:
  3726  001D60  C001  FFD9         	movff	strlen@s,fsr2l
  3727  001D64  C002  FFDA         	movff	strlen@s+1,fsr2h
  3728  001D68  50DF               	movf	indf2,w,c
  3729  001D6A  A4D8               	btfss	status,2,c
  3730  001D6C  EFBA  F00E         	goto	u1481
  3731  001D70  EFBC  F00E         	goto	u1480
  3732  001D74                     u1481:
  3733  001D74  EFAE  F00E         	goto	l2291
  3734  001D78                     u1480:
  3735  001D78  5003               	movf	strlen@a^0,w,c
  3736  001D7A  5C01               	subwf	strlen@s^0,w,c
  3737  001D7C  6E01               	movwf	?_strlen^0,c
  3738  001D7E  5004               	movf	(strlen@a+1)^0,w,c
  3739  001D80  5802               	subwfb	(strlen@s+1)^0,w,c
  3740  001D82  6E02               	movwf	(?_strlen+1)^0,c
  3741  001D84  0012               	return		;funcret
  3742  001D86                     __end_of_strlen:
  3743                           	callstack 0
  3744                           
  3745 ;; *************** function _fputs *****************
  3746 ;; Defined at:
  3747 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\nf_fputs.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;  s               2    9[COMRAM] PTR const unsigned char 
  3750 ;;		 -> dbuf(32), 
  3751 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  3752 ;;		 -> sprintf@f(6), 
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;  i               2   14[COMRAM] int 
  3755 ;;  c               1   13[COMRAM] unsigned char 
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  2    9[COMRAM] int 
  3758 ;; Registers used:
  3759 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3765 ;;      Params:         4       0       0       0       0       0       0
  3766 ;;      Locals:         3       0       0       0       0       0       0
  3767 ;;      Temps:          0       0       0       0       0       0       0
  3768 ;;      Totals:         7       0       0       0       0       0       0
  3769 ;;Total ram usage:        7 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    3
  3772 ;; This function calls:
  3773 ;;		_fputc
  3774 ;; This function is called by:
  3775 ;;		_pad
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	text13
  3780  001CCC                     __ptext13:
  3781                           	callstack 0
  3782  001CCC                     _fputs:
  3783                           	callstack 20
  3784  001CCC  0E00               	movlw	0
  3785  001CCE  6E10               	movwf	(fputs@i+1)^0,c
  3786  001CD0  0E00               	movlw	0
  3787  001CD2  6E0F               	movwf	fputs@i^0,c
  3788  001CD4  EF77  F00E         	goto	l2287
  3789  001CD8                     l2283:
  3790  001CD8  C00E  F001         	movff	fputs@c,fputc@c
  3791  001CDC  6A02               	clrf	(fputc@c+1)^0,c
  3792  001CDE  C00C  F003         	movff	fputs@fp,fputc@fp
  3793  001CE2  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  3794  001CE6  EC03  F00C         	call	_fputc	;wreg free
  3795  001CEA  4A0F               	infsnz	fputs@i^0,f,c
  3796  001CEC  2A10               	incf	(fputs@i+1)^0,f,c
  3797  001CEE                     l2287:
  3798  001CEE  500F               	movf	fputs@i^0,w,c
  3799  001CF0  240A               	addwf	fputs@s^0,w,c
  3800  001CF2  6ED9               	movwf	fsr2l,c
  3801  001CF4  5010               	movf	(fputs@i+1)^0,w,c
  3802  001CF6  200B               	addwfc	(fputs@s+1)^0,w,c
  3803  001CF8  6EDA               	movwf	fsr2h,c
  3804  001CFA  50DF               	movf	indf2,w,c
  3805  001CFC  6E0E               	movwf	fputs@c^0,c
  3806  001CFE  500E               	movf	fputs@c^0,w,c
  3807  001D00  A4D8               	btfss	status,2,c
  3808  001D02  EF85  F00E         	goto	u1471
  3809  001D06  EF87  F00E         	goto	u1470
  3810  001D0A                     u1471:
  3811  001D0A  EF6C  F00E         	goto	l2283
  3812  001D0E                     u1470:
  3813  001D0E  0012               	return		;funcret
  3814  001D10                     __end_of_fputs:
  3815                           	callstack 0
  3816                           
  3817 ;; *************** function _fputc *****************
  3818 ;; Defined at:
  3819 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\nf_fputc.c"
  3820 ;; Parameters:    Size  Location     Type
  3821 ;;  c               2    0[COMRAM] int 
  3822 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  3823 ;;		 -> sprintf@f(6), 
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;		None
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  2    0[COMRAM] int 
  3828 ;; Registers used:
  3829 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3835 ;;      Params:         4       0       0       0       0       0       0
  3836 ;;      Locals:         0       0       0       0       0       0       0
  3837 ;;      Temps:          5       0       0       0       0       0       0
  3838 ;;      Totals:         9       0       0       0       0       0       0
  3839 ;;Total ram usage:        9 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    2
  3842 ;; This function calls:
  3843 ;;		_putch
  3844 ;; This function is called by:
  3845 ;;		_pad
  3846 ;;		_vfpfcnvrt
  3847 ;;		_fputs
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text14
  3852  001806                     __ptext14:
  3853                           	callstack 0
  3854  001806                     _fputc:
  3855                           	callstack 23
  3856  001806  5003               	movf	fputc@fp^0,w,c
  3857  001808  1004               	iorwf	(fputc@fp+1)^0,w,c
  3858  00180A  B4D8               	btfsc	status,2,c
  3859  00180C  EF0A  F00C         	goto	u1431
  3860  001810  EF0C  F00C         	goto	u1430
  3861  001814                     u1431:
  3862  001814  EF15  F00C         	goto	l2271
  3863  001818                     u1430:
  3864  001818  5003               	movf	fputc@fp^0,w,c
  3865  00181A  1004               	iorwf	(fputc@fp+1)^0,w,c
  3866  00181C  A4D8               	btfss	status,2,c
  3867  00181E  EF13  F00C         	goto	u1441
  3868  001822  EF15  F00C         	goto	u1440
  3869  001826                     u1441:
  3870  001826  EF1A  F00C         	goto	l2273
  3871  00182A                     u1440:
  3872  00182A                     l2271:
  3873  00182A  5001               	movf	fputc@c^0,w,c
  3874  00182C  EC42  F00F         	call	_putch
  3875  001830  EF67  F00C         	goto	l1244
  3876  001834                     l2273:
  3877  001834  EE20 F004          	lfsr	2,4
  3878  001838  5003               	movf	fputc@fp^0,w,c
  3879  00183A  26D9               	addwf	fsr2l,f,c
  3880  00183C  5004               	movf	(fputc@fp+1)^0,w,c
  3881  00183E  22DA               	addwfc	fsr2h,f,c
  3882  001840  50DE               	movf	postinc2,w,c
  3883  001842  10DE               	iorwf	postinc2,w,c
  3884  001844  B4D8               	btfsc	status,2,c
  3885  001846  EF27  F00C         	goto	u1451
  3886  00184A  EF29  F00C         	goto	u1450
  3887  00184E                     u1451:
  3888  00184E  EF44  F00C         	goto	l2277
  3889  001852                     u1450:
  3890  001852  EE20 F004          	lfsr	2,4
  3891  001856  5003               	movf	fputc@fp^0,w,c
  3892  001858  26D9               	addwf	fsr2l,f,c
  3893  00185A  5004               	movf	(fputc@fp+1)^0,w,c
  3894  00185C  22DA               	addwfc	fsr2h,f,c
  3895  00185E  EE10 F002          	lfsr	1,2
  3896  001862  5003               	movf	fputc@fp^0,w,c
  3897  001864  26E1               	addwf	fsr1l,f,c
  3898  001866  5004               	movf	(fputc@fp+1)^0,w,c
  3899  001868  22E2               	addwfc	fsr1h,f,c
  3900  00186A  50DE               	movf	postinc2,w,c
  3901  00186C  5CE6               	subwf	postinc1,w,c
  3902  00186E  50E6               	movf	postinc1,w,c
  3903  001870  0A80               	xorlw	128
  3904  001872  6E09               	movwf	(??_fputc+4)^0,c
  3905  001874  50DE               	movf	postinc2,w,c
  3906  001876  0A80               	xorlw	128
  3907  001878  5809               	subwfb	(??_fputc+4)^0,w,c
  3908  00187A  B0D8               	btfsc	status,0,c
  3909  00187C  EF42  F00C         	goto	u1461
  3910  001880  EF44  F00C         	goto	u1460
  3911  001884                     u1461:
  3912  001884  EF67  F00C         	goto	l1244
  3913  001888                     u1460:
  3914  001888                     l2277:
  3915  001888  EE20 F002          	lfsr	2,2
  3916  00188C  5003               	movf	fputc@fp^0,w,c
  3917  00188E  26D9               	addwf	fsr2l,f,c
  3918  001890  5004               	movf	(fputc@fp+1)^0,w,c
  3919  001892  22DA               	addwfc	fsr2h,f,c
  3920  001894  CFDE F005          	movff	postinc2,??_fputc
  3921  001898  CFDD F006          	movff	postdec2,??_fputc+1
  3922  00189C  C003  FFD9         	movff	fputc@fp,fsr2l
  3923  0018A0  C004  FFDA         	movff	fputc@fp+1,fsr2h
  3924  0018A4  CFDE F007          	movff	postinc2,??_fputc+2
  3925  0018A8  CFDD F008          	movff	postdec2,??_fputc+3
  3926  0018AC  5005               	movf	??_fputc^0,w,c
  3927  0018AE  2407               	addwf	(??_fputc+2)^0,w,c
  3928  0018B0  6ED9               	movwf	fsr2l,c
  3929  0018B2  5006               	movf	(??_fputc+1)^0,w,c
  3930  0018B4  2008               	addwfc	(??_fputc+3)^0,w,c
  3931  0018B6  6EDA               	movwf	fsr2h,c
  3932  0018B8  C001  FFDF         	movff	fputc@c,indf2
  3933  0018BC  EE20 F002          	lfsr	2,2
  3934  0018C0  5003               	movf	fputc@fp^0,w,c
  3935  0018C2  26D9               	addwf	fsr2l,f,c
  3936  0018C4  5004               	movf	(fputc@fp+1)^0,w,c
  3937  0018C6  22DA               	addwfc	fsr2h,f,c
  3938  0018C8  2ADE               	incf	postinc2,f,c
  3939  0018CA  0E00               	movlw	0
  3940  0018CC  22DD               	addwfc	postdec2,f,c
  3941  0018CE                     l1244:
  3942  0018CE  0012               	return		;funcret
  3943  0018D0                     __end_of_fputc:
  3944                           	callstack 0
  3945                           
  3946 ;; *************** function _putch *****************
  3947 ;; Defined at:
  3948 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\putch.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;  c               1    wreg     unsigned char 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  c               1    0[COMRAM] unsigned char 
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  1    wreg      void 
  3955 ;; Registers used:
  3956 ;;		wreg
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3962 ;;      Params:         0       0       0       0       0       0       0
  3963 ;;      Locals:         0       0       0       0       0       0       0
  3964 ;;      Temps:          0       0       0       0       0       0       0
  3965 ;;      Totals:         0       0       0       0       0       0       0
  3966 ;;Total ram usage:        0 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    1
  3969 ;; This function calls:
  3970 ;;		Nothing
  3971 ;; This function is called by:
  3972 ;;		_fputc
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           	psect	text15
  3977  001E84                     __ptext15:
  3978                           	callstack 0
  3979  001E84                     _putch:
  3980                           	callstack 23
  3981  001E84  0012               	return		;funcret
  3982  001E86                     __end_of_putch:
  3983                           	callstack 0
  3984                           
  3985 ;; *************** function _abs *****************
  3986 ;; Defined at:
  3987 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\abs.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;  a               2   18[COMRAM] int 
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;		None
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  2   18[COMRAM] int 
  3994 ;; Registers used:
  3995 ;;		wreg, status,2, status,0
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4001 ;;      Params:         2       0       0       0       0       0       0
  4002 ;;      Locals:         0       0       0       0       0       0       0
  4003 ;;      Temps:          2       0       0       0       0       0       0
  4004 ;;      Totals:         4       0       0       0       0       0       0
  4005 ;;Total ram usage:        4 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    1
  4008 ;; This function calls:
  4009 ;;		Nothing
  4010 ;; This function is called by:
  4011 ;;		_dtoa
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           	psect	text16
  4016  001D10                     __ptext16:
  4017                           	callstack 0
  4018  001D10                     _abs:
  4019                           	callstack 23
  4020  001D10  BE14               	btfsc	(abs@a+1)^0,7,c
  4021  001D12  EF95  F00E         	goto	u1660
  4022  001D16  5014               	movf	(abs@a+1)^0,w,c
  4023  001D18  E106               	bnz	u1661
  4024  001D1A  0413               	decf	abs@a^0,w,c
  4025  001D1C  B0D8               	btfsc	status,0,c
  4026  001D1E  EF93  F00E         	goto	u1661
  4027  001D22  EF95  F00E         	goto	u1660
  4028  001D26                     u1661:
  4029  001D26  EFA3  F00E         	goto	l1229
  4030  001D2A                     u1660:
  4031  001D2A  C013  F015         	movff	abs@a,??_abs
  4032  001D2E  C014  F016         	movff	abs@a+1,??_abs+1
  4033  001D32  1E15               	comf	??_abs^0,f,c
  4034  001D34  1E16               	comf	(??_abs+1)^0,f,c
  4035  001D36  4A15               	infsnz	??_abs^0,f,c
  4036  001D38  2A16               	incf	(??_abs+1)^0,f,c
  4037  001D3A  C015  F013         	movff	??_abs,?_abs
  4038  001D3E  C016  F014         	movff	??_abs+1,?_abs+1
  4039  001D42  EFA7  F00E         	goto	l1232
  4040  001D46                     l1229:
  4041  001D46  C013  F013         	movff	abs@a,?_abs
  4042  001D4A  C014  F014         	movff	abs@a+1,?_abs+1
  4043  001D4E                     l1232:
  4044  001D4E  0012               	return		;funcret
  4045  001D50                     __end_of_abs:
  4046                           	callstack 0
  4047                           
  4048 ;; *************** function ___aomod *****************
  4049 ;; Defined at:
  4050 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aomod.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;  dividend        8    0[COMRAM] long long 
  4053 ;;  divisor         8    8[COMRAM] long long 
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;  sign            1   17[COMRAM] unsigned char 
  4056 ;;  counter         1   16[COMRAM] unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  8    0[COMRAM] long long 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4066 ;;      Params:        16       0       0       0       0       0       0
  4067 ;;      Locals:         2       0       0       0       0       0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0
  4069 ;;      Totals:        18       0       0       0       0       0       0
  4070 ;;Total ram usage:       18 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    1
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_dtoa
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           	psect	text17
  4081  0014B0                     __ptext17:
  4082                           	callstack 0
  4083  0014B0                     ___aomod:
  4084                           	callstack 23
  4085  0014B0  0E00               	movlw	0
  4086  0014B2  6E12               	movwf	___aomod@sign^0,c
  4087  0014B4  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  4088  0014B6  EF61  F00A         	goto	u1560
  4089  0014BA  EF5F  F00A         	goto	u1561
  4090  0014BE                     u1561:
  4091  0014BE  EF73  F00A         	goto	l2351
  4092  0014C2                     u1560:
  4093  0014C2  1E08               	comf	(___aomod@dividend+7)^0,f,c
  4094  0014C4  1E07               	comf	(___aomod@dividend+6)^0,f,c
  4095  0014C6  1E06               	comf	(___aomod@dividend+5)^0,f,c
  4096  0014C8  1E05               	comf	(___aomod@dividend+4)^0,f,c
  4097  0014CA  1E04               	comf	(___aomod@dividend+3)^0,f,c
  4098  0014CC  1E03               	comf	(___aomod@dividend+2)^0,f,c
  4099  0014CE  1E02               	comf	(___aomod@dividend+1)^0,f,c
  4100  0014D0  6C01               	negf	___aomod@dividend^0,c
  4101  0014D2  0E00               	movlw	0
  4102  0014D4  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  4103  0014D6  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  4104  0014D8  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  4105  0014DA  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  4106  0014DC  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  4107  0014DE  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  4108  0014E0  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  4109  0014E2  0E01               	movlw	1
  4110  0014E4  6E12               	movwf	___aomod@sign^0,c
  4111  0014E6                     l2351:
  4112  0014E6  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  4113  0014E8  EF7A  F00A         	goto	u1570
  4114  0014EC  EF78  F00A         	goto	u1571
  4115  0014F0                     u1571:
  4116  0014F0  EF8A  F00A         	goto	l2355
  4117  0014F4                     u1570:
  4118  0014F4  1E10               	comf	(___aomod@divisor+7)^0,f,c
  4119  0014F6  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  4120  0014F8  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  4121  0014FA  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  4122  0014FC  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  4123  0014FE  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  4124  001500  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  4125  001502  6C09               	negf	___aomod@divisor^0,c
  4126  001504  0E00               	movlw	0
  4127  001506  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  4128  001508  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  4129  00150A  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  4130  00150C  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  4131  00150E  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  4132  001510  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  4133  001512  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  4134  001514                     l2355:
  4135  001514  5009               	movf	___aomod@divisor^0,w,c
  4136  001516  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  4137  001518  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  4138  00151A  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  4139  00151C  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  4140  00151E  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  4141  001520  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  4142  001522  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  4143  001524  B4D8               	btfsc	status,2,c
  4144  001526  EF97  F00A         	goto	u1581
  4145  00152A  EF99  F00A         	goto	u1580
  4146  00152E                     u1581:
  4147  00152E  EFE1  F00A         	goto	l2371
  4148  001532                     u1580:
  4149  001532  0E01               	movlw	1
  4150  001534  6E11               	movwf	___aomod@counter^0,c
  4151  001536  EFA7  F00A         	goto	l2361
  4152  00153A                     l2359:
  4153  00153A  90D8               	bcf	status,0,c
  4154  00153C  3609               	rlcf	___aomod@divisor^0,f,c
  4155  00153E  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  4156  001540  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  4157  001542  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  4158  001544  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  4159  001546  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  4160  001548  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  4161  00154A  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  4162  00154C  2A11               	incf	___aomod@counter^0,f,c
  4163  00154E                     l2361:
  4164  00154E  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  4165  001550  EFAC  F00A         	goto	u1591
  4166  001554  EFAE  F00A         	goto	u1590
  4167  001558                     u1591:
  4168  001558  EF9D  F00A         	goto	l2359
  4169  00155C                     u1590:
  4170  00155C                     l2363:
  4171  00155C  5009               	movf	___aomod@divisor^0,w,c
  4172  00155E  5C01               	subwf	___aomod@dividend^0,w,c
  4173  001560  500A               	movf	(___aomod@divisor+1)^0,w,c
  4174  001562  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  4175  001564  500B               	movf	(___aomod@divisor+2)^0,w,c
  4176  001566  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  4177  001568  500C               	movf	(___aomod@divisor+3)^0,w,c
  4178  00156A  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  4179  00156C  500D               	movf	(___aomod@divisor+4)^0,w,c
  4180  00156E  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  4181  001570  500E               	movf	(___aomod@divisor+5)^0,w,c
  4182  001572  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  4183  001574  500F               	movf	(___aomod@divisor+6)^0,w,c
  4184  001576  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  4185  001578  5010               	movf	(___aomod@divisor+7)^0,w,c
  4186  00157A  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  4187  00157C  A0D8               	btfss	status,0,c
  4188  00157E  EFC3  F00A         	goto	u1601
  4189  001582  EFC5  F00A         	goto	u1600
  4190  001586                     u1601:
  4191  001586  EFD5  F00A         	goto	l2367
  4192  00158A                     u1600:
  4193  00158A  5009               	movf	___aomod@divisor^0,w,c
  4194  00158C  5E01               	subwf	___aomod@dividend^0,f,c
  4195  00158E  500A               	movf	(___aomod@divisor+1)^0,w,c
  4196  001590  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  4197  001592  500B               	movf	(___aomod@divisor+2)^0,w,c
  4198  001594  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  4199  001596  500C               	movf	(___aomod@divisor+3)^0,w,c
  4200  001598  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  4201  00159A  500D               	movf	(___aomod@divisor+4)^0,w,c
  4202  00159C  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  4203  00159E  500E               	movf	(___aomod@divisor+5)^0,w,c
  4204  0015A0  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  4205  0015A2  500F               	movf	(___aomod@divisor+6)^0,w,c
  4206  0015A4  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  4207  0015A6  5010               	movf	(___aomod@divisor+7)^0,w,c
  4208  0015A8  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  4209  0015AA                     l2367:
  4210  0015AA  90D8               	bcf	status,0,c
  4211  0015AC  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  4212  0015AE  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  4213  0015B0  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  4214  0015B2  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  4215  0015B4  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  4216  0015B6  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  4217  0015B8  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  4218  0015BA  3209               	rrcf	___aomod@divisor^0,f,c
  4219  0015BC  2E11               	decfsz	___aomod@counter^0,f,c
  4220  0015BE  EFAE  F00A         	goto	l2363
  4221  0015C2                     l2371:
  4222  0015C2  5012               	movf	___aomod@sign^0,w,c
  4223  0015C4  B4D8               	btfsc	status,2,c
  4224  0015C6  EFE7  F00A         	goto	u1611
  4225  0015CA  EFE9  F00A         	goto	u1610
  4226  0015CE                     u1611:
  4227  0015CE  EFF9  F00A         	goto	l2375
  4228  0015D2                     u1610:
  4229  0015D2  1E08               	comf	(___aomod@dividend+7)^0,f,c
  4230  0015D4  1E07               	comf	(___aomod@dividend+6)^0,f,c
  4231  0015D6  1E06               	comf	(___aomod@dividend+5)^0,f,c
  4232  0015D8  1E05               	comf	(___aomod@dividend+4)^0,f,c
  4233  0015DA  1E04               	comf	(___aomod@dividend+3)^0,f,c
  4234  0015DC  1E03               	comf	(___aomod@dividend+2)^0,f,c
  4235  0015DE  1E02               	comf	(___aomod@dividend+1)^0,f,c
  4236  0015E0  6C01               	negf	___aomod@dividend^0,c
  4237  0015E2  0E00               	movlw	0
  4238  0015E4  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  4239  0015E6  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  4240  0015E8  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  4241  0015EA  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  4242  0015EC  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  4243  0015EE  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  4244  0015F0  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  4245  0015F2                     l2375:
  4246  0015F2  C001  F001         	movff	___aomod@dividend,?___aomod
  4247  0015F6  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  4248  0015FA  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  4249  0015FE  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  4250  001602  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  4251  001606  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  4252  00160A  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  4253  00160E  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  4254  001612  0012               	return		;funcret
  4255  001614                     __end_of___aomod:
  4256                           	callstack 0
  4257                           
  4258 ;; *************** function ___aodiv *****************
  4259 ;; Defined at:
  4260 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aodiv.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;  dividend        8    0[COMRAM] long long 
  4263 ;;  divisor         8    8[COMRAM] long long 
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;  quotient        8   18[COMRAM] long long 
  4266 ;;  sign            1   17[COMRAM] unsigned char 
  4267 ;;  counter         1   16[COMRAM] unsigned char 
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  8    0[COMRAM] long long 
  4270 ;; Registers used:
  4271 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4277 ;;      Params:        16       0       0       0       0       0       0
  4278 ;;      Locals:        10       0       0       0       0       0       0
  4279 ;;      Temps:          0       0       0       0       0       0       0
  4280 ;;      Totals:        26       0       0       0       0       0       0
  4281 ;;Total ram usage:       26 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    1
  4284 ;; This function calls:
  4285 ;;		Nothing
  4286 ;; This function is called by:
  4287 ;;		_dtoa
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text18
  4292  001328                     __ptext18:
  4293                           	callstack 0
  4294  001328                     ___aodiv:
  4295                           	callstack 23
  4296  001328  0E00               	movlw	0
  4297  00132A  6E12               	movwf	___aodiv@sign^0,c
  4298  00132C  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  4299  00132E  EF9D  F009         	goto	u1490
  4300  001332  EF9B  F009         	goto	u1491
  4301  001336                     u1491:
  4302  001336  EFAF  F009         	goto	l2307
  4303  00133A                     u1490:
  4304  00133A  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  4305  00133C  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  4306  00133E  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  4307  001340  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  4308  001342  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  4309  001344  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  4310  001346  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  4311  001348  6C09               	negf	___aodiv@divisor^0,c
  4312  00134A  0E00               	movlw	0
  4313  00134C  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  4314  00134E  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  4315  001350  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  4316  001352  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  4317  001354  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  4318  001356  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  4319  001358  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  4320  00135A  0E01               	movlw	1
  4321  00135C  6E12               	movwf	___aodiv@sign^0,c
  4322  00135E                     l2307:
  4323  00135E  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  4324  001360  EFB6  F009         	goto	u1500
  4325  001364  EFB4  F009         	goto	u1501
  4326  001368                     u1501:
  4327  001368  EFC8  F009         	goto	l2313
  4328  00136C                     u1500:
  4329  00136C  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  4330  00136E  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  4331  001370  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  4332  001372  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  4333  001374  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  4334  001376  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  4335  001378  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  4336  00137A  6C01               	negf	___aodiv@dividend^0,c
  4337  00137C  0E00               	movlw	0
  4338  00137E  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  4339  001380  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  4340  001382  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  4341  001384  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  4342  001386  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  4343  001388  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  4344  00138A  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  4345  00138C  0E01               	movlw	1
  4346  00138E  1A12               	xorwf	___aodiv@sign^0,f,c
  4347  001390                     l2313:
  4348  001390  EE20  F013         	lfsr	2,___aodiv@quotient
  4349  001394  0E07               	movlw	7
  4350  001396                     u1511:
  4351  001396  6ADE               	clrf	postinc2,c
  4352  001398  06E8               	decf	wreg,f,c
  4353  00139A  E2FD               	bc	u1511
  4354  00139C  5009               	movf	___aodiv@divisor^0,w,c
  4355  00139E  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  4356  0013A0  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  4357  0013A2  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  4358  0013A4  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  4359  0013A6  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  4360  0013A8  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  4361  0013AA  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  4362  0013AC  B4D8               	btfsc	status,2,c
  4363  0013AE  EFDB  F009         	goto	u1521
  4364  0013B2  EFDD  F009         	goto	u1520
  4365  0013B6                     u1521:
  4366  0013B6  EF2F  F00A         	goto	l2335
  4367  0013BA                     u1520:
  4368  0013BA  0E01               	movlw	1
  4369  0013BC  6E11               	movwf	___aodiv@counter^0,c
  4370  0013BE  EFEB  F009         	goto	l2321
  4371  0013C2                     l2319:
  4372  0013C2  90D8               	bcf	status,0,c
  4373  0013C4  3609               	rlcf	___aodiv@divisor^0,f,c
  4374  0013C6  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  4375  0013C8  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  4376  0013CA  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  4377  0013CC  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  4378  0013CE  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  4379  0013D0  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  4380  0013D2  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  4381  0013D4  2A11               	incf	___aodiv@counter^0,f,c
  4382  0013D6                     l2321:
  4383  0013D6  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  4384  0013D8  EFF0  F009         	goto	u1531
  4385  0013DC  EFF2  F009         	goto	u1530
  4386  0013E0                     u1531:
  4387  0013E0  EFE1  F009         	goto	l2319
  4388  0013E4                     u1530:
  4389  0013E4                     l2323:
  4390  0013E4  90D8               	bcf	status,0,c
  4391  0013E6  3613               	rlcf	___aodiv@quotient^0,f,c
  4392  0013E8  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  4393  0013EA  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  4394  0013EC  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  4395  0013EE  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  4396  0013F0  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  4397  0013F2  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  4398  0013F4  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  4399  0013F6  5009               	movf	___aodiv@divisor^0,w,c
  4400  0013F8  5C01               	subwf	___aodiv@dividend^0,w,c
  4401  0013FA  500A               	movf	(___aodiv@divisor+1)^0,w,c
  4402  0013FC  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  4403  0013FE  500B               	movf	(___aodiv@divisor+2)^0,w,c
  4404  001400  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  4405  001402  500C               	movf	(___aodiv@divisor+3)^0,w,c
  4406  001404  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  4407  001406  500D               	movf	(___aodiv@divisor+4)^0,w,c
  4408  001408  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  4409  00140A  500E               	movf	(___aodiv@divisor+5)^0,w,c
  4410  00140C  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  4411  00140E  500F               	movf	(___aodiv@divisor+6)^0,w,c
  4412  001410  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  4413  001412  5010               	movf	(___aodiv@divisor+7)^0,w,c
  4414  001414  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  4415  001416  A0D8               	btfss	status,0,c
  4416  001418  EF10  F00A         	goto	u1541
  4417  00141C  EF12  F00A         	goto	u1540
  4418  001420                     u1541:
  4419  001420  EF23  F00A         	goto	l2331
  4420  001424                     u1540:
  4421  001424  5009               	movf	___aodiv@divisor^0,w,c
  4422  001426  5E01               	subwf	___aodiv@dividend^0,f,c
  4423  001428  500A               	movf	(___aodiv@divisor+1)^0,w,c
  4424  00142A  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  4425  00142C  500B               	movf	(___aodiv@divisor+2)^0,w,c
  4426  00142E  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  4427  001430  500C               	movf	(___aodiv@divisor+3)^0,w,c
  4428  001432  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  4429  001434  500D               	movf	(___aodiv@divisor+4)^0,w,c
  4430  001436  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  4431  001438  500E               	movf	(___aodiv@divisor+5)^0,w,c
  4432  00143A  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  4433  00143C  500F               	movf	(___aodiv@divisor+6)^0,w,c
  4434  00143E  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  4435  001440  5010               	movf	(___aodiv@divisor+7)^0,w,c
  4436  001442  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  4437  001444  8013               	bsf	___aodiv@quotient^0,0,c
  4438  001446                     l2331:
  4439  001446  90D8               	bcf	status,0,c
  4440  001448  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  4441  00144A  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  4442  00144C  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  4443  00144E  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  4444  001450  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  4445  001452  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  4446  001454  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  4447  001456  3209               	rrcf	___aodiv@divisor^0,f,c
  4448  001458  2E11               	decfsz	___aodiv@counter^0,f,c
  4449  00145A  EFF2  F009         	goto	l2323
  4450  00145E                     l2335:
  4451  00145E  5012               	movf	___aodiv@sign^0,w,c
  4452  001460  B4D8               	btfsc	status,2,c
  4453  001462  EF35  F00A         	goto	u1551
  4454  001466  EF37  F00A         	goto	u1550
  4455  00146A                     u1551:
  4456  00146A  EF47  F00A         	goto	l2339
  4457  00146E                     u1550:
  4458  00146E  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  4459  001470  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  4460  001472  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  4461  001474  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  4462  001476  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  4463  001478  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  4464  00147A  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  4465  00147C  6C13               	negf	___aodiv@quotient^0,c
  4466  00147E  0E00               	movlw	0
  4467  001480  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  4468  001482  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  4469  001484  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  4470  001486  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  4471  001488  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  4472  00148A  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  4473  00148C  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  4474  00148E                     l2339:
  4475  00148E  C013  F001         	movff	___aodiv@quotient,?___aodiv
  4476  001492  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  4477  001496  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  4478  00149A  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  4479  00149E  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  4480  0014A2  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  4481  0014A6  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  4482  0014AA  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  4483  0014AE  0012               	return		;funcret
  4484  0014B0                     __end_of___aodiv:
  4485                           	callstack 0
  4486                           
  4487 ;; *************** function _eepromWrite *****************
  4488 ;; Defined at:
  4489 ;;		line 58 in file "fs_eeprom.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;  address         1    wreg     unsigned char 
  4492 ;;  data            1    0[COMRAM] unsigned char 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;  address         1    1[COMRAM] unsigned char 
  4495 ;; Return value:  Size  Location     Type
  4496 ;;                  1    wreg      void 
  4497 ;; Registers used:
  4498 ;;		wreg, status,2
  4499 ;; Tracked objects:
  4500 ;;		On entry : 0/0
  4501 ;;		On exit  : 0/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4504 ;;      Params:         1       0       0       0       0       0       0
  4505 ;;      Locals:         1       0       0       0       0       0       0
  4506 ;;      Temps:          0       0       0       0       0       0       0
  4507 ;;      Totals:         2       0       0       0       0       0       0
  4508 ;;Total ram usage:        2 bytes
  4509 ;; Hardware stack levels used:    1
  4510 ;; Hardware stack levels required when called:    1
  4511 ;; This function calls:
  4512 ;;		Nothing
  4513 ;; This function is called by:
  4514 ;;		_stateMachine
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text19
  4519  001DBC                     __ptext19:
  4520                           	callstack 0
  4521  001DBC                     _eepromWrite:
  4522                           	callstack 27
  4523                           
  4524                           ;incstack = 0
  4525                           ;eepromWrite@address stored from wreg
  4526  001DBC  6E02               	movwf	eepromWrite@address^0,c
  4527  001DBE                     
  4528                           ;fs_eeprom.c: 58: void eepromWrite(uint8_t address, uint8_t data);fs_eeprom.c: 59: {;fs_
      +                          eeprom.c: 62:     EEADR = (uint8_t)address;
  4529  001DBE  C002  FFA9         	movff	eepromWrite@address,4009	;volatile
  4530  001DC2                     
  4531                           ;fs_eeprom.c: 64:     EEDATA = data;
  4532  001DC2  C001  FFA8         	movff	eepromWrite@data,4008	;volatile
  4533  001DC6                     
  4534                           ;fs_eeprom.c: 65:     EECON1bits.EEPGD = 0;
  4535  001DC6  9EA6               	bcf	166,7,c	;volsfr
  4536  001DC8                     
  4537                           ;fs_eeprom.c: 66:     EECON1bits.CFGS = 0;
  4538  001DC8  9CA6               	bcf	166,6,c	;volsfr
  4539  001DCA                     
  4540                           ;fs_eeprom.c: 67:     EECON1bits.WREN = 1;
  4541  001DCA  84A6               	bsf	166,2,c	;volsfr
  4542  001DCC                     
  4543                           ;fs_eeprom.c: 71:     EECON2 = 0x55;
  4544  001DCC  0E55               	movlw	85
  4545  001DCE  6EA7               	movwf	167,c	;volsfr
  4546  001DD0                     
  4547                           ;fs_eeprom.c: 72:     EECON2 = 0xAA;
  4548  001DD0  0EAA               	movlw	170
  4549  001DD2  6EA7               	movwf	167,c	;volsfr
  4550  001DD4                     
  4551                           ;fs_eeprom.c: 73:     EECON1bits.WR = 1;
  4552  001DD4  82A6               	bsf	166,1,c	;volsfr
  4553  001DD6                     l76:
  4554                           
  4555                           ;fs_eeprom.c: 76:     while(PIR2bits.EEIF == 0)
  4556  001DD6  A8A1               	btfss	161,4,c	;volatile
  4557  001DD8  EFF0  F00E         	goto	u1911
  4558  001DDC  EFF2  F00E         	goto	u1910
  4559  001DE0                     u1911:
  4560  001DE0  EFEB  F00E         	goto	l76
  4561  001DE4                     u1910:
  4562  001DE4                     
  4563                           ;fs_eeprom.c: 81:     PIR2bits.EEIF = 0;
  4564  001DE4  98A1               	bcf	161,4,c	;volatile
  4565                           
  4566                           ;fs_eeprom.c: 82:     EECON1bits.WREN = 0;
  4567  001DE6  94A6               	bcf	166,2,c	;volsfr
  4568  001DE8  0012               	return		;funcret
  4569  001DEA                     __end_of_eepromWrite:
  4570                           	callstack 0
  4571                           
  4572 ;; *************** function _Lcd_Write_String *****************
  4573 ;; Defined at:
  4574 ;;		line 146 in file "fs_lcd.c"
  4575 ;; Parameters:    Size  Location     Type
  4576 ;;  a               2    4[COMRAM] PTR unsigned char 
  4577 ;;		 -> STR_11(17), STR_9(17), STR_7(17), STR_5(17), 
  4578 ;;		 -> STR_3(17), STR_1(17), stateMachine@textCursor2(16), 
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;  i               2    8[COMRAM] int 
  4581 ;; Return value:  Size  Location     Type
  4582 ;;                  1    wreg      void 
  4583 ;; Registers used:
  4584 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4590 ;;      Params:         2       0       0       0       0       0       0
  4591 ;;      Locals:         2       0       0       0       0       0       0
  4592 ;;      Temps:          2       0       0       0       0       0       0
  4593 ;;      Totals:         6       0       0       0       0       0       0
  4594 ;;Total ram usage:        6 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    3
  4597 ;; This function calls:
  4598 ;;		_Lcd_Write_Char
  4599 ;; This function is called by:
  4600 ;;		_stateMachine
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           	psect	text20
  4605  001A28                     __ptext20:
  4606                           	callstack 0
  4607  001A28                     _Lcd_Write_String:
  4608                           	callstack 25
  4609  001A28                     
  4610                           ;fs_lcd.c: 146: void Lcd_Write_String(char *a);fs_lcd.c: 147: {;fs_lcd.c: 148:    int i;
      +                          ;fs_lcd.c: 149:    for(i=0;a[i]!='\0';i++)
  4611  001A28  0E00               	movlw	0
  4612  001A2A  6E0A               	movwf	(Lcd_Write_String@i+1)^0,c
  4613  001A2C  0E00               	movlw	0
  4614  001A2E  6E09               	movwf	Lcd_Write_String@i^0,c
  4615  001A30  EF34  F00D         	goto	l2601
  4616  001A34                     l2597:
  4617                           
  4618                           ;fs_lcd.c: 150:    Lcd_Write_Char(a[i]);
  4619  001A34  5009               	movf	Lcd_Write_String@i^0,w,c
  4620  001A36  2405               	addwf	Lcd_Write_String@a^0,w,c
  4621  001A38  6E07               	movwf	??_Lcd_Write_String^0,c
  4622  001A3A  500A               	movf	(Lcd_Write_String@i+1)^0,w,c
  4623  001A3C  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  4624  001A3E  6E08               	movwf	(??_Lcd_Write_String+1)^0,c
  4625  001A40  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4626  001A44  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4627  001A48  6AF8               	clrf	tblptru,c
  4628  001A4A  0E05               	movlw	(high __ramtop+-1)
  4629  001A4C  64F7               	cpfsgt	tblptrh,c
  4630  001A4E  D003               	bra	u1947
  4631  001A50  0008               	tblrd		*
  4632  001A52  50F5               	movf	tablat,w,c
  4633  001A54  D005               	bra	u1940
  4634  001A56                     u1947:
  4635  001A56  CFF6 FFE9          	movff	tblptrl,fsr0l
  4636  001A5A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4637  001A5E  50EF               	movf	indf0,w,c
  4638  001A60                     u1940:
  4639  001A60  ECC3  F00E         	call	_Lcd_Write_Char
  4640  001A64  4A09               	infsnz	Lcd_Write_String@i^0,f,c
  4641  001A66  2A0A               	incf	(Lcd_Write_String@i+1)^0,f,c
  4642  001A68                     l2601:
  4643  001A68  5009               	movf	Lcd_Write_String@i^0,w,c
  4644  001A6A  2405               	addwf	Lcd_Write_String@a^0,w,c
  4645  001A6C  6E07               	movwf	??_Lcd_Write_String^0,c
  4646  001A6E  500A               	movf	(Lcd_Write_String@i+1)^0,w,c
  4647  001A70  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  4648  001A72  6E08               	movwf	(??_Lcd_Write_String+1)^0,c
  4649  001A74  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4650  001A78  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4651  001A7C  6AF8               	clrf	tblptru,c
  4652  001A7E  0E05               	movlw	(high __ramtop+-1)
  4653  001A80  64F7               	cpfsgt	tblptrh,c
  4654  001A82  D003               	bra	u1957
  4655  001A84  0008               	tblrd		*
  4656  001A86  50F5               	movf	tablat,w,c
  4657  001A88  D005               	bra	u1950
  4658  001A8A                     u1957:
  4659  001A8A  CFF6 FFE9          	movff	tblptrl,fsr0l
  4660  001A8E  CFF7 FFEA          	movff	tblptrh,fsr0h
  4661  001A92  50EF               	movf	indf0,w,c
  4662  001A94                     u1950:
  4663  001A94  0900               	iorlw	0
  4664  001A96  A4D8               	btfss	status,2,c
  4665  001A98  EF50  F00D         	goto	u1961
  4666  001A9C  EF52  F00D         	goto	u1960
  4667  001AA0                     u1961:
  4668  001AA0  EF1A  F00D         	goto	l2597
  4669  001AA4                     u1960:
  4670  001AA4  0012               	return		;funcret
  4671  001AA6                     __end_of_Lcd_Write_String:
  4672                           	callstack 0
  4673                           
  4674 ;; *************** function _Lcd_Write_Char *****************
  4675 ;; Defined at:
  4676 ;;		line 123 in file "fs_lcd.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  a               1    wreg     unsigned char 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  a               1    3[COMRAM] unsigned char 
  4681 ;;  y               1    2[COMRAM] unsigned char 
  4682 ;;  temp            1    1[COMRAM] unsigned char 
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  1    wreg      void 
  4685 ;; Registers used:
  4686 ;;		wreg, status,2, status,0, cstack
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4692 ;;      Params:         0       0       0       0       0       0       0
  4693 ;;      Locals:         3       0       0       0       0       0       0
  4694 ;;      Temps:          0       0       0       0       0       0       0
  4695 ;;      Totals:         3       0       0       0       0       0       0
  4696 ;;Total ram usage:        3 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    2
  4699 ;; This function calls:
  4700 ;;		_Lcd_Port
  4701 ;; This function is called by:
  4702 ;;		_Lcd_Write_String
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           	psect	text21
  4707  001D86                     __ptext21:
  4708                           	callstack 0
  4709  001D86                     _Lcd_Write_Char:
  4710                           	callstack 25
  4711                           
  4712                           ;incstack = 0
  4713                           ;Lcd_Write_Char@a stored from wreg
  4714  001D86  6E04               	movwf	Lcd_Write_Char@a^0,c
  4715  001D88                     
  4716                           ;fs_lcd.c: 123: void Lcd_Write_Char(char a);fs_lcd.c: 124: {;fs_lcd.c: 125:    char temp
      +                          ,y;;fs_lcd.c: 126:    temp = a&0x0F;
  4717  001D88  5004               	movf	Lcd_Write_Char@a^0,w,c
  4718  001D8A  0B0F               	andlw	15
  4719  001D8C  6E02               	movwf	Lcd_Write_Char@temp^0,c
  4720                           
  4721                           ;fs_lcd.c: 127:    y = a&0xF0;
  4722  001D8E  5004               	movf	Lcd_Write_Char@a^0,w,c
  4723  001D90  0BF0               	andlw	240
  4724  001D92  6E03               	movwf	Lcd_Write_Char@y^0,c
  4725  001D94                     
  4726                           ;fs_lcd.c: 128:    PORTEbits.RE0 = 1;
  4727  001D94  8084               	bsf	132,0,c	;volatile
  4728  001D96                     
  4729                           ;fs_lcd.c: 129:    Lcd_Port(y>>4);
  4730  001D96  3803               	swapf	Lcd_Write_Char@y^0,w,c
  4731  001D98  0B0F               	andlw	15
  4732  001D9A  ECE7  F00D         	call	_Lcd_Port
  4733  001D9E                     
  4734                           ;fs_lcd.c: 130:    PORTAbits.RA3 = 1;
  4735  001D9E  8680               	bsf	128,3,c	;volatile
  4736  001DA0                     
  4737                           ;fs_lcd.c: 131:    _delay((unsigned long)((30)*(64000000UL/4000000.0)));
  4738  001DA0  0EA0               	movlw	160
  4739  001DA2                     u3897:
  4740  001DA2  2EE8               	decfsz	wreg,f,c
  4741  001DA4  D7FE               	bra	u3897
  4742  001DA6                     
  4743                           ;fs_lcd.c: 132:    PORTAbits.RA3 = 0;
  4744  001DA6  9680               	bcf	128,3,c	;volatile
  4745  001DA8                     
  4746                           ;fs_lcd.c: 133:    Lcd_Port(temp);
  4747  001DA8  5002               	movf	Lcd_Write_Char@temp^0,w,c
  4748  001DAA  ECE7  F00D         	call	_Lcd_Port
  4749  001DAE                     
  4750                           ;fs_lcd.c: 134:    PORTAbits.RA3 = 1;
  4751  001DAE  8680               	bsf	128,3,c	;volatile
  4752  001DB0                     
  4753                           ;fs_lcd.c: 135:    _delay((unsigned long)((25)*(64000000UL/4000000.0)));
  4754  001DB0  0E85               	movlw	133
  4755  001DB2                     u3907:
  4756  001DB2  2EE8               	decfsz	wreg,f,c
  4757  001DB4  D7FE               	bra	u3907
  4758  001DB6  F000               	nop	
  4759  001DB8                     
  4760                           ;fs_lcd.c: 136:    PORTAbits.RA3 = 0;
  4761  001DB8  9680               	bcf	128,3,c	;volatile
  4762  001DBA  0012               	return		;funcret
  4763  001DBC                     __end_of_Lcd_Write_Char:
  4764                           	callstack 0
  4765                           
  4766 ;; *************** function _Lcd_Set_Cursor *****************
  4767 ;; Defined at:
  4768 ;;		line 53 in file "fs_lcd.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;  a               1    wreg     unsigned char 
  4771 ;;  b               1    3[COMRAM] unsigned char 
  4772 ;; Auto vars:     Size  Location     Type
  4773 ;;  a               1    4[COMRAM] unsigned char 
  4774 ;;  temp            1    7[COMRAM] unsigned char 
  4775 ;;  y               1    6[COMRAM] unsigned char 
  4776 ;;  z               1    5[COMRAM] unsigned char 
  4777 ;; Return value:  Size  Location     Type
  4778 ;;                  1    wreg      void 
  4779 ;; Registers used:
  4780 ;;		wreg, status,2, status,0, cstack
  4781 ;; Tracked objects:
  4782 ;;		On entry : 0/0
  4783 ;;		On exit  : 0/0
  4784 ;;		Unchanged: 0/0
  4785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4786 ;;      Params:         1       0       0       0       0       0       0
  4787 ;;      Locals:         4       0       0       0       0       0       0
  4788 ;;      Temps:          0       0       0       0       0       0       0
  4789 ;;      Totals:         5       0       0       0       0       0       0
  4790 ;;Total ram usage:        5 bytes
  4791 ;; Hardware stack levels used:    1
  4792 ;; Hardware stack levels required when called:    3
  4793 ;; This function calls:
  4794 ;;		_Lcd_Cmd
  4795 ;; This function is called by:
  4796 ;;		_stateMachine
  4797 ;; This function uses a non-reentrant model
  4798 ;;
  4799                           
  4800                           	psect	text22
  4801  001AA6                     __ptext22:
  4802                           	callstack 0
  4803  001AA6                     _Lcd_Set_Cursor:
  4804                           	callstack 25
  4805                           
  4806                           ;incstack = 0
  4807                           ;Lcd_Set_Cursor@a stored from wreg
  4808  001AA6  6E05               	movwf	Lcd_Set_Cursor@a^0,c
  4809  001AA8                     
  4810                           ;fs_lcd.c: 53: void Lcd_Set_Cursor(char a, char b);fs_lcd.c: 54: {;fs_lcd.c: 55:    char
      +                           temp,z,y;;fs_lcd.c: 56:    if(a == 1)
  4811  001AA8  0405               	decf	Lcd_Set_Cursor@a^0,w,c
  4812  001AAA  A4D8               	btfss	status,2,c
  4813  001AAC  EF5A  F00D         	goto	u1921
  4814  001AB0  EF5C  F00D         	goto	u1920
  4815  001AB4                     u1921:
  4816  001AB4  EF6D  F00D         	goto	l2587
  4817  001AB8                     u1920:
  4818  001AB8                     
  4819                           ;fs_lcd.c: 57:    {;fs_lcd.c: 58:      temp = 0x80 + b - 1;
  4820  001AB8  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  4821  001ABA  0F7F               	addlw	127
  4822  001ABC  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  4823                           
  4824                           ;fs_lcd.c: 59:       z = temp>>4;
  4825  001ABE  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4826  001AC0  0B0F               	andlw	15
  4827  001AC2  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  4828                           
  4829                           ;fs_lcd.c: 60:       y = temp & 0x0F;
  4830  001AC4  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  4831  001AC6  0B0F               	andlw	15
  4832  001AC8  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  4833  001ACA                     
  4834                           ;fs_lcd.c: 61:       Lcd_Cmd(z);
  4835  001ACA  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  4836  001ACC  EC16  F00F         	call	_Lcd_Cmd
  4837  001AD0                     
  4838                           ;fs_lcd.c: 62:       Lcd_Cmd(y);
  4839  001AD0  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  4840  001AD2  EC16  F00F         	call	_Lcd_Cmd
  4841                           
  4842                           ;fs_lcd.c: 63:    }
  4843  001AD6  EF85  F00D         	goto	l122
  4844  001ADA                     l2587:
  4845  001ADA  0E02               	movlw	2
  4846  001ADC  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4847  001ADE  A4D8               	btfss	status,2,c
  4848  001AE0  EF74  F00D         	goto	u1931
  4849  001AE4  EF76  F00D         	goto	u1930
  4850  001AE8                     u1931:
  4851  001AE8  EF85  F00D         	goto	l122
  4852  001AEC                     u1930:
  4853  001AEC                     
  4854                           ;fs_lcd.c: 65:    {;fs_lcd.c: 66:       temp = 0xC0 + b - 1;
  4855  001AEC  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  4856  001AEE  0FBF               	addlw	191
  4857  001AF0  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  4858                           
  4859                           ;fs_lcd.c: 67:       z = temp>>4;
  4860  001AF2  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4861  001AF4  0B0F               	andlw	15
  4862  001AF6  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  4863                           
  4864                           ;fs_lcd.c: 68:       y = temp & 0x0F;
  4865  001AF8  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  4866  001AFA  0B0F               	andlw	15
  4867  001AFC  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  4868  001AFE                     
  4869                           ;fs_lcd.c: 69:       Lcd_Cmd(z);
  4870  001AFE  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  4871  001B00  EC16  F00F         	call	_Lcd_Cmd
  4872  001B04                     
  4873                           ;fs_lcd.c: 70:       Lcd_Cmd(y);
  4874  001B04  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  4875  001B06  EC16  F00F         	call	_Lcd_Cmd
  4876  001B0A                     l122:
  4877  001B0A  0012               	return		;funcret
  4878  001B0C                     __end_of_Lcd_Set_Cursor:
  4879                           	callstack 0
  4880                           
  4881 ;; *************** function _buttonControlFlags *****************
  4882 ;; Defined at:
  4883 ;;		line 72 in file "fs_menu_controller.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;		None
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  textCursor2    16    0[COMRAM] unsigned char [16]
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4897 ;;      Params:         0       0       0       0       0       0       0
  4898 ;;      Locals:        16       0       0       0       0       0       0
  4899 ;;      Temps:          0       0       0       0       0       0       0
  4900 ;;      Totals:        16       0       0       0       0       0       0
  4901 ;;Total ram usage:       16 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    1
  4904 ;; This function calls:
  4905 ;;		Nothing
  4906 ;; This function is called by:
  4907 ;;		_menuControl
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911                           	psect	text23
  4912  001182                     __ptext23:
  4913                           	callstack 0
  4914  001182                     _buttonControlFlags:
  4915                           	callstack 28
  4916  001182                     
  4917                           ;fs_menu_controller.c: 74:     char textCursor2[16] = {0};
  4918  001182  EE20  F001         	lfsr	2,buttonControlFlags@textCursor2
  4919  001186  0E0F               	movlw	15
  4920  001188                     u1981:
  4921  001188  6ADE               	clrf	postinc2,c
  4922  00118A  06E8               	decf	wreg,f,c
  4923  00118C  E2FD               	bc	u1981
  4924  00118E                     
  4925                           ;fs_menu_controller.c: 76:     if ((button_bounce_controller.menu == 0) && (PORTBbits.RB
      +                          2 == 0))
  4926  00118E  B05E               	btfsc	_button_bounce_controller^0,0,c
  4927  001190  EFCC  F008         	goto	u1991
  4928  001194  EFCE  F008         	goto	u1990
  4929  001198                     u1991:
  4930  001198  EFD8  F008         	goto	l320
  4931  00119C                     u1990:
  4932  00119C  B481               	btfsc	129,2,c	;volatile
  4933  00119E  EFD3  F008         	goto	u2001
  4934  0011A2  EFD5  F008         	goto	u2000
  4935  0011A6                     u2001:
  4936  0011A6  EFD8  F008         	goto	l320
  4937  0011AA                     u2000:
  4938  0011AA                     
  4939                           ;fs_menu_controller.c: 77:     {;fs_menu_controller.c: 78:         button_bounce_control
      +                          ler.menu = 1;
  4940  0011AA  805E               	bsf	_button_bounce_controller^0,0,c
  4941                           
  4942                           ;fs_menu_controller.c: 79:         menu_flags.menu_input_flag = 1;
  4943  0011AC  0100               	movlb	0	; () banked
  4944  0011AE  81C8               	bsf	_menu_flags& (0+255),0,b
  4945  0011B0                     l320:
  4946                           
  4947                           ;fs_menu_controller.c: 82:     if ((PORTBbits.RB2 == 1) && (button_bounce_controller.men
      +                          u == 1))
  4948  0011B0  A481               	btfss	129,2,c	;volatile
  4949  0011B2  EFDD  F008         	goto	u2011
  4950  0011B6  EFDF  F008         	goto	u2010
  4951  0011BA                     u2011:
  4952  0011BA  EFE9  F008         	goto	l321
  4953  0011BE                     u2010:
  4954  0011BE  A05E               	btfss	_button_bounce_controller^0,0,c
  4955  0011C0  EFE4  F008         	goto	u2021
  4956  0011C4  EFE6  F008         	goto	u2020
  4957  0011C8                     u2021:
  4958  0011C8  EFE9  F008         	goto	l321
  4959  0011CC                     u2020:
  4960  0011CC                     
  4961                           ;fs_menu_controller.c: 83:     {;fs_menu_controller.c: 84:         button_bounce_control
      +                          ler.menu = 0;
  4962  0011CC  905E               	bcf	_button_bounce_controller^0,0,c
  4963                           
  4964                           ;fs_menu_controller.c: 85:         menu_flags.menu_input_flag = 0;
  4965  0011CE  0100               	movlb	0	; () banked
  4966  0011D0  91C8               	bcf	_menu_flags& (0+255),0,b
  4967  0011D2                     l321:
  4968                           
  4969                           ;fs_menu_controller.c: 88:     if ((button_bounce_controller.pause == 0) && (PORTBbits.R
      +                          B3 == 0))
  4970  0011D2  B65E               	btfsc	_button_bounce_controller^0,3,c
  4971  0011D4  EFEE  F008         	goto	u2031
  4972  0011D8  EFF0  F008         	goto	u2030
  4973  0011DC                     u2031:
  4974  0011DC  EFFA  F008         	goto	l322
  4975  0011E0                     u2030:
  4976  0011E0  B681               	btfsc	129,3,c	;volatile
  4977  0011E2  EFF5  F008         	goto	u2041
  4978  0011E6  EFF7  F008         	goto	u2040
  4979  0011EA                     u2041:
  4980  0011EA  EFFA  F008         	goto	l322
  4981  0011EE                     u2040:
  4982  0011EE                     
  4983                           ;fs_menu_controller.c: 89:     {;fs_menu_controller.c: 90:         button_bounce_control
      +                          ler.pause = 1;
  4984  0011EE  865E               	bsf	_button_bounce_controller^0,3,c
  4985                           
  4986                           ;fs_menu_controller.c: 91:         menu_flags.menu_pause_flag = 1;
  4987  0011F0  0100               	movlb	0	; () banked
  4988  0011F2  87C8               	bsf	_menu_flags& (0+255),3,b
  4989  0011F4                     l322:
  4990                           
  4991                           ;fs_menu_controller.c: 93:     if ((PORTBbits.RB3 == 1) && (button_bounce_controller.pau
      +                          se == 1))
  4992  0011F4  A681               	btfss	129,3,c	;volatile
  4993  0011F6  EFFF  F008         	goto	u2051
  4994  0011FA  EF01  F009         	goto	u2050
  4995  0011FE                     u2051:
  4996  0011FE  EF0B  F009         	goto	l323
  4997  001202                     u2050:
  4998  001202  A65E               	btfss	_button_bounce_controller^0,3,c
  4999  001204  EF06  F009         	goto	u2061
  5000  001208  EF08  F009         	goto	u2060
  5001  00120C                     u2061:
  5002  00120C  EF0B  F009         	goto	l323
  5003  001210                     u2060:
  5004  001210                     
  5005                           ;fs_menu_controller.c: 94:     {;fs_menu_controller.c: 95:         button_bounce_control
      +                          ler.pause = 0;
  5006  001210  965E               	bcf	_button_bounce_controller^0,3,c
  5007                           
  5008                           ;fs_menu_controller.c: 96:         menu_flags.menu_pause_flag = 0;
  5009  001212  0100               	movlb	0	; () banked
  5010  001214  97C8               	bcf	_menu_flags& (0+255),3,b
  5011  001216                     l323:
  5012                           
  5013                           ;fs_menu_controller.c: 100:     if ((button_bounce_controller.start == 0) && (PORTAbits.
      +                          RA0 == 0))
  5014  001216  B25E               	btfsc	_button_bounce_controller^0,1,c
  5015  001218  EF10  F009         	goto	u2071
  5016  00121C  EF12  F009         	goto	u2070
  5017  001220                     u2071:
  5018  001220  EF1C  F009         	goto	l324
  5019  001224                     u2070:
  5020  001224  B080               	btfsc	128,0,c	;volatile
  5021  001226  EF17  F009         	goto	u2081
  5022  00122A  EF19  F009         	goto	u2080
  5023  00122E                     u2081:
  5024  00122E  EF1C  F009         	goto	l324
  5025  001232                     u2080:
  5026  001232                     
  5027                           ;fs_menu_controller.c: 101:     {;fs_menu_controller.c: 102:         button_bounce_contr
      +                          oller.start = 1;
  5028  001232  825E               	bsf	_button_bounce_controller^0,1,c
  5029                           
  5030                           ;fs_menu_controller.c: 103:         menu_flags.menu_start_flag = 1;
  5031  001234  0100               	movlb	0	; () banked
  5032  001236  83C8               	bsf	_menu_flags& (0+255),1,b
  5033  001238                     l324:
  5034                           
  5035                           ;fs_menu_controller.c: 105:     if ((PORTAbits.RA0 == 1) && (button_bounce_controller.st
      +                          art == 1))
  5036  001238  A080               	btfss	128,0,c	;volatile
  5037  00123A  EF21  F009         	goto	u2091
  5038  00123E  EF23  F009         	goto	u2090
  5039  001242                     u2091:
  5040  001242  EF2D  F009         	goto	l325
  5041  001246                     u2090:
  5042  001246  A25E               	btfss	_button_bounce_controller^0,1,c
  5043  001248  EF28  F009         	goto	u2101
  5044  00124C  EF2A  F009         	goto	u2100
  5045  001250                     u2101:
  5046  001250  EF2D  F009         	goto	l325
  5047  001254                     u2100:
  5048  001254                     
  5049                           ;fs_menu_controller.c: 106:     {;fs_menu_controller.c: 107:         button_bounce_contr
      +                          oller.start = 0;
  5050  001254  925E               	bcf	_button_bounce_controller^0,1,c
  5051                           
  5052                           ;fs_menu_controller.c: 108:         menu_flags.menu_start_flag = 0;
  5053  001256  0100               	movlb	0	; () banked
  5054  001258  93C8               	bcf	_menu_flags& (0+255),1,b
  5055  00125A                     l325:
  5056                           
  5057                           ;fs_menu_controller.c: 112:     if ((button_bounce_controller.stop == 0) && (PORTAbits.R
      +                          A5 == 0))
  5058  00125A  B45E               	btfsc	_button_bounce_controller^0,2,c
  5059  00125C  EF32  F009         	goto	u2111
  5060  001260  EF34  F009         	goto	u2110
  5061  001264                     u2111:
  5062  001264  EF3E  F009         	goto	l326
  5063  001268                     u2110:
  5064  001268  BA80               	btfsc	128,5,c	;volatile
  5065  00126A  EF39  F009         	goto	u2121
  5066  00126E  EF3B  F009         	goto	u2120
  5067  001272                     u2121:
  5068  001272  EF3E  F009         	goto	l326
  5069  001276                     u2120:
  5070  001276                     
  5071                           ;fs_menu_controller.c: 113:     {;fs_menu_controller.c: 114:         button_bounce_contr
      +                          oller.stop = 1;
  5072  001276  845E               	bsf	_button_bounce_controller^0,2,c
  5073                           
  5074                           ;fs_menu_controller.c: 115:         menu_flags.menu_stop_flag = 1;
  5075  001278  0100               	movlb	0	; () banked
  5076  00127A  85C8               	bsf	_menu_flags& (0+255),2,b
  5077  00127C                     l326:
  5078                           
  5079                           ;fs_menu_controller.c: 117:     if ((PORTAbits.RA5 == 1) && (button_bounce_controller.st
      +                          op == 1))
  5080  00127C  AA80               	btfss	128,5,c	;volatile
  5081  00127E  EF43  F009         	goto	u2131
  5082  001282  EF45  F009         	goto	u2130
  5083  001286                     u2131:
  5084  001286  EF4F  F009         	goto	l327
  5085  00128A                     u2130:
  5086  00128A  A45E               	btfss	_button_bounce_controller^0,2,c
  5087  00128C  EF4A  F009         	goto	u2141
  5088  001290  EF4C  F009         	goto	u2140
  5089  001294                     u2141:
  5090  001294  EF4F  F009         	goto	l327
  5091  001298                     u2140:
  5092  001298                     
  5093                           ;fs_menu_controller.c: 118:     {;fs_menu_controller.c: 119:         button_bounce_contr
      +                          oller.stop = 0;
  5094  001298  945E               	bcf	_button_bounce_controller^0,2,c
  5095                           
  5096                           ;fs_menu_controller.c: 120:         menu_flags.menu_stop_flag = 0;
  5097  00129A  0100               	movlb	0	; () banked
  5098  00129C  95C8               	bcf	_menu_flags& (0+255),2,b
  5099  00129E                     l327:
  5100                           
  5101                           ;fs_menu_controller.c: 124:     if ((button_bounce_controller.increase == 0) && (PORTBbi
      +                          ts.RB5 == 0))
  5102  00129E  BA5E               	btfsc	_button_bounce_controller^0,5,c
  5103  0012A0  EF54  F009         	goto	u2151
  5104  0012A4  EF56  F009         	goto	u2150
  5105  0012A8                     u2151:
  5106  0012A8  EF60  F009         	goto	l328
  5107  0012AC                     u2150:
  5108  0012AC  BA81               	btfsc	129,5,c	;volatile
  5109  0012AE  EF5B  F009         	goto	u2161
  5110  0012B2  EF5D  F009         	goto	u2160
  5111  0012B6                     u2161:
  5112  0012B6  EF60  F009         	goto	l328
  5113  0012BA                     u2160:
  5114  0012BA                     
  5115                           ;fs_menu_controller.c: 125:     {;fs_menu_controller.c: 126:         button_bounce_contr
      +                          oller.increase = 1;
  5116  0012BA  8A5E               	bsf	_button_bounce_controller^0,5,c
  5117                           
  5118                           ;fs_menu_controller.c: 127:         menu_flags.menu_increase_flag = 1;
  5119  0012BC  0100               	movlb	0	; () banked
  5120  0012BE  89C8               	bsf	_menu_flags& (0+255),4,b
  5121  0012C0                     l328:
  5122                           
  5123                           ;fs_menu_controller.c: 129:     if ((PORTBbits.RB5 == 1) && (button_bounce_controller.in
      +                          crease == 1))
  5124  0012C0  AA81               	btfss	129,5,c	;volatile
  5125  0012C2  EF65  F009         	goto	u2171
  5126  0012C6  EF67  F009         	goto	u2170
  5127  0012CA                     u2171:
  5128  0012CA  EF71  F009         	goto	l329
  5129  0012CE                     u2170:
  5130  0012CE  AA5E               	btfss	_button_bounce_controller^0,5,c
  5131  0012D0  EF6C  F009         	goto	u2181
  5132  0012D4  EF6E  F009         	goto	u2180
  5133  0012D8                     u2181:
  5134  0012D8  EF71  F009         	goto	l329
  5135  0012DC                     u2180:
  5136  0012DC                     
  5137                           ;fs_menu_controller.c: 130:     {;fs_menu_controller.c: 131:         button_bounce_contr
      +                          oller.increase = 0;
  5138  0012DC  9A5E               	bcf	_button_bounce_controller^0,5,c
  5139                           
  5140                           ;fs_menu_controller.c: 132:         menu_flags.menu_increase_flag = 0;
  5141  0012DE  0100               	movlb	0	; () banked
  5142  0012E0  99C8               	bcf	_menu_flags& (0+255),4,b
  5143  0012E2                     l329:
  5144                           
  5145                           ;fs_menu_controller.c: 136:     if ((button_bounce_controller.decrease == 0) && (PORTBbi
      +                          ts.RB4 == 0))
  5146  0012E2  B85E               	btfsc	_button_bounce_controller^0,4,c
  5147  0012E4  EF76  F009         	goto	u2191
  5148  0012E8  EF78  F009         	goto	u2190
  5149  0012EC                     u2191:
  5150  0012EC  EF82  F009         	goto	l330
  5151  0012F0                     u2190:
  5152  0012F0  B881               	btfsc	129,4,c	;volatile
  5153  0012F2  EF7D  F009         	goto	u2201
  5154  0012F6  EF7F  F009         	goto	u2200
  5155  0012FA                     u2201:
  5156  0012FA  EF82  F009         	goto	l330
  5157  0012FE                     u2200:
  5158  0012FE                     
  5159                           ;fs_menu_controller.c: 137:     {;fs_menu_controller.c: 138:         button_bounce_contr
      +                          oller.decrease = 1;
  5160  0012FE  885E               	bsf	_button_bounce_controller^0,4,c
  5161                           
  5162                           ;fs_menu_controller.c: 139:         menu_flags.menu_decrease_flag = 1;
  5163  001300  0100               	movlb	0	; () banked
  5164  001302  8BC8               	bsf	_menu_flags& (0+255),5,b
  5165  001304                     l330:
  5166                           
  5167                           ;fs_menu_controller.c: 141:     if ((PORTBbits.RB4 == 1) && (button_bounce_controller.de
      +                          crease == 1))
  5168  001304  A881               	btfss	129,4,c	;volatile
  5169  001306  EF87  F009         	goto	u2211
  5170  00130A  EF89  F009         	goto	u2210
  5171  00130E                     u2211:
  5172  00130E  EF93  F009         	goto	l332
  5173  001312                     u2210:
  5174  001312  A85E               	btfss	_button_bounce_controller^0,4,c
  5175  001314  EF8E  F009         	goto	u2221
  5176  001318  EF90  F009         	goto	u2220
  5177  00131C                     u2221:
  5178  00131C  EF93  F009         	goto	l332
  5179  001320                     u2220:
  5180  001320                     
  5181                           ;fs_menu_controller.c: 142:     {;fs_menu_controller.c: 143:         button_bounce_contr
      +                          oller.decrease = 0;
  5182  001320  985E               	bcf	_button_bounce_controller^0,4,c
  5183                           
  5184                           ;fs_menu_controller.c: 144:         menu_flags.menu_decrease_flag = 0;
  5185  001322  0100               	movlb	0	; () banked
  5186  001324  9BC8               	bcf	_menu_flags& (0+255),5,b
  5187  001326                     l332:
  5188  001326  0012               	return		;funcret
  5189  001328                     __end_of_buttonControlFlags:
  5190                           	callstack 0
  5191                           
  5192 ;; *************** function _mcu_init *****************
  5193 ;; Defined at:
  5194 ;;		line 38 in file "fs_mcu.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;		None
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;		None
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  1    wreg      void 
  5201 ;; Registers used:
  5202 ;;		wreg, status,2
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5208 ;;      Params:         0       0       0       0       0       0       0
  5209 ;;      Locals:         0       0       0       0       0       0       0
  5210 ;;      Temps:          0       0       0       0       0       0       0
  5211 ;;      Totals:         0       0       0       0       0       0       0
  5212 ;;Total ram usage:        0 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    1
  5215 ;; This function calls:
  5216 ;;		Nothing
  5217 ;; This function is called by:
  5218 ;;		_main
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           	psect	text24
  5223  001E4A                     __ptext24:
  5224                           	callstack 0
  5225  001E4A                     _mcu_init:
  5226                           	callstack 29
  5227  001E4A                     
  5228                           ;fs_mcu.c: 40:    OSCCONbits.IRCF = 0b111;
  5229  001E4A  0E70               	movlw	112
  5230  001E4C  12D3               	iorwf	211,f,c	;volatile
  5231  001E4E                     
  5232                           ;fs_mcu.c: 42:    OSCTUNEbits.PLLEN = 0b1;
  5233  001E4E  8C9B               	bsf	155,6,c	;volatile
  5234  001E50                     l253:
  5235  001E50  A4D3               	btfss	211,2,c	;volatile
  5236  001E52  EF2D  F00F         	goto	u2621
  5237  001E56  EF2F  F00F         	goto	u2620
  5238  001E5A                     u2621:
  5239  001E5A  EF28  F00F         	goto	l253
  5240  001E5E                     u2620:
  5241  001E5E  0012               	return		;funcret
  5242  001E60                     __end_of_mcu_init:
  5243                           	callstack 0
  5244                           
  5245 ;; *************** function _lcd_init *****************
  5246 ;; Defined at:
  5247 ;;		line 79 in file "fs_lcd.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;		None
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		wreg, status,2, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5261 ;;      Params:         0       0       0       0       0       0       0
  5262 ;;      Locals:         0       0       0       0       0       0       0
  5263 ;;      Temps:          2       0       0       0       0       0       0
  5264 ;;      Totals:         2       0       0       0       0       0       0
  5265 ;;Total ram usage:        2 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    3
  5268 ;; This function calls:
  5269 ;;		_Lcd_Cmd
  5270 ;;		_Lcd_Port
  5271 ;; This function is called by:
  5272 ;;		_main
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           	psect	text25
  5277  001992                     __ptext25:
  5278                           	callstack 0
  5279  001992                     _lcd_init:
  5280                           	callstack 27
  5281  001992                     
  5282                           ;fs_lcd.c: 81:     TRISEbits.RE0 = 0;
  5283  001992  9096               	bcf	150,0,c	;volatile
  5284                           
  5285                           ;fs_lcd.c: 82:     ANSELEbits.ANSE0 = 0;
  5286  001994  010F               	movlb	15	; () banked
  5287  001996  913C               	bcf	60,0,b	;volatile
  5288                           
  5289                           ;fs_lcd.c: 84:     TRISAbits.RA3 = 0;
  5290  001998  9692               	bcf	146,3,c	;volatile
  5291                           
  5292                           ;fs_lcd.c: 85:     ANSELAbits.ANSA3 = 0;
  5293  00199A  9738               	bcf	56,3,b	;volatile
  5294                           
  5295                           ;fs_lcd.c: 87:     TRISDbits.RD0 = 0;
  5296  00199C  9095               	bcf	149,0,c	;volatile
  5297                           
  5298                           ;fs_lcd.c: 88:     ANSELDbits.ANSD0 = 0;
  5299  00199E  913B               	bcf	59,0,b	;volatile
  5300                           
  5301                           ;fs_lcd.c: 90:     TRISDbits.RD1 = 0;
  5302  0019A0  9295               	bcf	149,1,c	;volatile
  5303                           
  5304                           ;fs_lcd.c: 91:     ANSELDbits.ANSD1 = 0;
  5305  0019A2  933B               	bcf	59,1,b	;volatile
  5306                           
  5307                           ;fs_lcd.c: 93:     TRISDbits.RD2 = 0;
  5308  0019A4  9495               	bcf	149,2,c	;volatile
  5309                           
  5310                           ;fs_lcd.c: 94:     ANSELDbits.ANSD2 = 0;
  5311  0019A6  953B               	bcf	59,2,b	;volatile
  5312                           
  5313                           ;fs_lcd.c: 96:     TRISDbits.RD3 = 0;
  5314  0019A8  9695               	bcf	149,3,c	;volatile
  5315                           
  5316                           ;fs_lcd.c: 97:     ANSELDbits.ANSD3 = 0;
  5317  0019AA  973B               	bcf	59,3,b	;volatile
  5318  0019AC                     
  5319                           ; BSR set to: 15
  5320                           ;fs_lcd.c: 100:     Lcd_Port(0x00);
  5321  0019AC  0E00               	movlw	0
  5322  0019AE  ECE7  F00D         	call	_Lcd_Port
  5323  0019B2                     
  5324                           ;fs_lcd.c: 101:      _delay((unsigned long)((20)*(64000000UL/4000.0)));
  5325  0019B2  0E02               	movlw	2
  5326  0019B4  6E05               	movwf	(??_lcd_init+1)^0,c
  5327  0019B6  0EA0               	movlw	160
  5328  0019B8  6E04               	movwf	??_lcd_init^0,c
  5329  0019BA  0E92               	movlw	146
  5330  0019BC                     u3917:
  5331  0019BC  2EE8               	decfsz	wreg,f,c
  5332  0019BE  D7FE               	bra	u3917
  5333  0019C0  2E04               	decfsz	??_lcd_init^0,f,c
  5334  0019C2  D7FC               	bra	u3917
  5335  0019C4  2E05               	decfsz	(??_lcd_init+1)^0,f,c
  5336  0019C6  D7FA               	bra	u3917
  5337  0019C8  D000               	nop2	
  5338  0019CA                     
  5339                           ;fs_lcd.c: 102:     Lcd_Cmd(0x03);
  5340  0019CA  0E03               	movlw	3
  5341  0019CC  EC16  F00F         	call	_Lcd_Cmd
  5342  0019D0                     
  5343                           ;fs_lcd.c: 103:      _delay((unsigned long)((5)*(64000000UL/4000.0)));
  5344  0019D0  0E68               	movlw	104
  5345  0019D2  6E04               	movwf	??_lcd_init^0,c
  5346  0019D4  0EE4               	movlw	228
  5347  0019D6                     u3927:
  5348  0019D6  2EE8               	decfsz	wreg,f,c
  5349  0019D8  D7FE               	bra	u3927
  5350  0019DA  2E04               	decfsz	??_lcd_init^0,f,c
  5351  0019DC  D7FC               	bra	u3927
  5352  0019DE  D000               	nop2	
  5353  0019E0                     
  5354                           ;fs_lcd.c: 104:     Lcd_Cmd(0x03);
  5355  0019E0  0E03               	movlw	3
  5356  0019E2  EC16  F00F         	call	_Lcd_Cmd
  5357  0019E6                     
  5358                           ;fs_lcd.c: 105:      _delay((unsigned long)((11)*(64000000UL/4000.0)));
  5359  0019E6  0EE5               	movlw	229
  5360  0019E8  6E04               	movwf	??_lcd_init^0,c
  5361  0019EA  0E91               	movlw	145
  5362  0019EC                     u3937:
  5363  0019EC  2EE8               	decfsz	wreg,f,c
  5364  0019EE  D7FE               	bra	u3937
  5365  0019F0  2E04               	decfsz	??_lcd_init^0,f,c
  5366  0019F2  D7FC               	bra	u3937
  5367  0019F4  F000               	nop	
  5368  0019F6                     
  5369                           ;fs_lcd.c: 106:     Lcd_Cmd(0x03);
  5370  0019F6  0E03               	movlw	3
  5371  0019F8  EC16  F00F         	call	_Lcd_Cmd
  5372  0019FC                     
  5373                           ;fs_lcd.c: 107:     Lcd_Cmd(0x02);
  5374  0019FC  0E02               	movlw	2
  5375  0019FE  EC16  F00F         	call	_Lcd_Cmd
  5376  001A02                     
  5377                           ;fs_lcd.c: 108:     Lcd_Cmd(0x02);
  5378  001A02  0E02               	movlw	2
  5379  001A04  EC16  F00F         	call	_Lcd_Cmd
  5380  001A08                     
  5381                           ;fs_lcd.c: 109:     Lcd_Cmd(0x08);
  5382  001A08  0E08               	movlw	8
  5383  001A0A  EC16  F00F         	call	_Lcd_Cmd
  5384  001A0E                     
  5385                           ;fs_lcd.c: 110:     Lcd_Cmd(0x00);
  5386  001A0E  0E00               	movlw	0
  5387  001A10  EC16  F00F         	call	_Lcd_Cmd
  5388  001A14                     
  5389                           ;fs_lcd.c: 111:     Lcd_Cmd(0x0C);
  5390  001A14  0E0C               	movlw	12
  5391  001A16  EC16  F00F         	call	_Lcd_Cmd
  5392  001A1A                     
  5393                           ;fs_lcd.c: 112:     Lcd_Cmd(0x00);
  5394  001A1A  0E00               	movlw	0
  5395  001A1C  EC16  F00F         	call	_Lcd_Cmd
  5396  001A20                     
  5397                           ;fs_lcd.c: 113:     Lcd_Cmd(0x06);
  5398  001A20  0E06               	movlw	6
  5399  001A22  EC16  F00F         	call	_Lcd_Cmd
  5400  001A26  0012               	return		;funcret
  5401  001A28                     __end_of_lcd_init:
  5402                           	callstack 0
  5403                           
  5404 ;; *************** function _Lcd_Clear *****************
  5405 ;; Defined at:
  5406 ;;		line 42 in file "fs_lcd.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;		None
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;		None
  5411 ;; Return value:  Size  Location     Type
  5412 ;;                  1    wreg      void 
  5413 ;; Registers used:
  5414 ;;		wreg, status,2, cstack
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5420 ;;      Params:         0       0       0       0       0       0       0
  5421 ;;      Locals:         0       0       0       0       0       0       0
  5422 ;;      Temps:          0       0       0       0       0       0       0
  5423 ;;      Totals:         0       0       0       0       0       0       0
  5424 ;;Total ram usage:        0 bytes
  5425 ;; Hardware stack levels used:    1
  5426 ;; Hardware stack levels required when called:    3
  5427 ;; This function calls:
  5428 ;;		_Lcd_Cmd
  5429 ;; This function is called by:
  5430 ;;		_main
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           	psect	text26
  5435  001E72                     __ptext26:
  5436                           	callstack 0
  5437  001E72                     _Lcd_Clear:
  5438                           	callstack 27
  5439  001E72                     
  5440                           ;fs_lcd.c: 44:    Lcd_Cmd(0);
  5441  001E72  0E00               	movlw	0
  5442  001E74  EC16  F00F         	call	_Lcd_Cmd
  5443                           
  5444                           ;fs_lcd.c: 45:    Lcd_Cmd(1);
  5445  001E78  0E01               	movlw	1
  5446  001E7A  EC16  F00F         	call	_Lcd_Cmd
  5447  001E7E  0012               	return		;funcret
  5448  001E80                     __end_of_Lcd_Clear:
  5449                           	callstack 0
  5450                           
  5451 ;; *************** function _Lcd_Cmd *****************
  5452 ;; Defined at:
  5453 ;;		line 28 in file "fs_lcd.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;  a               1    wreg     unsigned char 
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;  a               1    2[COMRAM] unsigned char 
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  1    wreg      void 
  5460 ;; Registers used:
  5461 ;;		wreg, status,2, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5467 ;;      Params:         0       0       0       0       0       0       0
  5468 ;;      Locals:         1       0       0       0       0       0       0
  5469 ;;      Temps:          1       0       0       0       0       0       0
  5470 ;;      Totals:         2       0       0       0       0       0       0
  5471 ;;Total ram usage:        2 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    2
  5474 ;; This function calls:
  5475 ;;		_Lcd_Port
  5476 ;; This function is called by:
  5477 ;;		_Lcd_Clear
  5478 ;;		_Lcd_Set_Cursor
  5479 ;;		_lcd_init
  5480 ;;		_Lcd_Shift_Right
  5481 ;;		_Lcd_Shift_Left
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           	psect	text27
  5486  001E2C                     __ptext27:
  5487                           	callstack 0
  5488  001E2C                     _Lcd_Cmd:
  5489                           	callstack 25
  5490                           
  5491                           ;incstack = 0
  5492                           ;Lcd_Cmd@a stored from wreg
  5493  001E2C  6E03               	movwf	Lcd_Cmd@a^0,c
  5494  001E2E                     
  5495                           ;fs_lcd.c: 28: void Lcd_Cmd(char a);fs_lcd.c: 29: {;fs_lcd.c: 30:    PORTEbits.RE0 = 0;
  5496  001E2E  9084               	bcf	132,0,c	;volatile
  5497  001E30                     
  5498                           ;fs_lcd.c: 31:    Lcd_Port(a);
  5499  001E30  5003               	movf	Lcd_Cmd@a^0,w,c
  5500  001E32  ECE7  F00D         	call	_Lcd_Port
  5501  001E36                     
  5502                           ;fs_lcd.c: 32:    PORTAbits.RA3 = 1;
  5503  001E36  8680               	bsf	128,3,c	;volatile
  5504  001E38                     
  5505                           ;fs_lcd.c: 33:    _delay((unsigned long)((2)*(64000000UL/4000.0)));
  5506  001E38  0E2A               	movlw	42
  5507  001E3A  6E02               	movwf	??_Lcd_Cmd^0,c
  5508  001E3C  0E8E               	movlw	142
  5509  001E3E                     u3947:
  5510  001E3E  2EE8               	decfsz	wreg,f,c
  5511  001E40  D7FE               	bra	u3947
  5512  001E42  2E02               	decfsz	??_Lcd_Cmd^0,f,c
  5513  001E44  D7FC               	bra	u3947
  5514  001E46                     
  5515                           ;fs_lcd.c: 34:    PORTAbits.RA3 = 0;
  5516  001E46  9680               	bcf	128,3,c	;volatile
  5517  001E48  0012               	return		;funcret
  5518  001E4A                     __end_of_Lcd_Cmd:
  5519                           	callstack 0
  5520                           
  5521 ;; *************** function _Lcd_Port *****************
  5522 ;; Defined at:
  5523 ;;		line 12 in file "fs_lcd.c"
  5524 ;; Parameters:    Size  Location     Type
  5525 ;;  a               1    wreg     unsigned char 
  5526 ;; Auto vars:     Size  Location     Type
  5527 ;;  a               1    0[COMRAM] unsigned char 
  5528 ;; Return value:  Size  Location     Type
  5529 ;;                  1    wreg      void 
  5530 ;; Registers used:
  5531 ;;		wreg
  5532 ;; Tracked objects:
  5533 ;;		On entry : 0/0
  5534 ;;		On exit  : 0/0
  5535 ;;		Unchanged: 0/0
  5536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5537 ;;      Params:         0       0       0       0       0       0       0
  5538 ;;      Locals:         1       0       0       0       0       0       0
  5539 ;;      Temps:          0       0       0       0       0       0       0
  5540 ;;      Totals:         1       0       0       0       0       0       0
  5541 ;;Total ram usage:        1 bytes
  5542 ;; Hardware stack levels used:    1
  5543 ;; Hardware stack levels required when called:    1
  5544 ;; This function calls:
  5545 ;;		Nothing
  5546 ;; This function is called by:
  5547 ;;		_Lcd_Cmd
  5548 ;;		_lcd_init
  5549 ;;		_Lcd_Write_Char
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           	psect	text28
  5554  001BCE                     __ptext28:
  5555                           	callstack 0
  5556  001BCE                     _Lcd_Port:
  5557                           	callstack 25
  5558                           
  5559                           ;incstack = 0
  5560                           ;Lcd_Port@a stored from wreg
  5561  001BCE  6E01               	movwf	Lcd_Port@a^0,c
  5562  001BD0                     
  5563                           ;fs_lcd.c: 12: void Lcd_Port(char a);fs_lcd.c: 13: {;fs_lcd.c: 14:    if(a & 1) { PORTDb
      +                          its.RD0 = 1;}
  5564  001BD0  A001               	btfss	Lcd_Port@a^0,0,c
  5565  001BD2  EFED  F00D         	goto	u1821
  5566  001BD6  EFEF  F00D         	goto	u1820
  5567  001BDA                     u1821:
  5568  001BDA  EFF2  F00D         	goto	l102
  5569  001BDE                     u1820:
  5570  001BDE  8083               	bsf	131,0,c	;volatile
  5571  001BE0  EFF3  F00D         	goto	l2471
  5572  001BE4                     l102:
  5573  001BE4  9083               	bcf	131,0,c	;volatile
  5574  001BE6                     l2471:
  5575                           
  5576                           ;fs_lcd.c: 17:    if(a & 2) { PORTDbits.RD1 = 1;}
  5577  001BE6  A201               	btfss	Lcd_Port@a^0,1,c
  5578  001BE8  EFF8  F00D         	goto	u1831
  5579  001BEC  EFFA  F00D         	goto	u1830
  5580  001BF0                     u1831:
  5581  001BF0  EFFD  F00D         	goto	l104
  5582  001BF4                     u1830:
  5583  001BF4  8283               	bsf	131,1,c	;volatile
  5584  001BF6  EFFE  F00D         	goto	l2475
  5585  001BFA                     l104:
  5586  001BFA  9283               	bcf	131,1,c	;volatile
  5587  001BFC                     l2475:
  5588                           
  5589                           ;fs_lcd.c: 20:    if(a & 4) {PORTDbits.RD2 = 1;}
  5590  001BFC  A401               	btfss	Lcd_Port@a^0,2,c
  5591  001BFE  EF03  F00E         	goto	u1841
  5592  001C02  EF05  F00E         	goto	u1840
  5593  001C06                     u1841:
  5594  001C06  EF08  F00E         	goto	l106
  5595  001C0A                     u1840:
  5596  001C0A  8483               	bsf	131,2,c	;volatile
  5597  001C0C  EF09  F00E         	goto	l2479
  5598  001C10                     l106:
  5599  001C10  9483               	bcf	131,2,c	;volatile
  5600  001C12                     l2479:
  5601                           
  5602                           ;fs_lcd.c: 23:    if(a & 8) {PORTDbits.RD3 = 1;}
  5603  001C12  A601               	btfss	Lcd_Port@a^0,3,c
  5604  001C14  EF0E  F00E         	goto	u1851
  5605  001C18  EF10  F00E         	goto	u1850
  5606  001C1C                     u1851:
  5607  001C1C  EF13  F00E         	goto	l108
  5608  001C20                     u1850:
  5609  001C20  8683               	bsf	131,3,c	;volatile
  5610  001C22  EF14  F00E         	goto	l110
  5611  001C26                     l108:
  5612  001C26  9683               	bcf	131,3,c	;volatile
  5613  001C28                     l110:
  5614  001C28  0012               	return		;funcret
  5615  001C2A                     __end_of_Lcd_Port:
  5616                           	callstack 0
  5617                           
  5618 ;; *************** function _TIMER0 *****************
  5619 ;; Defined at:
  5620 ;;		line 33 in file "fs_timer.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;		None
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;		None
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      void 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5634 ;;      Params:         0       0       0       0       0       0       0
  5635 ;;      Locals:         0       0       0       0       0       0       0
  5636 ;;      Temps:          0       0       0       0       0       0       0
  5637 ;;      Totals:         0       0       0       0       0       0       0
  5638 ;;Total ram usage:        0 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; This function calls:
  5641 ;;		Nothing
  5642 ;; This function is called by:
  5643 ;;		Interrupt level 2
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	intcode
  5648  000008                     __pintcode:
  5649                           	callstack 0
  5650  000008                     _TIMER0:
  5651                           	callstack 20
  5652                           
  5653                           ;incstack = 0
  5654  000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5655  00000A                     
  5656                           ;fs_timer.c: 35:     if ((INTCONbits.TMR0IF)&&(INTCONbits.TMR0IE))
  5657  00000A  A4F2               	btfss	242,2,c	;volatile
  5658  00000C  EF0A  F000         	goto	i2u322_41
  5659  000010  EF0C  F000         	goto	i2u322_40
  5660  000014                     i2u322_41:
  5661  000014  EF31  F000         	goto	i2l464
  5662  000018                     i2u322_40:
  5663  000018  AAF2               	btfss	242,5,c	;volatile
  5664  00001A  EF11  F000         	goto	i2u323_41
  5665  00001E  EF13  F000         	goto	i2u323_40
  5666  000022                     i2u323_41:
  5667  000022  EF31  F000         	goto	i2l464
  5668  000026                     i2u323_40:
  5669  000026                     
  5670                           ;fs_timer.c: 36:     {;fs_timer.c: 37:         INTCONbits.TMR0IF = 0;
  5671  000026  94F2               	bcf	242,2,c	;volatile
  5672  000028                     
  5673                           ;fs_timer.c: 38:         TMR0H = 0x63;
  5674  000028  0E63               	movlw	99
  5675  00002A  6ED7               	movwf	215,c	;volatile
  5676                           
  5677                           ;fs_timer.c: 39:         TMR0L = 0xC0;
  5678  00002C  0EC0               	movlw	192
  5679  00002E  6ED6               	movwf	214,c	;volatile
  5680  000030                     
  5681                           ;fs_timer.c: 41:         timer_value.timer_0_counter++;
  5682  000030  0100               	movlb	0	; () banked
  5683  000032  2BB8               	incf	(_timer_value+9)& (0+255),f,b
  5684  000034                     
  5685                           ; BSR set to: 0
  5686                           ;fs_timer.c: 43:         if(button_bounce_controller.menu == 1)
  5687  000034  A05E               	btfss	_button_bounce_controller^0,0,c
  5688  000036  EF1F  F000         	goto	i2u324_41
  5689  00003A  EF21  F000         	goto	i2u324_40
  5690  00003E                     i2u324_41:
  5691  00003E  EF24  F000         	goto	i2l3423
  5692  000042                     i2u324_40:
  5693  000042                     
  5694                           ; BSR set to: 0
  5695                           ;fs_timer.c: 44:         {;fs_timer.c: 45:              timer_value.menu_login_delay++;
  5696  000042  2BB7               	incf	(_timer_value+8)& (0+255),f,b
  5697                           
  5698                           ;fs_timer.c: 46:         }
  5699  000044  EF26  F000         	goto	i2l3425
  5700  000048                     i2l3423:
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;fs_timer.c: 48:         {;fs_timer.c: 49:              timer_value.menu_login_delay = 0
      +                          ;
  5704  000048  0E00               	movlw	0
  5705  00004A  6FB7               	movwf	(_timer_value+8)& (0+255),b
  5706  00004C                     i2l3425:
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;fs_timer.c: 52:         if (timer_value.timer_0_counter >= 100)
  5710  00004C  0E63               	movlw	99
  5711  00004E  65B8               	cpfsgt	(_timer_value+9)& (0+255),b
  5712  000050  EF2C  F000         	goto	i2u325_41
  5713  000054  EF2E  F000         	goto	i2u325_40
  5714  000058                     i2u325_41:
  5715  000058  EF31  F000         	goto	i2l464
  5716  00005C                     i2u325_40:
  5717  00005C                     
  5718                           ; BSR set to: 0
  5719                           ;fs_timer.c: 53:         {;fs_timer.c: 54:             timer_value.timer_0_counter = 0;
  5720  00005C  0E00               	movlw	0
  5721  00005E  6FB8               	movwf	(_timer_value+9)& (0+255),b
  5722  000060                     
  5723                           ; BSR set to: 0
  5724                           ;fs_timer.c: 55:             timer_counter_flag.one_second_flag = 1;
  5725  000060  81CD               	bsf	_timer_counter_flag& (0+255),0,b
  5726  000062                     i2l464:
  5727  000062  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5728  000064  0011               	retfie		f
  5729  000066                     __end_of_TIMER0:
  5730                           	callstack 0
  5731                           
  5732                           	psect	rparam
  5733  0000                     
  5734                           	psect	temp
  5735  00005F                     btemp:
  5736                           	callstack 0
  5737  00005F                     	ds	1
  5738  0000                     int$flags	set	btemp
  5739  0000                     wtemp8	set	btemp+1
  5740  0000                     ttemp5	set	btemp+1
  5741  0000                     ttemp6	set	btemp+4
  5742  0000                     ttemp7	set	btemp+8
  5743                           
  5744                           	psect	idloc
  5745                           
  5746                           ;Config register IDLOC0 @ 0x200000
  5747                           ;	unspecified, using default values
  5748  200000                     	org	2097152
  5749  200000  FF                 	db	255
  5750                           
  5751                           ;Config register IDLOC1 @ 0x200001
  5752                           ;	unspecified, using default values
  5753  200001                     	org	2097153
  5754  200001  FF                 	db	255
  5755                           
  5756                           ;Config register IDLOC2 @ 0x200002
  5757                           ;	unspecified, using default values
  5758  200002                     	org	2097154
  5759  200002  FF                 	db	255
  5760                           
  5761                           ;Config register IDLOC3 @ 0x200003
  5762                           ;	unspecified, using default values
  5763  200003                     	org	2097155
  5764  200003  FF                 	db	255
  5765                           
  5766                           ;Config register IDLOC4 @ 0x200004
  5767                           ;	unspecified, using default values
  5768  200004                     	org	2097156
  5769  200004  FF                 	db	255
  5770                           
  5771                           ;Config register IDLOC5 @ 0x200005
  5772                           ;	unspecified, using default values
  5773  200005                     	org	2097157
  5774  200005  FF                 	db	255
  5775                           
  5776                           ;Config register IDLOC6 @ 0x200006
  5777                           ;	unspecified, using default values
  5778  200006                     	org	2097158
  5779  200006  FF                 	db	255
  5780                           
  5781                           ;Config register IDLOC7 @ 0x200007
  5782                           ;	unspecified, using default values
  5783  200007                     	org	2097159
  5784  200007  FF                 	db	255
  5785                           
  5786                           	psect	config
  5787                           
  5788                           ; Padding undefined space
  5789  300000                     	org	3145728
  5790  300000  FF                 	db	255
  5791                           
  5792                           ;Config register CONFIG1H @ 0x300001
  5793                           ;	Oscillator Selection bits
  5794                           ;	FOSC = INTIO67, Internal oscillator block
  5795                           ;	4X PLL Enable
  5796                           ;	PLLCFG = ON, Oscillator multiplied by 4
  5797                           ;	Primary clock enable bit
  5798                           ;	PRICLKEN = ON, Primary clock is always enabled
  5799                           ;	Fail-Safe Clock Monitor Enable bit
  5800                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  5801                           ;	Internal/External Oscillator Switchover bit
  5802                           ;	IESO = ON, Oscillator Switchover mode enabled
  5803  300001                     	org	3145729
  5804  300001  B8                 	db	184
  5805                           
  5806                           ;Config register CONFIG2L @ 0x300002
  5807                           ;	Power-up Timer Enable bit
  5808                           ;	PWRTEN = OFF, Power up timer disabled
  5809                           ;	Brown-out Reset Enable bits
  5810                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  5811                           ;	Brown Out Reset Voltage bits
  5812                           ;	BORV = 190, VBOR set to 1.90 V nominal
  5813  300002                     	org	3145730
  5814  300002  1F                 	db	31
  5815                           
  5816                           ;Config register CONFIG2H @ 0x300003
  5817                           ;	Watchdog Timer Enable bits
  5818                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  5819                           ;	Watchdog Timer Postscale Select bits
  5820                           ;	WDTPS = 32768, 1:32768
  5821  300003                     	org	3145731
  5822  300003  3C                 	db	60
  5823                           
  5824                           ; Padding undefined space
  5825  300004                     	org	3145732
  5826  300004  FF                 	db	255
  5827                           
  5828                           ;Config register CONFIG3H @ 0x300005
  5829                           ;	CCP2 MUX bit
  5830                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  5831                           ;	PORTB A/D Enable bit
  5832                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  5833                           ;	P3A/CCP3 Mux bit
  5834                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  5835                           ;	HFINTOSC Fast Start-up
  5836                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  5837                           ;	Timer3 Clock input mux bit
  5838                           ;	T3CMX = PORTC0, T3CKI is on RC0
  5839                           ;	ECCP2 B output mux bit
  5840                           ;	P2BMX = PORTD2, P2B is on RD2
  5841                           ;	MCLR Pin Enable bit
  5842                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  5843  300005                     	org	3145733
  5844  300005  BD                 	db	189
  5845                           
  5846                           ;Config register CONFIG4L @ 0x300006
  5847                           ;	Stack Full/Underflow Reset Enable bit
  5848                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  5849                           ;	Single-Supply ICSP Enable bit
  5850                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
  5851                           ;	Extended Instruction Set Enable bit
  5852                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  5853                           ;	Background Debug
  5854                           ;	DEBUG = 0x1, unprogrammed default
  5855  300006                     	org	3145734
  5856  300006  84                 	db	132
  5857                           
  5858                           ; Padding undefined space
  5859  300007                     	org	3145735
  5860  300007  FF                 	db	255
  5861                           
  5862                           ;Config register CONFIG5L @ 0x300008
  5863                           ;	Code Protection Block 0
  5864                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  5865                           ;	Code Protection Block 1
  5866                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  5867                           ;	Code Protection Block 2
  5868                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  5869                           ;	Code Protection Block 3
  5870                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  5871  300008                     	org	3145736
  5872  300008  0F                 	db	15
  5873                           
  5874                           ;Config register CONFIG5H @ 0x300009
  5875                           ;	Boot Block Code Protection bit
  5876                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  5877                           ;	Data EEPROM Code Protection bit
  5878                           ;	CPD = OFF, Data EEPROM not code-protected
  5879  300009                     	org	3145737
  5880  300009  C0                 	db	192
  5881                           
  5882                           ;Config register CONFIG6L @ 0x30000A
  5883                           ;	Write Protection Block 0
  5884                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  5885                           ;	Write Protection Block 1
  5886                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  5887                           ;	Write Protection Block 2
  5888                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  5889                           ;	Write Protection Block 3
  5890                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  5891  30000A                     	org	3145738
  5892  30000A  0F                 	db	15
  5893                           
  5894                           ;Config register CONFIG6H @ 0x30000B
  5895                           ;	Configuration Register Write Protection bit
  5896                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  5897                           ;	Boot Block Write Protection bit
  5898                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  5899                           ;	Data EEPROM Write Protection bit
  5900                           ;	WRTD = OFF, Data EEPROM not write-protected
  5901  30000B                     	org	3145739
  5902  30000B  E0                 	db	224
  5903                           
  5904                           ;Config register CONFIG7L @ 0x30000C
  5905                           ;	Table Read Protection Block 0
  5906                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  5907                           ;	Table Read Protection Block 1
  5908                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  5909                           ;	Table Read Protection Block 2
  5910                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  5911                           ;	Table Read Protection Block 3
  5912                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  5913  30000C                     	org	3145740
  5914  30000C  0F                 	db	15
  5915                           
  5916                           ;Config register CONFIG7H @ 0x30000D
  5917                           ;	Boot Block Table Read Protection bit
  5918                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  5919  30000D                     	org	3145741
  5920  30000D  40                 	db	64
  5921                           tosu	equ	0xFFF
  5922                           tosh	equ	0xFFE
  5923                           tosl	equ	0xFFD
  5924                           stkptr	equ	0xFFC
  5925                           pclatu	equ	0xFFB
  5926                           pclath	equ	0xFFA
  5927                           pcl	equ	0xFF9
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           prodh	equ	0xFF4
  5933                           prodl	equ	0xFF3
  5934                           indf0	equ	0xFEF
  5935                           postinc0	equ	0xFEE
  5936                           postdec0	equ	0xFED
  5937                           preinc0	equ	0xFEC
  5938                           plusw0	equ	0xFEB
  5939                           fsr0h	equ	0xFEA
  5940                           fsr0l	equ	0xFE9
  5941                           wreg	equ	0xFE8
  5942                           indf1	equ	0xFE7
  5943                           postinc1	equ	0xFE6
  5944                           postdec1	equ	0xFE5
  5945                           preinc1	equ	0xFE4
  5946                           plusw1	equ	0xFE3
  5947                           fsr1h	equ	0xFE2
  5948                           fsr1l	equ	0xFE1
  5949                           bsr	equ	0xFE0
  5950                           indf2	equ	0xFDF
  5951                           postinc2	equ	0xFDE
  5952                           postdec2	equ	0xFDD
  5953                           preinc2	equ	0xFDC
  5954                           plusw2	equ	0xFDB
  5955                           fsr2h	equ	0xFDA
  5956                           fsr2l	equ	0xFD9
  5957                           status	equ	0xFD8

Data Sizes:
    Strings     151
    Constant    0
    Data        4
    BSS         243
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     89      94
    BANK0           160     34     148
    BANK1           256      0     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> stateMachine@textCursor2(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_12(CODE[16]), STR_10(CODE[16]), STR_8(CODE[18]), STR_6(CODE[18]), 
		 -> STR_4(CODE[18]), STR_2(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_12(CODE[16]), STR_10(CODE[16]), STR_8(CODE[18]), STR_6(CODE[18]), 
		 -> STR_4(CODE[18]), STR_2(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_12(CODE[16]), STR_10(CODE[16]), STR_8(CODE[18]), STR_6(CODE[18]), 
		 -> STR_4(CODE[18]), STR_2(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> stateMachine@textCursor2(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2705_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> stateMachine@textCursor2(BANK0[16]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> stateMachine@textCursor2(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_11(CODE[17]), STR_9(CODE[17]), STR_7(CODE[17]), STR_5(CODE[17]), 
		 -> STR_3(CODE[17]), STR_1(CODE[17]), stateMachine@textCursor2(BANK0[16]), 


Critical Paths under _main in COMRAM

    _system_init->_eepromRead
    _menuControl->_stateMachine
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _lcd_init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TIMER0 in COMRAM

    None.

Critical Paths under _main in BANK0

    _menuControl->_stateMachine
    _stateMachine->_sprintf

Critical Paths under _TIMER0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TIMER0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TIMER0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TIMER0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TIMER0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TIMER0 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10790
                          _Lcd_Clear
                           _lcd_init
                           _mcu_init
                        _menuControl
                     _menuInitialize
                        _system_init
                       _timer_0_init
 ---------------------------------------------------------------------------------
 (1) _timer_0_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _system_init                                          2     2      0      22
                                              1 COMRAM     2     2      0
                         _eepromRead
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _menuInitialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _menuControl                                          0     0      0   10460
                 _buttonControlFlags
                       _stateMachine
 ---------------------------------------------------------------------------------
 (2) _stateMachine                                        18    18      0   10459
                                             87 COMRAM     2     2      0
                                             18 BANK0     16    16      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                        _eepromWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             18    10      8    7216
                                              0 BANK0     18    10      8
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (7) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (8) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (7) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (3) _eepromWrite                                          2     1      1     500
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     6     4      2    1180
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       3     3      0     178
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       5     4      1    1292
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _buttonControlFlags                                  16    16      0       1
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 (1) _mcu_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     198
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              2     2      0     110
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _TIMER0                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _lcd_init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _mcu_init
   _menuControl
     _buttonControlFlags
     _stateMachine
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _eepromWrite
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _fputc
               _putch
   _menuInitialize
   _system_init
     _eepromRead
   _timer_0_init

 _TIMER0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      80       6       50.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     22      94       4       92.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     59      5E       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     172       9        0.0%
DATA                 0      0     172      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Aug 07 02:55:42 2020

                           l70 1E1A                             l72 1E28                             l73 1E2A  
                           l76 1DD6                             l78 1DE4                             l79 1DE8  
                           _KP 00F0            __end_of_system_init 1736                            l110 1C28  
                          l102 1BE4                            l104 1BFA                            l113 1E48  
                          l106 1C10                            l122 1B0A                            l108 1C26  
                          l116 1E7E                            l125 1A26                            l134 1AA4  
                          l320 11B0                            l128 1DBA                            l321 11D2  
                          l330 1304                            l322 11F4                            l323 1216  
                          l315 1E0C                            l332 1326                            l324 1238  
                          l253 1E50                            l325 125A                            l326 127C  
                          l350 07FC                            l262 1734                            l327 129E  
                          l256 1E5E                            l328 12C0                            l360 09EA  
                          l344 06AA                            l329 12E2                            l370 0C1C  
                          l346 0756                            l338 1BCC                            l355 0916  
                          l347 079A                            l374 0CEE                   _startIsClick 00CB  
                          l368 0B84                            l369 0BA2                            l467 1E70  
                          l584 14AE                            l597 1612                            _PR2 000FBB  
                          _abs 1D10                            _pad 18D0                            wreg 000FE8  
                  _stopIsClick 00CA                           l1211 0FCC                           ?_abs 0013  
                         l1232 1D4E                           l1224 1B64                           l1225 1B6C  
                         l1153 1C7A                           l3001 1B72                           l1218 1180  
                         l3011 1BA2                           l3003 1B76                           l1244 18CE  
                         l1252 1D0E                           l1180 1914                           l2301 132C  
                         l1229 1D46                           l1261 1D84                           l3013 1BA4  
                         l3005 1B86                           l2311 138C                           l2303 133A  
                         l1255 1E84                           l1183 1956                           l1191 0D8E  
                         l3015 1BB0                           l3007 1B88                           l2321 13D6  
                         l2313 1390                           l2305 135A                           l2401 1D10  
                         l1185 1990                           l1193 0D96                           l3017 1BBE  
                         l3009 1B94                           l2331 1446                           l2323 13E4  
                         l2315 139C                           l2307 135E                           l2403 1D2A  
                         l2411 0D58                           l3019 1BC0                           l2333 1458  
                         l2325 13F6                           l2317 13BA                           l2309 136C  
                         l2421 0DB0                           l2413 0D66                           l2405 0CF0  
                         l2501 10DE                           l2327 1424                           l2319 13C2  
                         l2335 145E                           l2351 14E6                           l2343 14B0  
                         l2271 182A                           l2431 0DDC                           l2423 0DBE  
                         l2415 0D68                           l2407 0D10                           l2503 1102  
                         l2511 1130                           l3311 173E                           l2601 1A68  
                         l2337 146E                           l2329 1444                           l2361 154E  
                         l2353 14F4                           l2345 14B4                           l2273 1834  
                         l2281 1CCC                           l2441 0EE8                           l2433 0E5E  
                         l2425 0DC4                           l2417 0D82                           l2409 0D38  
                         l2513 113E                           l2505 1110                           l3321 175E  
                         l3313 1742                           l2531 1E38                           l2339 148E  
                         l2363 155C                           l2371 15C2                           l2355 1514  
                         l2347 14C2                           l2275 1852                           l2267 1806  
                         l2283 1CD8                           l2291 1D5C                           l2451 0F5A  
                         l2443 0F06                           l2435 0E64                           l2427 0DCC  
                         l2419 0D9E                           l2507 1124                           l2611 1C68  
                         l2603 1C2A                           l3331 17A0                           l3323 1760  
                         l3315 1746                           l3307 1736                           l2533 1E46  
                         l2525 1E2E                           l2541 1D9E                           l2373 15D2  
                         l2365 158A                           l2357 1532                           l2349 14E2  
                         l2277 1888                           l2269 1818                           l2285 1CEA  
                         l2293 1D60                           l2381 18DE                           l2461 0F94  
                         l2453 0F68                           l2445 0F20                           l2437 0E6A  
                         l2429 0DD6                           l2517 114A                           l2605 1C3C  
                         l2701 0786                           l2621 1E18                           l3341 17DC  
                         l3333 17A4                           l3325 1770                           l3317 174A  
                         l3309 173A                           l2471 1BE6                           l2527 1E30  
                         l2631 11BE                           l2623 1182                           l2551 1DB0  
                         l2543 1DA0                           l2535 1D88                           l2375 15F2  
                         l2367 15AA                           l2359 153A                           l2287 1CEE  
                         l2295 1D78                           l2391 1934                           l2383 18F2  
                         l2455 0F6E                           l2463 0FA4                           l2447 0F3A  
                         l2439 0ECE                           l2519 116E                           l2607 1C44  
                         l2711 07DA                           l2703 0796                           l2615 1E10  
                         l3343 17F2                           l3335 17B4                           l3327 1780  
                         l3319 174E                           l2481 1C20                           l2473 1BF4  
                         l2529 1E36                           l2641 1210                           l2633 11CC  
                         l2625 118E                           l2553 1DB8                           l2545 1DA6  
                         l2537 1D94                           l2369 15BC                           l2289 1D50  
                         l2393 1938                           l2385 1900                           l2457 0F80  
                         l2449 0F48                           l2561 1B48                           l2609 1C4C  
                         l2801 09C6                           l2721 0824                           l2713 07E0  
                         l2705 07AA                           l2617 1E14                           l3337 17C8  
                         l3329 1790                           l3345 17FA                           l2475 1BFC  
                         l2467 1BD0                           l2651 1268                           l2643 1224  
                         l2635 11E0                           l2627 119C                           l2547 1DA8  
                         l2539 1D96                           l2571 1DCA                           l2563 1DBE  
                         l2299 1328                           l2395 1964                           l2387 190C  
                         l2379 18D0                           l2459 0F8C                           l2491 1016  
                         l2483 0FCE                           l2555 1B0C                           l2811 0A04  
                         l2803 09D2                           l2731 084C                           l2723 0834  
                         l2715 0810                           l2707 07BA                           l2619 1E16  
                         l3339 17CC                           l2477 1C0A                           l2469 1BDE  
                         l2661 12BA                           l2653 1276                           l2645 1232  
                         l2637 11EE                           l2629 11AA                           l2581 1AB8  
                         l2549 1DAE                           l2573 1DCC                           l2565 1DC2  
                         l2397 1978                           l2389 1920                           l2493 103A  
                         l2485 0FF2                           l2557 1B14                           l2901 0C5E  
                         l2813 0A12                           l2821 0A30                           l2741 0880  
                         l2733 0854                           l2725 0836                           l2717 0812  
                         l2709 07CA                           l2479 1C12                           l2671 1312  
                         l2663 12CE                           l2655 128A                           l2647 1246  
                         l2639 1202                           l2591 1AFE                           l2583 1ACA  
                         l2575 1DD0                           l2567 1DC6                           l2495 105E  
                         l2487 1000                           l2559 1B22                           l2903 0C64  
                         l2823 0A40                           l2831 0A5E                           l2815 0A22  
                         l2807 09FE                           l2751 08A0                           l2743 0882  
                         l2735 085C                           l2727 0838                           l2719 0816  
                         l2911 0C92                           l2673 1320                           l2665 12DC  
                         l2657 1298                           l2649 1254                           l2593 1B04  
                         l2585 1AD0                           l2577 1DD4                           l2569 1DC8  
                         l2497 10A6                           l2489 1012                           l2905 0C7C  
                         l2841 0AA6                           l2833 0A68                           l2825 0A50  
                         l2817 0A24                           l2809 0A00                           l2761 08CE  
                         l2753 08A8                           l2745 0884                           l2729 0842  
                         l2737 0862                           l2681 06C6                           l2667 12F0  
                         l2659 12AC                           l2587 1ADA                           l2579 1AA8  
                         l2595 1A28                           l2851 0AE0                           l2835 0A74  
                         l2827 0A52                           l2819 0A26                           l2771 092C  
                         l2763 08EA                           l2747 088E                           l2739 0870  
                         l2755 08AE                           l2691 071E                           l2683 06D0  
                         l2675 069A                           l2933 1E72                           l2941 19CA  
                         l2669 12FE                           l2589 1AEC                           l2597 1A34  
                         l2861 0AF8                           l2853 0AE2                           l2845 0ABE  
                         l2837 0A7E                           l2829 0A54                           l2781 0952  
                         l2773 0930                           l2765 08F6                           l2757 08B8  
                         l2749 0898                           l2693 0738                           l2685 06F6  
                         l2677 06B0                           ?_pad 0011                           l2951 19FC  
                         l2943 19D0                           l2935 1992                           l2599 1A64  
                         l2871 0B46                           l2863 0B02                           l2855 0AE4  
                         l2847 0ACA                           l2839 0A9A                           l2791 0980  
                         l2775 093E                           l2783 095C                           l2767 090A  
                         l2759 08C4                           l2695 074A                           l2687 0702  
                         l2679 06BA                           l2961 1A1A                           l2953 1A02  
                         l2945 19E0                           l2937 19AC                           l3841 0CA8  
                         l2881 0BB2                           l2873 0B66                           l2865 0B28  
                         l2857 0AE6                           l2849 0AD4                           l2785 096C  
                         l2793 098A                           l2777 094E                           l2769 092A  
                         l2697 0766                           l2689 0716                           l2963 1A20  
                         l2955 1A08                           l2947 19E6                           l2939 19B2  
                         l2891 0C0A                           l2883 0BBE                           l2875 0B78  
                         l2867 0B34                           l2859 0AF0                           l2795 0994  
                         l2787 097C                           l2779 0950                           l2699 0776  
                         l2971 1E60                           l2957 1A0E                           l2949 19F6  
                         l2965 1E4A                           l2893 0C0C                           l2885 0BC8  
                         l2877 0B8A                           l2869 0B44                           l2797 09A0  
                         l2789 097E                           l2981 16E8                           l2973 1E6C  
                         l2959 1A14                           l2967 1E4E                           l2895 0C2C  
                         l2887 0BEE                           l2879 0BA8                           l2799 09AA  
                         l2991 1702                           l2983 16EA                           l2975 1E6E  
                         l2897 0C3C                           l2889 0BFA                           l2969 1DEA  
                         l2993 170C                           l2985 16EC                           l2977 1614  
                         l2899 0C4C                           l2995 1724                           l2987 16EE  
                         l2979 16E6                           l2997 172C                           l2989 16F8  
                         l2999 1B6E                           STR_1 0624                           STR_2 0689  
                         STR_3 0657                           STR_4 0601                           STR_5 0668  
                         STR_6 0601                           STR_7 0613                           STR_8 0601  
                         STR_9 0635                           u2000 11AA                           u2001 11A6  
                         u2010 11BE                           u2011 11BA                           u2100 1254  
                         u2020 11CC                           u2101 1250                           u2021 11C8  
                         u2110 1268                           u2030 11E0                           u2111 1264  
                         u2031 11DC                           u2200 12FE                           u2120 1276  
                         u2040 11EE                           u2201 12FA                           u2121 1272  
                         u2041 11EA                           u2210 1312                           u2130 128A  
                         u2050 1202                           u2211 130E                           u2131 1286  
                         u2051 11FE                           u2220 1320                           u2140 1298  
                         u2060 1210                           u1500 136C                           u2300 0796  
                         u3100 1790                           u2221 131C                           u2141 1294  
                         u2061 120C                           u1501 1368                           u2301 0792  
                         u3101 178C                           u2150 12AC                           u2070 1224  
                         u1430 1818                           u2310 07AA                           u3110 17A0  
                         u2151 12A8                           u2071 1220                           u1511 1396  
                         u1431 1814                           u2311 07A6                           u2231 06A0  
                         u3111 179C                           u2160 12BA                           u2080 1232  
                         u1520 13BA                           u1600 158A                           u1440 182A  
                         u2400 090A                           u2320 07BA                           u2240 0716  
                         u3120 17C8                           u2161 12B6                           u2081 122E  
                         u1521 13B6                           u1601 1586                           u1441 1826  
                         u2401 0906                           u2321 07B6                           u2241 0712  
                         u3121 17C4                           u2170 12CE                           u2090 1246  
                         u1530 13E4                           u1610 15D2                           u1450 1852  
                         u2410 092A                           u2330 07CA                           u2250 0738  
                         u3130 17F2                           u2171 12CA                           u2091 1242  
                         u1531 13E0                           u1611 15CE                           u1451 184E  
                         u2411 0926                           u2331 07C6                           u2251 0734  
                         u3131 17EE                           u2180 12DC                           u1540 1424  
                         u1460 1888                           u1620 18DE                           u1700 0D66  
                         u2500 0A40                           u2420 093E                           u2340 07DA  
                         u2260 074A                           u2181 12D8                           u1541 1420  
                         u1461 1884                           u1621 18DA                           u1701 0D62  
                         u2501 0A3C                           u2421 093A                           u2341 07D6  
                         u2261 0746                           u2190 12F0                           u1550 146E  
                         u1470 1D0E                           u1630 1900                           u1710 0D82  
                         u2510 0A50                           u2430 094E                           u2350 0810  
                         u2270 0766                           u3070 175E                           u2191 12EC  
                         u1551 146A                           u1471 1D0A                           u1631 18FC  
                         u1711 0D7E                           u2511 0A4C                           u2431 094A  
                         u2351 080C                           u2271 0762                           u3071 175A  
                         u1560 14C2                           u1480 1D78                           u1640 1956  
                         u1800 0F68                           u1720 0DB0                           u2600 0C8E  
                         u2520 0ABA                           u2440 096C                           u2360 0824  
                         u2280 0776                           u3080 1770                           u1561 14BE  
                         u1481 1D74                           u1641 1952                           u1801 0F64  
                         u1721 0DAC                           u2601 0C8A                           u2521 0AB6  
                         u2441 0968                           u2361 0820                           u2281 0772  
                         u3081 176C                           u1490 133A                           u1570 14F4  
                         u1650 1964                           u1810 0F80                           u1730 0DBE  
                         u2530 0B44                           u2450 097C                           u2370 0834  
                         u2290 0786                           u3090 1780                           u1491 1336  
                         u1571 14F0                           u1651 1960                           u1811 0F7C  
                         u1731 0DBA                           u2531 0B40                           u2451 0978  
                         u2371 0830                           u2291 0782                           u3091 177C  
                         u1820 1BDE                           u2620 1E5E                           u1580 1532  
                         u1660 1D2A                           u1740 0EE8                           u1900 1B64  
                         u2540 0B78                           u2460 09E6                           u2380 0870  
                         u1821 1BDA                           u2621 1E5A                           u1581 152E  
                         u1661 1D26                           u1741 0EE4                           u1901 1B60  
                         u2541 0B74                           u2461 09E2                           u2381 086C  
                         u1830 1BF4                           u1910 1DE4                           u1590 155C  
                         u1750 0F06                           u1670 0D20                           u2550 0C0A  
                         u2470 09FE                           u2390 0880                           u2630 1B86  
                         u1831 1BF0                           u1911 1DE0                           u1591 1558  
                         u1751 0F02                           u1671 0D1A                           u2551 0C06  
                         u2471 09FA                           u2391 087C                           u2631 1B82  
                         u1840 1C0A                           u1920 1AB8                           u1760 0F20  
                         u1680 0D22                           u2560 0C2C                           u2480 0A12  
                         u2640 1BA2                           u1841 1C06                           u1921 1AB4  
                         u1761 0F1C                           u2561 0C28                           u2481 0A0E  
                         u2641 1B9E                           u1850 1C20                           u1930 1AEC  
                         u1770 0F3A                           u1690 0D38                           u2570 0C3C  
                         u2490 0A22                           u2650 1BBE                           u1851 1C1C  
                         u1931 1AE8                           u1771 0F36                           u1691 0D34  
                         u2571 0C38                           u2491 0A1E                           u2651 1BBA  
                         u1940 1A60                           u1780 0F48                           u1860 0FF2  
                         u2580 0C4C                           u1781 0F44                           u1861 0FEE  
                         u2581 0C48                           u1950 1A94                           u1790 0F5A  
                         u1870 103A                           u2590 0C5E                           u1791 0F56  
                         u1871 1036                           u2591 0C5A                           u1960 1AA4  
                         u1880 105E                           u1961 1AA0                           u1881 105A  
                         u1890 1102                           u1970 1E28                           u1947 1A56  
                         u1891 10FE                           u1971 1E24                           u1981 1188  
                         u1957 1A8A                           u1990 119C                           u1991 1198  
                         u3907 1DB2                           u3917 19BC                           u3927 19D6  
                         u3937 19EC                           u3947 1E3E                           u3887 1716  
                         u3897 1DA2                           _TMR2 000FBC                           abs@a 0013  
            ?_Lcd_Write_String 0005                           _dbuf 0160                           _main 1736  
                         _dtoa 0CF0                           _prec 005A                           _nout 00C4  
                         pad@i 0018                           pad@p 0015                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf2 000FDF                           fsr1l 000FE1  
                         pad@w 001A                           fsr2l 000FD9                           btemp 005F  
                         start 0066             ??_Lcd_Write_String 0007                __end_of_Lcd_Cmd 1E4A  
                 ___param_bank 000000                          ??_abs 0015                          ??_pad 0017  
                 ?_menuControl 0001                __end_of___aodiv 14B0                          ?_main 0001  
                        ?_dtoa 001C                __end_of___aomod 1614                          _EEADR 000FA9  
                        STR_10 0679                          STR_11 0646                          STR_12 0679  
                        _T0CON 000FD5                          i2l464 0062                   vfpfcnvrt@fmt 0042  
                        _TMR0H 000FD7                          _TMR0L 000FD6        __size_of_Lcd_Set_Cursor 0066  
                        _flags 005C                          _fputc 1806                          _fputs 1CCC  
                 _adc_raw_data 0093                          pad@fp 0011                          _width 00C6  
                        _putch 1E84                          dtoa@d 001E                          dtoa@i 003E  
                        dtoa@n 0036                          dtoa@p 0030                          dtoa@s 0034  
                        dtoa@w 0032                          tablat 000FF5                          ttemp5 0060  
                        ttemp6 0063                          ttemp7 0067                          status 000FD8  
                        wtemp8 0060                __end_of_sprintf 1C7C               __end_of_Lcd_Port 1C2A  
              __initialization 1C7C                    _system_init 1614                   __end_of_main 1806  
                 __end_of_dtoa 0FCE                         ??_main 005A                         ??_dtoa 0026  
           __size_of_Lcd_Clear 000E                  __activetblptr 000002                         _ADCON0 000FC2  
                       _ADCON1 000FC1                         ?_fputc 0001                         ?_fputs 000A  
                       _ADRESH 000FC4                         _ADRESL 000FC3                         _EEDATA 000FA8  
                       _CCPR1L 000FBE                         _CCPR2L 000F67                         _EECON2 000FA7  
                       ?_putch 0001                         _ANSELB 000F39                         i2l3411 0018  
                       i2l3421 0042                         i2l3413 0026                         i2l3423 0048  
                       i2l3415 0028                         i2l3425 004C                         i2l3417 0030  
                       i2l3409 000A                         i2l3427 005C                         i2l3419 0034  
                       i2l3429 0060                      ??_Lcd_Cmd 0002                         _TIMER0 0008  
      __size_of_Lcd_Write_Char 0036             _timer_counter_flag 00CD           __size_of_eepromWrite 002E  
                 vfprintf@cfmt 0056               __end_of_lcd_init 1A28                      ??___aodiv 0011  
                    ??___aomod 0011               __end_of_mcu_init 1E60                         clear_0 1CA2  
                       clear_1 1CAE                eepromWrite@data 0001                         pad@buf 0013  
                       dtoa@fp 001C                         _strlen 1D50                         fputc@c 0001  
                       fputs@c 000E                         fputs@i 000F                         fputs@s 000A  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                         putch@c 0001               __end_of_vfprintf 1B6E  
                    ??_sprintf 0058     __end_of_buttonControlFlags 1328                Lcd_Set_Cursor@a 0005  
              Lcd_Set_Cursor@b 0004                Lcd_Set_Cursor@y 0007                Lcd_Set_Cursor@z 0006  
                   __accesstop 0060        __end_of__initialization 1CBE              __end_of_Lcd_Clear 1E80  
                ___rparam_used 000001                 __pcstackCOMRAM 0001                   __pidataBANK0 1E80  
                __end_of_fputc 18D0                  __end_of_fputs 1D10                  __end_of_putch 1E86  
               _Lcd_Set_Cursor 1AA6              eepromRead@address 0001           __size_of_menuControl 0060  
                    ?_Lcd_Port 0001                        ??_fputc 0005                        ??_fputs 000E  
                      ??_putch 0001                     __pbssBANK0 0060                     __pbssBANK1 0100  
                      ?_TIMER0 0001                        _CCP1CON 000FBD                        _CCP2CON 000F66  
    __size_of_Lcd_Write_String 007E         __end_of_Lcd_Set_Cursor 1B0C                        ?_strlen 0001  
                   _eepromRead 1E0E             __size_of_vfpfcnvrt 01B4                     ??_Lcd_Port 0001  
                    ?_lcd_init 0001        __size_of_menuInitialize 0024                  _menu_selected 00C9  
               _Lcd_Write_Char 1D86                        _Lcd_Cmd 1E2C                      ?_mcu_init 0001  
              __size_of_TIMER0 005E              stateMachine@F6385 0130                     _controller 0080  
                      __Hparam 0000                        __Lparam 0000                   ?_system_init 0001  
                      ___aodiv 1328                        ___aomod 14B0                      ?_vfprintf 0050  
                 __psmallconst 0600                        __pcinit 1C7C                        __ramtop 0600  
              ?_Lcd_Set_Cursor 0004                        __ptext0 1736                        __ptext1 1E60  
                      __ptext2 1614                        __ptext3 1E0E                        __ptext4 1DEA  
                      __ptext5 1B6E                        __ptext6 069A                        __ptext7 1C2A  
                      __ptext8 1B0C                        __ptext9 0FCE                     _menu_flags 00C8  
                   _menu_value 00C1                __size_of_strlen 0036                        _counter 00BD  
      stateMachine@textCursor2 00E0                      _T2CONbits 000FBA                   __size_of_abs 0040  
                 __size_of_pad 00C2                  ?_timer_0_init 0001                        _sprintf 1C2A  
                   ??_lcd_init 0004         __end_of_Lcd_Write_Char 1DBC           end_of_initialization 1CBE  
                      fputc@fp 0003                     ??_mcu_init 0001                  __Lmediumconst 0000  
                      fputs@fp 000C              __end_of_vfpfcnvrt 1182                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                      Lcd_Port@a 0001                     ??_vfprintf 0056  
                      strlen@a 0003                        strlen@s 0001                      _PORTAbits 000F80  
                    _PORTBbits 000F81                      _PORTDbits 000F83                      _PORTEbits 000F84  
                  ?_eepromRead 0001                      _TRISAbits 000F92                      _TRISBbits 000F93  
                    _TRISCbits 000F94                      _TRISDbits 000F95                      _TRISEbits 000F96  
               ??_timer_0_init 0001                ?_Lcd_Write_Char 0001              Lcd_Write_String@a 0005  
            Lcd_Write_String@i 0009                  ??_eepromWrite 0002       _button_bounce_controller 005E  
               __end_of_TIMER0 0066                  ?_stateMachine 0001             _buttonControlFlags 1182  
                    _Lcd_Clear 1E72                   _convert_data 0100                    vfpfcnvrt@ap 0044  
                  vfpfcnvrt@fp 0040                    vfpfcnvrt@ll 0048               _Lcd_Write_String 1A28  
          ?_buttonControlFlags 0001                 __end_of_strlen 1D86            start_initialization 1C7C  
                  __end_of_abs 1D50                    __end_of_pad 1992                 _menuInitialize 1DEA  
                 _driver_limit 00A3              __size_of_Lcd_Port 005C           ??_buttonControlFlags 0001  
                     ??_TIMER0 0001                 ??_stateMachine 0058            __size_of_eepromRead 001E  
                  vfprintf@fmt 0052                     ?_Lcd_Clear 0001            __end_of_eepromWrite 1DEA  
buttonControlFlags@textCursor2 0001                    __pdataBANK0 00F0           __size_of_system_init 0122  
              Lcd_Write_Char@a 0004                Lcd_Write_Char@y 0003                  ??_menuControl 005A  
                     ??_strlen 0003                    __pbssCOMRAM 005A         __end_of_menuInitialize 1E0E  
                __pcstackBANK0 00CE               ___aodiv@dividend 0001                       ?_Lcd_Cmd 0001  
            __size_of_lcd_init 0096              __size_of_mcu_init 0016                      _dtoa$2778 002E  
             ??_Lcd_Set_Cursor 0005                      __pintcode 0008           __end_of_timer_0_init 1E72  
                     ?___aodiv 0001                       ?___aomod 0001               ___aodiv@quotient 0013  
            __size_of_vfprintf 0062                      fabsf@F463 00B9                    __smallconst 0600  
              ?_menuInitialize 0001            __end_of_menuControl 1BCE                       ?_sprintf 00CE  
               __size_of_fputc 00CA                 __size_of_fputs 0044                 __size_of_putch 0002  
           eepromWrite@address 0002                       _LATAbits 000F89                       _LATBbits 000F8A  
                     _LATEbits 000F8D                    _eepromWrite 1DBC                       i2u322_40 0018  
                     i2u322_41 0014                       Lcd_Cmd@a 0003                       i2u323_40 0026  
                     i2u323_41 0022                       i2u324_40 0042                       i2u324_41 003E  
                     i2u325_40 005C                       i2u325_41 0058                       _PIR2bits 000FA1  
                  ??_Lcd_Clear 0004                   _pauseIsClick 00CC                      _vfpfcnvrt 0FCE  
                   _ADCON0bits 000FC2                     _ADCON2bits 000FC0                   ??_eepromRead 0001  
             ??_Lcd_Write_Char 0002           __end_of_stateMachine 0CF0                       _Lcd_Port 1BCE  
                    copy_data0 1C90       __end_of_Lcd_Write_String 1AA6               __size_of_Lcd_Cmd 001E  
                   _EECON1bits 000FA6                       __Hrparam 0000                     vfprintf@ap 0054  
                     __Lrparam 0000                     vfprintf@fp 0050             __end_of_eepromRead 1E2C  
      buttonControlFlags@F6381 0140               __size_of___aodiv 0188               __size_of___aomod 0164  
                   ?_vfpfcnvrt 0040                    _menuControl 1B6E                ___aodiv@divisor 0009  
              ___aodiv@counter 0011                     _ANSELAbits 000F38                     _ANSELBbits 000F39  
                   _ANSELCbits 000F3A                     _ANSELDbits 000F3B                     _ANSELEbits 000F3C  
                   sprintf@fmt 00D0                       __ptext10 0CF0                       __ptext11 18D0  
                     __ptext20 1A28                       __ptext12 1D50                       __ptext21 1D86  
                     __ptext13 1CCC                       __ptext22 1AA6                       __ptext14 1806  
                     __ptext23 1182                       __ptext15 1E84                       __ptext24 1E4A  
                     __ptext16 1D10                       __ptext25 1992                       __ptext17 14B0  
                     __ptext26 1E72                       __ptext18 1328                       __ptext27 1E2C  
                     __ptext19 1DBC                       __ptext28 1BCE                       _lcd_init 1992  
             __size_of_sprintf 0052                       _mcu_init 1E4A                  __size_of_main 00D0  
                __size_of_dtoa 02DE          __size_of_timer_0_init 0012                       int$flags 005F  
                     _vfprintf 1B0C               ___aomod@dividend 0001                    _OSCTUNEbits 000F9B  
                   _INTCONbits 000FF2                   _timer_0_init 1E60             Lcd_Write_Char@temp 0002  
                     intlevel2 0000                      sprintf@ap 00D8    __size_of_buttonControlFlags 01A6  
                   _OSCCONbits 000FD3                  ??_system_init 0002                   _procces_data 0060  
              ___aomod@divisor 0009                    ??_vfpfcnvrt 0046                ___aomod@counter 0011  
           Lcd_Set_Cursor@temp 0008               ??_menuInitialize 0001          __size_of_stateMachine 0656  
                     sprintf@f 00DA                       sprintf@s 00CE                    _timer_value 00AF  
                 ___aodiv@sign 0012                    _textCursor2 0150                   ?_eepromWrite 0001  
                 ___aomod@sign 0012                   _stateMachine 069A  
